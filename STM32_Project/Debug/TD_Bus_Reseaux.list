
TD_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c8  080064c8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080064c8  080064c8  000074c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d0  080064d0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064d4  080064d4  000074d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080064d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000068  08006540  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006540  00008470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a17  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286c  00000000  00000000  0001baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e51  00000000  00000000  0001f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a67  00000000  00000000  00020399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165d4  00000000  00000000  00043e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d893e  00000000  00000000  0005a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132d12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  00132d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0013830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006400 	.word	0x08006400

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006400 	.word	0x08006400

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	@ 0x48
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fe4f 	bl	8001248 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f925 	bl	80007f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 fac3 	bl	8000b38 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 fa97 	bl	8000ae4 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 80005b6:	f000 f991 	bl	80008dc <MX_CAN1_Init>
	MX_I2C1_Init();
 80005ba:	f000 f9c3 	bl	8000944 <MX_I2C1_Init>
	MX_UART4_Init();
 80005be:	f000 fa3d 	bl	8000a3c <MX_UART4_Init>
	MX_UART5_Init();
 80005c2:	f000 fa65 	bl	8000a90 <MX_UART5_Init>
	MX_TIM2_Init();
 80005c6:	f000 f9eb 	bl	80009a0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_RegisterCallback(&huart4, HAL_UART_RX_COMPLETE_CB_ID, User_UartCompleteCallback);
 80005ca:	4a83      	ldr	r2, [pc, #524]	@ (80007d8 <main+0x238>)
 80005cc:	2103      	movs	r1, #3
 80005ce:	4883      	ldr	r0, [pc, #524]	@ (80007dc <main+0x23c>)
 80005d0:	f003 feca 	bl	8004368 <HAL_UART_RegisterCallback>
	HAL_TIM_Base_Start_IT(&htim2);
 80005d4:	4882      	ldr	r0, [pc, #520]	@ (80007e0 <main+0x240>)
 80005d6:	f003 f985 	bl	80038e4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("==== TP BUS & NETWORK ====");
 80005da:	4882      	ldr	r0, [pc, #520]	@ (80007e4 <main+0x244>)
 80005dc:	f005 f844 	bl	8005668 <iprintf>
	uint8_t calib_data[BMP_CALIB_DATA_LENGTH];
	Struct_CalibDataNames *calib_names;
	int32_t *temp; int32_t *press; // raw values

	//question réponse capteur avec I2C pour ID capteur
	id_buf[0]= BMP_ID_REG;
 80005e0:	23d0      	movs	r3, #208	@ 0xd0
 80005e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	HAL_I2C_Master_Transmit(&hi2c1,BMP_ADDR,id_buf,1,HAL_MAX_DELAY);
 80005e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	21ee      	movs	r1, #238	@ 0xee
 80005f4:	487c      	ldr	r0, [pc, #496]	@ (80007e8 <main+0x248>)
 80005f6:	f001 fc2b 	bl	8001e50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,BMP_ADDR,id_buf,1,HAL_MAX_DELAY);
 80005fa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	21ee      	movs	r1, #238	@ 0xee
 8000608:	4877      	ldr	r0, [pc, #476]	@ (80007e8 <main+0x248>)
 800060a:	f001 fd1f 	bl	800204c <HAL_I2C_Master_Receive>
	printf("BMP280 ID : %x\r\n",id_buf[0]);
 800060e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000612:	4619      	mov	r1, r3
 8000614:	4875      	ldr	r0, [pc, #468]	@ (80007ec <main+0x24c>)
 8000616:	f005 f827 	bl	8005668 <iprintf>

	//Configuration et vérification du capteur
	data_config[0]= BMP_ADDR_MODE;
 800061a:	23f4      	movs	r3, #244	@ 0xf4
 800061c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	data_config[1]= BMP_MODE;
 8000620:	2349      	movs	r3, #73	@ 0x49
 8000622:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	HAL_I2C_Master_Transmit(&hi2c1,BMP_ADDR,data_config,2,HAL_MAX_DELAY);
 8000626:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	21ee      	movs	r1, #238	@ 0xee
 8000634:	486c      	ldr	r0, [pc, #432]	@ (80007e8 <main+0x248>)
 8000636:	f001 fc0b 	bl	8001e50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,BMP_ADDR,data_config,2,HAL_MAX_DELAY);
 800063a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2302      	movs	r3, #2
 8000646:	21ee      	movs	r1, #238	@ 0xee
 8000648:	4867      	ldr	r0, [pc, #412]	@ (80007e8 <main+0x248>)
 800064a:	f001 fcff 	bl	800204c <HAL_I2C_Master_Receive>
	printf("Register : %x\r\n",data_config[0]);
 800064e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000652:	4619      	mov	r1, r3
 8000654:	4866      	ldr	r0, [pc, #408]	@ (80007f0 <main+0x250>)
 8000656:	f005 f807 	bl	8005668 <iprintf>
	printf("Mode : %x\r\n",data_config[1]);
 800065a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800065e:	4619      	mov	r1, r3
 8000660:	4864      	ldr	r0, [pc, #400]	@ (80007f4 <main+0x254>)
 8000662:	f005 f801 	bl	8005668 <iprintf>

	// Retrieving of calibration Data
	calib_reg[0] = BMP_CALIB_REG;
 8000666:	2388      	movs	r3, #136	@ 0x88
 8000668:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, calib_reg, 1, HAL_MAX_DELAY);
 800066c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21ee      	movs	r1, #238	@ 0xee
 800067a:	485b      	ldr	r0, [pc, #364]	@ (80007e8 <main+0x248>)
 800067c:	f001 fbe8 	bl	8001e50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, calib_data, BMP_CALIB_DATA_LENGTH, HAL_MAX_DELAY);
 8000680:	f107 0210 	add.w	r2, r7, #16
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2318      	movs	r3, #24
 800068c:	21ee      	movs	r1, #238	@ 0xee
 800068e:	4856      	ldr	r0, [pc, #344]	@ (80007e8 <main+0x248>)
 8000690:	f001 fcdc 	bl	800204c <HAL_I2C_Master_Receive>
	calib_names->dig_T1 = (uint16_t)((calib_data[1] << 8) | calib_data[0]);
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	7c3b      	ldrb	r3, [r7, #16]
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a6:	801a      	strh	r2, [r3, #0]
	calib_names->dig_T2 = (int16_t)((calib_data[3] << 8) | calib_data[2]);
 80006a8:	7cfb      	ldrb	r3, [r7, #19]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	7cbb      	ldrb	r3, [r7, #18]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006b8:	805a      	strh	r2, [r3, #2]
	calib_names->dig_T3 = (int16_t)((calib_data[5] << 8) | calib_data[4]);
 80006ba:	7d7b      	ldrb	r3, [r7, #21]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21a      	sxth	r2, r3
 80006c0:	7d3b      	ldrb	r3, [r7, #20]
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ca:	809a      	strh	r2, [r3, #4]
	calib_names->dig_P1 = (uint16_t)((calib_data[7] << 8) | calib_data[6]);
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	7dbb      	ldrb	r3, [r7, #22]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b21b      	sxth	r3, r3
 80006da:	b29a      	uxth	r2, r3
 80006dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006de:	80da      	strh	r2, [r3, #6]
	calib_names->dig_P2 = (int16_t)((calib_data[9] << 8) | calib_data[8]);
 80006e0:	7e7b      	ldrb	r3, [r7, #25]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	7e3b      	ldrb	r3, [r7, #24]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006f0:	811a      	strh	r2, [r3, #8]
	calib_names->dig_P3 = (int16_t)((calib_data[11] << 8) | calib_data[10]);
 80006f2:	7efb      	ldrb	r3, [r7, #27]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	7ebb      	ldrb	r3, [r7, #26]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21a      	sxth	r2, r3
 8000700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000702:	815a      	strh	r2, [r3, #10]
	calib_names->dig_P4 = (int16_t)((calib_data[13] << 8) | calib_data[12]);
 8000704:	7f7b      	ldrb	r3, [r7, #29]
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21a      	sxth	r2, r3
 800070a:	7f3b      	ldrb	r3, [r7, #28]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21a      	sxth	r2, r3
 8000712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000714:	819a      	strh	r2, [r3, #12]
	calib_names->dig_P5 = (int16_t)((calib_data[15] << 8) | calib_data[14]);
 8000716:	7ffb      	ldrb	r3, [r7, #31]
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b21a      	sxth	r2, r3
 800071c:	7fbb      	ldrb	r3, [r7, #30]
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21a      	sxth	r2, r3
 8000724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000726:	81da      	strh	r2, [r3, #14]
	calib_names->dig_P6 = (int16_t)((calib_data[17] << 8) | calib_data[16]);
 8000728:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800073c:	821a      	strh	r2, [r3, #16]
	calib_names->dig_P7 = (int16_t)((calib_data[19] << 8) | calib_data[18]);
 800073e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21a      	sxth	r2, r3
 8000750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000752:	825a      	strh	r2, [r3, #18]
	calib_names->dig_P8 = (int16_t)((calib_data[21] << 8) | calib_data[20]);
 8000754:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	b21a      	sxth	r2, r3
 800075c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21a      	sxth	r2, r3
 8000766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000768:	829a      	strh	r2, [r3, #20]
	calib_names->dig_P9 = (int16_t)((calib_data[23] << 8) | calib_data[22]);
 800076a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	b21a      	sxth	r2, r3
 8000772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21a      	sxth	r2, r3
 800077c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800077e:	82da      	strh	r2, [r3, #22]
		HAL_UART_Transmit( &huart2, &data, 1, HAL_MAX_DELAY );
		 */

		//Retrieving the raw temp and press values
		uint8_t raw_data[BMP_TEMP_PRESS_DATA_LENGTH];
		uint8_t reg = BMP_TEMP_PRESS_REG;
 8000780:	23f7      	movs	r3, #247	@ 0xf7
 8000782:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000784:	1dfa      	adds	r2, r7, #7
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	21ee      	movs	r1, #238	@ 0xee
 8000790:	4815      	ldr	r0, [pc, #84]	@ (80007e8 <main+0x248>)
 8000792:	f001 fb5d 	bl	8001e50 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, raw_data, BMP_TEMP_PRESS_DATA_LENGTH, HAL_MAX_DELAY);
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2306      	movs	r3, #6
 80007a2:	21ee      	movs	r1, #238	@ 0xee
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <main+0x248>)
 80007a6:	f001 fc51 	bl	800204c <HAL_I2C_Master_Receive>
		*press = (int32_t)(((raw_data[0] << 16) | (raw_data[1] << 8) | raw_data[2]) >> 4);
 80007aa:	7a3b      	ldrb	r3, [r7, #8]
 80007ac:	041a      	lsls	r2, r3, #16
 80007ae:	7a7b      	ldrb	r3, [r7, #9]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	4313      	orrs	r3, r2
 80007b4:	7aba      	ldrb	r2, [r7, #10]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	111a      	asrs	r2, r3, #4
 80007ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007bc:	601a      	str	r2, [r3, #0]
		*temp = (int32_t)(((raw_data[3] << 16) | (raw_data[4] << 8) | raw_data[5]) >> 4);
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	041a      	lsls	r2, r3, #16
 80007c2:	7b3b      	ldrb	r3, [r7, #12]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	4313      	orrs	r3, r2
 80007c8:	7b7a      	ldrb	r2, [r7, #13]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	111a      	asrs	r2, r3, #4
 80007ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d0:	601a      	str	r2, [r3, #0]
	{
 80007d2:	bf00      	nop
 80007d4:	e7d4      	b.n	8000780 <main+0x1e0>
 80007d6:	bf00      	nop
 80007d8:	08000c31 	.word	0x08000c31
 80007dc:	200001b4 	.word	0x200001b4
 80007e0:	20000100 	.word	0x20000100
 80007e4:	08006418 	.word	0x08006418
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	08006434 	.word	0x08006434
 80007f0:	08006448 	.word	0x08006448
 80007f4:	08006458 	.word	0x08006458

080007f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2234      	movs	r2, #52	@ 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 f876 	bl	80058f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <SystemClock_Config+0xdc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <SystemClock_Config+0xdc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <SystemClock_Config+0xdc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <SystemClock_Config+0xe0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <SystemClock_Config+0xe0>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <SystemClock_Config+0xe0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800086c:	23b4      	movs	r3, #180	@ 0xb4
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fd35 	bl	80032f0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800088c:	f000 f9de 	bl	8000c4c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000890:	f002 f994 	bl	8002bbc <HAL_PWREx_EnableOverDrive>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800089a:	f000 f9d7 	bl	8000c4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2105      	movs	r1, #5
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 f9cd 	bl	8002c5c <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80008c8:	f000 f9c0 	bl	8000c4c <Error_Handler>
	}
}
 80008cc:	bf00      	nop
 80008ce:	3750      	adds	r7, #80	@ 0x50
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_CAN1_Init+0x60>)
 80008e2:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <MX_CAN1_Init+0x64>)
 80008e4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_CAN1_Init+0x60>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_CAN1_Init+0x60>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_CAN1_Init+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_CAN1_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_CAN1_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_CAN1_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CAN1_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_CAN1_Init+0x60>)
 800092a:	f000 fcff 	bl	800132c <HAL_CAN_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 8000934:	f000 f98a 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000084 	.word	0x20000084
 8000940:	40006400 	.word	0x40006400

08000944 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x50>)
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <MX_I2C1_Init+0x54>)
 800094c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_I2C1_Init+0x58>)
 8000952:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000966:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_I2C1_Init+0x50>)
 8000982:	f001 f921 	bl	8001bc8 <HAL_I2C_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800098c:	f000 f95e 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000ac 	.word	0x200000ac
 8000998:	40005400 	.word	0x40005400
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 180-1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009c6:	22b3      	movs	r2, #179	@ 0xb3
 80009c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000000-1;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <MX_TIM2_Init+0x98>)
 80009d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009de:	2280      	movs	r2, #128	@ 0x80
 80009e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <MX_TIM2_Init+0x94>)
 80009e4:	f002 ff22 	bl	800382c <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x52>
	{
		Error_Handler();
 80009ee:	f000 f92d 	bl	8000c4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <MX_TIM2_Init+0x94>)
 8000a00:	f003 f8f0 	bl	8003be4 <HAL_TIM_ConfigClockSource>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x6e>
	{
		Error_Handler();
 8000a0a:	f000 f91f 	bl	8000c4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <MX_TIM2_Init+0x94>)
 8000a1c:	f003 fbac 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 8000a26:	f000 f911 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000100 	.word	0x20000100
 8000a38:	000f423f 	.word	0x000f423f

08000a3c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_UART4_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_UART4_Init+0x4c>)
 8000a74:	f003 fc1a 	bl	80042ac <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000a7e:	f000 f8e5 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001b4 	.word	0x200001b4
 8000a8c:	40004c00 	.word	0x40004c00

08000a90 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_UART5_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ac8:	f003 fbf0 	bl	80042ac <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8000ad2:	f000 f8bb 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000022c 	.word	0x2000022c
 8000ae0:	40005000 	.word	0x40005000

08000ae4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f003 fbc6 	bl	80042ac <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000b26:	f000 f891 	bl	8000c4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002a4 	.word	0x200002a4
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b34      	ldr	r3, [pc, #208]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a33      	ldr	r2, [pc, #204]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a2c      	ldr	r2, [pc, #176]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a25      	ldr	r2, [pc, #148]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_GPIO_Init+0xec>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <MX_GPIO_Init+0xf0>)
 8000be0:	f000 ffd8 	bl	8001b94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <MX_GPIO_Init+0xf4>)
 8000bfc:	f000 fe36 	bl	800186c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_GPIO_Init+0xf0>)
 8000c18:	f000 fe28 	bl	800186c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <User_UartCompleteCallback>:

/* USER CODE BEGIN 4 */
void User_UartCompleteCallback(UART_HandleTypeDef *huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	printf("j'ai reçu des datas\r\n");
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <User_UartCompleteCallback+0x18>)
 8000c3a:	f004 fd7d 	bl	8005738 <puts>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	08006464 	.word	0x08006464

08000c4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fd14 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_CAN_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_CAN_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d14:	2309      	movs	r3, #9
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_CAN_MspInit+0x8c>)
 8000d20:	f000 fda4 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40006400 	.word	0x40006400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	@ (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <HAL_I2C_MspInit+0x8c>)
 8000d94:	f000 fd6a 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd8:	d115      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201c      	movs	r0, #28
 8000dfc:	f000 fc6d 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e00:	201c      	movs	r0, #28
 8000e02:	f000 fc86 	bl	8001712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5e      	ldr	r2, [pc, #376]	@ (8000fac <HAL_UART_MspInit+0x198>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d134      	bne.n	8000ea0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e4e:	623b      	str	r3, [r7, #32]
 8000e50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	4b56      	ldr	r3, [pc, #344]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a55      	ldr	r2, [pc, #340]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	484a      	ldr	r0, [pc, #296]	@ (8000fb4 <HAL_UART_MspInit+0x1a0>)
 8000e8a:	f000 fcef 	bl	800186c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2034      	movs	r0, #52	@ 0x34
 8000e94:	f000 fc21 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e98:	2034      	movs	r0, #52	@ 0x34
 8000e9a:	f000 fc3a 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e9e:	e081      	b.n	8000fa4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==UART5)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <HAL_UART_MspInit+0x1a4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14b      	bne.n	8000f42 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b40      	ldr	r3, [pc, #256]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a38      	ldr	r2, [pc, #224]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a31      	ldr	r2, [pc, #196]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f10:	2308      	movs	r3, #8
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4828      	ldr	r0, [pc, #160]	@ (8000fbc <HAL_UART_MspInit+0x1a8>)
 8000f1c:	f000 fca6 	bl	800186c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f30:	2308      	movs	r3, #8
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4821      	ldr	r0, [pc, #132]	@ (8000fc0 <HAL_UART_MspInit+0x1ac>)
 8000f3c:	f000 fc96 	bl	800186c <HAL_GPIO_Init>
}
 8000f40:	e030      	b.n	8000fa4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <HAL_UART_MspInit+0x1b0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d12b      	bne.n	8000fa4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <HAL_UART_MspInit+0x19c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f84:	230c      	movs	r3, #12
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f94:	2307      	movs	r3, #7
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_UART_MspInit+0x1a0>)
 8000fa0:	f000 fc64 	bl	800186c <HAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3738      	adds	r7, #56	@ 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40004c00 	.word	0x40004c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40005000 	.word	0x40005000
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fd0:	1d39      	adds	r1, r7, #4
 8000fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <__io_putchar+0x30>)
 8000fda:	f003 fa5d 	bl	8004498 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000fde:	1d39      	adds	r1, r7, #4
 8000fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <__io_putchar+0x34>)
 8000fe8:	f003 fa56 	bl	8004498 <HAL_UART_Transmit>

  return ch;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200002a4 	.word	0x200002a4
 8000ffc:	200001b4 	.word	0x200001b4

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <NMI_Handler+0x4>

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <MemManage_Handler+0x4>

08001018 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <UsageFault_Handler+0x4>

08001028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001056:	f000 f949 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <TIM2_IRQHandler+0x10>)
 8001066:	f002 fcad 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000100 	.word	0x20000100

08001074 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <UART4_IRQHandler+0x10>)
 800107a:	f003 fa99 	bl	80045b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001b4 	.word	0x200001b4

08001088 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109a:	f3af 8000 	nop.w
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
  }

  return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff73 	bl	8000fc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
  }
  return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_close>:

int _close(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001122:	605a      	str	r2, [r3, #4]
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_isatty>:

int _isatty(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f004 fbfe 	bl	8005994 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	2000031c 	.word	0x2000031c
 80011cc:	20000470 	.word	0x20000470

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	@ (8001240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001222:	f004 fbbd 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f9bb 	bl	80005a0 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001238:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 800123c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001240:	20000470 	.word	0x20000470

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 fa27 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fcec 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fa3f 	bl	800172e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 fa07 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	20000320 	.word	0x20000320

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000320 	.word	0x20000320

0800132c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0ed      	b.n	800151a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fcac 	bl	8000ca8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff ffd8 	bl	8001314 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001366:	e012      	b.n	800138e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001368:	f7ff ffd4 	bl	8001314 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b0a      	cmp	r3, #10
 8001374:	d90b      	bls.n	800138e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2205      	movs	r2, #5
 8001386:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0c5      	b.n	800151a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0e5      	beq.n	8001368 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0202 	bic.w	r2, r2, #2
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ac:	f7ff ffb2 	bl	8001314 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b2:	e012      	b.n	80013da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b4:	f7ff ffae 	bl	8001314 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d90b      	bls.n	80013da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e09f      	b.n	800151a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e5      	bne.n	80013b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7e1b      	ldrb	r3, [r3, #24]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e007      	b.n	8001412 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e9b      	ldrb	r3, [r3, #26]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0220 	orr.w	r2, r2, #32
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e007      	b.n	8001466 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0220 	bic.w	r2, r2, #32
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7edb      	ldrb	r3, [r3, #27]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0210 	bic.w	r2, r2, #16
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e007      	b.n	8001490 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0210 	orr.w	r2, r2, #16
 800148e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7f1b      	ldrb	r3, [r3, #28]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d108      	bne.n	80014aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0208 	orr.w	r2, r2, #8
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e007      	b.n	80014ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0208 	bic.w	r2, r2, #8
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7f5b      	ldrb	r3, [r3, #29]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0204 	orr.w	r2, r2, #4
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0204 	bic.w	r2, r2, #4
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	ea42 0103 	orr.w	r1, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff fdde 	bl	8001314 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d008      	beq.n	8001778 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e052      	b.n	800181e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0216 	bic.w	r2, r2, #22
 8001786:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001796:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <HAL_DMA_Abort+0x62>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c8:	e013      	b.n	80017f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ca:	f7ff fda3 	bl	8001314 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d90c      	bls.n	80017f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e015      	b.n	800181e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e4      	bne.n	80017ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001804:	223f      	movs	r2, #63	@ 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e00c      	b.n	800185e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2205      	movs	r2, #5
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e165      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8154 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d005      	beq.n	80018be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d017      	beq.n	800195c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80ae 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a5c      	ldr	r2, [pc, #368]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b5a      	ldr	r3, [pc, #360]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <HAL_GPIO_Init+0x308>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b78 <HAL_GPIO_Init+0x30c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x216>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4d      	ldr	r2, [pc, #308]	@ (8001b7c <HAL_GPIO_Init+0x310>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_GPIO_Init+0x314>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_GPIO_Init+0x318>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x20a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x31c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x206>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x320>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x202>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a31      	ldr	r2, [pc, #196]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a11      	ldr	r2, [pc, #68]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae96 	bls.w	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12b      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f8a2 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	@ 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f001 f908 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d807      	bhi.n	8001c4c <HAL_I2C_Init+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	@ (8001e40 <HAL_I2C_Init+0x278>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e006      	b.n	8001c5a <HAL_I2C_Init+0x92>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e44 <HAL_I2C_Init+0x27c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e7      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a78      	ldr	r2, [pc, #480]	@ (8001e48 <HAL_I2C_Init+0x280>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d802      	bhi.n	8001c9c <HAL_I2C_Init+0xd4>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_I2C_Init+0xe8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_I2C_Init+0x284>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	495c      	ldr	r1, [pc, #368]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d819      	bhi.n	8001d04 <HAL_I2C_Init+0x13c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e59      	subs	r1, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_I2C_Init+0x138>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	e051      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_I2C_Init+0x168>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Init+0x18e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_I2C_Init+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e58      	subs	r0, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d82:	e00f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6911      	ldr	r1, [r2, #16]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	000186a0 	.word	0x000186a0
 8001e40:	001e847f 	.word	0x001e847f
 8001e44:	003d08ff 	.word	0x003d08ff
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
 8001e60:	4613      	mov	r3, r2
 8001e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fa56 	bl	8001314 <HAL_GetTick>
 8001e68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	f040 80e0 	bne.w	8002038 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4970      	ldr	r1, [pc, #448]	@ (8002044 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fc64 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0d3      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x50>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0cc      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d007      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2221      	movs	r2, #33	@ 0x21
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a50      	ldr	r2, [pc, #320]	@ (8002048 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 face 	bl	80024b0 <I2C_MasterRequestWrite>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e08d      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f34:	e066      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fd22 	bl	8002984 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d107      	bne.n	8001f5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x188>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d017      	beq.n	8001fd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fd19 	bl	8002a14 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e01a      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d194      	bne.n	8001f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	00100002 	.word	0x00100002
 8002048:	ffff0000 	.word	0xffff0000

0800204c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	@ 0x30
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff f958 	bl	8001314 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 8217 	bne.w	80024a2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	497c      	ldr	r1, [pc, #496]	@ (8002270 <HAL_I2C_Master_Receive+0x224>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fb66 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e20a      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2C_Master_Receive+0x50>
 8002098:	2302      	movs	r3, #2
 800209a:	e203      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d007      	beq.n	80020c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2222      	movs	r2, #34	@ 0x22
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a5c      	ldr	r2, [pc, #368]	@ (8002274 <HAL_I2C_Master_Receive+0x228>)
 8002102:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa52 	bl	80025b4 <I2C_MasterRequestRead>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1c4      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e198      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214e:	2b01      	cmp	r3, #1
 8002150:	d11b      	bne.n	800218a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e178      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	2b02      	cmp	r3, #2
 8002190:	d11b      	bne.n	80021ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	e158      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021f0:	e144      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 80f1 	bhi.w	80023de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d123      	bne.n	800224c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fc4b 	bl	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e145      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800224a:	e117      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	2b02      	cmp	r3, #2
 8002252:	d14e      	bne.n	80022f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	4906      	ldr	r1, [pc, #24]	@ (8002278 <HAL_I2C_Master_Receive+0x22c>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa76 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e11a      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
 800226e:	bf00      	nop
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f0:	e0c4      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	496c      	ldr	r1, [pc, #432]	@ (80024ac <HAL_I2C_Master_Receive+0x460>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fa27 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cb      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	2200      	movs	r2, #0
 8002356:	4955      	ldr	r1, [pc, #340]	@ (80024ac <HAL_I2C_Master_Receive+0x460>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9f9 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e09d      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023dc:	e04e      	b.n	800247c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb5e 	bl	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e058      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d124      	bne.n	800247c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002448:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f aeb6 	bne.w	80021f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3728      	adds	r7, #40	@ 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00010004 	.word	0x00010004

080024b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d006      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d003      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024d8:	d108      	bne.n	80024ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e00b      	b.n	8002504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d107      	bne.n	8002504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f91d 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800252a:	d103      	bne.n	8002534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e035      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002540:	d108      	bne.n	8002554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e01b      	b.n	800258c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	11db      	asrs	r3, r3, #7
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 0306 	and.w	r3, r3, #6
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f063 030f 	orn	r3, r3, #15
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <I2C_MasterRequestWrite+0xfc>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f966 	bl	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e010      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <I2C_MasterRequestWrite+0x100>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f956 	bl	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00010008 	.word	0x00010008
 80025b0:	00010002 	.word	0x00010002

080025b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d006      	beq.n	80025ee <I2C_MasterRequestRead+0x3a>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d003      	beq.n	80025ee <I2C_MasterRequestRead+0x3a>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025ec:	d108      	bne.n	8002600 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00b      	b.n	8002618 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	2b11      	cmp	r3, #17
 8002606:	d107      	bne.n	8002618 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f893 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800263e:	d103      	bne.n	8002648 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e079      	b.n	8002740 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002654:	d108      	bne.n	8002668 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	e05f      	b.n	8002728 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002668:	897b      	ldrh	r3, [r7, #10]
 800266a:	11db      	asrs	r3, r3, #7
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0306 	and.w	r3, r3, #6
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f063 030f 	orn	r3, r3, #15
 8002678:	b2da      	uxtb	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4930      	ldr	r1, [pc, #192]	@ (8002748 <I2C_MasterRequestRead+0x194>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f8dc 	bl	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e054      	b.n	8002740 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4929      	ldr	r1, [pc, #164]	@ (800274c <I2C_MasterRequestRead+0x198>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8cc 	bl	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e044      	b.n	8002740 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f831 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002702:	d103      	bne.n	800270c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e017      	b.n	8002740 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	11db      	asrs	r3, r3, #7
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f063 030e 	orn	r3, r3, #14
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4907      	ldr	r1, [pc, #28]	@ (800274c <I2C_MasterRequestRead+0x198>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f888 	bl	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00010008 	.word	0x00010008
 800274c:	00010002 	.word	0x00010002

08002750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002760:	e048      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d044      	beq.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7fe fdd3 	bl	8001314 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d139      	bne.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10d      	bne.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	e00c      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d116      	bne.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e023      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10d      	bne.n	800281a <I2C_WaitOnFlagUntilTimeout+0xca>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	e00c      	b.n	8002834 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	43da      	mvns	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4013      	ands	r3, r2
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	429a      	cmp	r2, r3
 8002838:	d093      	beq.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002852:	e071      	b.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d123      	bne.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002872:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800287c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e067      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d041      	beq.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b4:	f7fe fd2e 	bl	8001314 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d302      	bcc.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d136      	bne.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10c      	bne.n	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e00b      	b.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4013      	ands	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e021      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10c      	bne.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	43da      	mvns	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e00b      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f af6d 	bne.w	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002990:	e034      	b.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8e3 	bl	8002b5e <I2C_IsAcknowledgeFailed>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d028      	beq.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe fcb3 	bl	8001314 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11d      	bne.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b80      	cmp	r3, #128	@ 0x80
 80029cc:	d016      	beq.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d1c3      	bne.n	8002992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a20:	e034      	b.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f89b 	bl	8002b5e <I2C_IsAcknowledgeFailed>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e034      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d028      	beq.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe fc6b 	bl	8001314 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11d      	bne.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d016      	beq.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d1c3      	bne.n	8002a22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab0:	e049      	b.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d119      	bne.n	8002af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0210 	mvn.w	r2, #16
 8002ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e030      	b.n	8002b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7fe fc0e 	bl	8001314 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11d      	bne.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d016      	beq.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d1ae      	bne.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b74:	d11b      	bne.n	8002bae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_PWREx_EnableOverDrive+0x94>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7fe fb94 	bl	8001314 <HAL_GetTick>
 8002bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bee:	e009      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf0:	f7fe fb90 	bl	8001314 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bfe:	d901      	bls.n	8002c04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e01f      	b.n	8002c44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c04:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c12:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c18:	f7fe fb7c 	bl	8001314 <HAL_GetTick>
 8002c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c1e:	e009      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c20:	f7fe fb78 	bl	8001314 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c2e:	d901      	bls.n	8002c34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e007      	b.n	8002c44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c34:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c40:	d1ee      	bne.n	8002c20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	420e0040 	.word	0x420e0040
 8002c54:	40007000 	.word	0x40007000
 8002c58:	420e0044 	.word	0x420e0044

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fae2 	bl	8001314 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fade 	bl	8001314 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f855 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	@ (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fa42 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800647c 	.word	0x0800647c
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	0800648c 	.word	0x0800648c

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e6c:	f7ff ffdc 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0b5b      	lsrs	r3, r3, #13
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	@ (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	0800648c 	.word	0x0800648c

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b0ae      	sub	sp, #184	@ 0xb8
 8002e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb6:	4bcb      	ldr	r3, [pc, #812]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	f200 8206 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ecc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	080032d1 	.word	0x080032d1
 8002ed4:	080032d1 	.word	0x080032d1
 8002ed8:	080032d1 	.word	0x080032d1
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	080032d1 	.word	0x080032d1
 8002ee4:	080032d1 	.word	0x080032d1
 8002ee8:	080032d1 	.word	0x080032d1
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	080032d1 	.word	0x080032d1
 8002ef4:	080032d1 	.word	0x080032d1
 8002ef8:	080032d1 	.word	0x080032d1
 8002efc:	08003101 	.word	0x08003101
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4bb9      	ldr	r3, [pc, #740]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f06:	e1e7      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f08:	4bb8      	ldr	r3, [pc, #736]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f0e:	e1e3      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4bb4      	ldr	r3, [pc, #720]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1c:	4bb1      	ldr	r3, [pc, #708]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d071      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f28:	4bae      	ldr	r3, [pc, #696]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f60:	0150      	lsls	r0, r2, #5
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4621      	mov	r1, r4
 8002f68:	1a51      	subs	r1, r2, r1
 8002f6a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f80:	4649      	mov	r1, r9
 8002f82:	018b      	lsls	r3, r1, #6
 8002f84:	4641      	mov	r1, r8
 8002f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	018a      	lsls	r2, r1, #6
 8002f8e:	4641      	mov	r1, r8
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f94:	4649      	mov	r1, r9
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fa8:	4649      	mov	r1, r9
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fd8:	4629      	mov	r1, r5
 8002fda:	024b      	lsls	r3, r1, #9
 8002fdc:	4621      	mov	r1, r4
 8002fde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	024a      	lsls	r2, r1, #9
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ff8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ffc:	f7fd f958 	bl	80002b0 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800300a:	e067      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4b75      	ldr	r3, [pc, #468]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003018:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800301c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003026:	2300      	movs	r3, #0
 8003028:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800302a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800302e:	4622      	mov	r2, r4
 8003030:	462b      	mov	r3, r5
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	0159      	lsls	r1, r3, #5
 800303c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003040:	0150      	lsls	r0, r2, #5
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4621      	mov	r1, r4
 8003048:	1a51      	subs	r1, r2, r1
 800304a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800304c:	4629      	mov	r1, r5
 800304e:	eb63 0301 	sbc.w	r3, r3, r1
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003060:	4649      	mov	r1, r9
 8003062:	018b      	lsls	r3, r1, #6
 8003064:	4641      	mov	r1, r8
 8003066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800306a:	4641      	mov	r1, r8
 800306c:	018a      	lsls	r2, r1, #6
 800306e:	4641      	mov	r1, r8
 8003070:	ebb2 0a01 	subs.w	sl, r2, r1
 8003074:	4649      	mov	r1, r9
 8003076:	eb63 0b01 	sbc.w	fp, r3, r1
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003086:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800308a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800308e:	4692      	mov	sl, r2
 8003090:	469b      	mov	fp, r3
 8003092:	4623      	mov	r3, r4
 8003094:	eb1a 0303 	adds.w	r3, sl, r3
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	462b      	mov	r3, r5
 800309c:	eb4b 0303 	adc.w	r3, fp, r3
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030ae:	4629      	mov	r1, r5
 80030b0:	028b      	lsls	r3, r1, #10
 80030b2:	4621      	mov	r1, r4
 80030b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b8:	4621      	mov	r1, r4
 80030ba:	028a      	lsls	r2, r1, #10
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030c4:	2200      	movs	r2, #0
 80030c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80030c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80030ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80030ce:	f7fd f8ef 	bl	80002b0 <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4613      	mov	r3, r2
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030dc:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	3301      	adds	r3, #1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80030ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030fe:	e0eb      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b38      	ldr	r3, [pc, #224]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310c:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d06b      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b32      	ldr	r3, [pc, #200]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	2200      	movs	r2, #0
 8003120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003122:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003124:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	663b      	str	r3, [r7, #96]	@ 0x60
 800312c:	2300      	movs	r3, #0
 800312e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003130:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0159      	lsls	r1, r3, #5
 8003142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003146:	0150      	lsls	r0, r2, #5
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4621      	mov	r1, r4
 800314e:	1a51      	subs	r1, r2, r1
 8003150:	61b9      	str	r1, [r7, #24]
 8003152:	4629      	mov	r1, r5
 8003154:	eb63 0301 	sbc.w	r3, r3, r1
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003166:	4659      	mov	r1, fp
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	4651      	mov	r1, sl
 800316c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003170:	4651      	mov	r1, sl
 8003172:	018a      	lsls	r2, r1, #6
 8003174:	4651      	mov	r1, sl
 8003176:	ebb2 0801 	subs.w	r8, r2, r1
 800317a:	4659      	mov	r1, fp
 800317c:	eb63 0901 	sbc.w	r9, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003190:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003194:	4690      	mov	r8, r2
 8003196:	4699      	mov	r9, r3
 8003198:	4623      	mov	r3, r4
 800319a:	eb18 0303 	adds.w	r3, r8, r3
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	462b      	mov	r3, r5
 80031a2:	eb49 0303 	adc.w	r3, r9, r3
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031b4:	4629      	mov	r1, r5
 80031b6:	024b      	lsls	r3, r1, #9
 80031b8:	4621      	mov	r1, r4
 80031ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031be:	4621      	mov	r1, r4
 80031c0:	024a      	lsls	r2, r1, #9
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ca:	2200      	movs	r2, #0
 80031cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031d4:	f7fd f86c 	bl	80002b0 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e2:	e065      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x420>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f0:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	2200      	movs	r2, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	4611      	mov	r1, r2
 80031fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003200:	653b      	str	r3, [r7, #80]	@ 0x50
 8003202:	2300      	movs	r3, #0
 8003204:	657b      	str	r3, [r7, #84]	@ 0x54
 8003206:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800320a:	4642      	mov	r2, r8
 800320c:	464b      	mov	r3, r9
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4641      	mov	r1, r8
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	4649      	mov	r1, r9
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800323c:	4659      	mov	r1, fp
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4651      	mov	r1, sl
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4651      	mov	r1, sl
 800324c:	1a54      	subs	r4, r2, r1
 800324e:	4659      	mov	r1, fp
 8003250:	eb63 0501 	sbc.w	r5, r3, r1
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	00eb      	lsls	r3, r5, #3
 800325e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003262:	00e2      	lsls	r2, r4, #3
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	4643      	mov	r3, r8
 800326a:	18e3      	adds	r3, r4, r3
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	464b      	mov	r3, r9
 8003270:	eb45 0303 	adc.w	r3, r5, r3
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003282:	4629      	mov	r1, r5
 8003284:	028b      	lsls	r3, r1, #10
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800328c:	4621      	mov	r1, r4
 800328e:	028a      	lsls	r2, r1, #10
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003298:	2200      	movs	r2, #0
 800329a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800329c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800329e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032a2:	f7fd f805 	bl	80002b0 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4613      	mov	r3, r2
 80032ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0f1b      	lsrs	r3, r3, #28
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80032be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ce:	e003      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	37b8      	adds	r7, #184	@ 0xb8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400

080032f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e28d      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8083 	beq.w	8003416 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003310:	4b94      	ldr	r3, [pc, #592]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d019      	beq.n	8003350 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800331c:	4b91      	ldr	r3, [pc, #580]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
        || \
 8003324:	2b08      	cmp	r3, #8
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003328:	4b8e      	ldr	r3, [pc, #568]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003334:	d00c      	beq.n	8003350 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b8b      	ldr	r3, [pc, #556]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d112      	bne.n	8003368 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b88      	ldr	r3, [pc, #544]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b84      	ldr	r3, [pc, #528]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05b      	beq.n	8003414 <HAL_RCC_OscConfig+0x124>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d157      	bne.n	8003414 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e25a      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x90>
 8003372:	4b7c      	ldr	r3, [pc, #496]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7b      	ldr	r2, [pc, #492]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xcc>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0xb4>
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b73      	ldr	r3, [pc, #460]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a72      	ldr	r2, [pc, #456]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xcc>
 80033a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd ffa6 	bl	8001314 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd ffa2 	bl	8001314 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e21f      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b61      	ldr	r3, [pc, #388]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xdc>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff92 	bl	8001314 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd ff8e 	bl	8001314 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	@ 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e20b      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b57      	ldr	r3, [pc, #348]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x104>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06f      	beq.n	8003502 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003422:	4b50      	ldr	r3, [pc, #320]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b00      	cmp	r3, #0
 800342c:	d017      	beq.n	800345e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800342e:	4b4d      	ldr	r3, [pc, #308]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
        || \
 8003436:	2b08      	cmp	r3, #8
 8003438:	d105      	bne.n	8003446 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800343a:	4b4a      	ldr	r3, [pc, #296]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b44      	ldr	r3, [pc, #272]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b41      	ldr	r3, [pc, #260]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x186>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1d3      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4937      	ldr	r1, [pc, #220]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_OscConfig+0x278>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd ff3b 	bl	8001314 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fd ff37 	bl	8001314 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1b4      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4925      	ldr	r1, [pc, #148]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCC_OscConfig+0x278>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd ff1a 	bl	8001314 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fd ff16 	bl	8001314 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e193      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d036      	beq.n	800357c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x27c>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fefa 	bl	8001314 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fef6 	bl	8001314 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e173      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x234>
 8003542:	e01b      	b.n	800357c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x27c>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fd fee3 	bl	8001314 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e00e      	b.n	8003570 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003552:	f7fd fedf 	bl	8001314 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e15c      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b8a      	ldr	r3, [pc, #552]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ea      	bne.n	8003552 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8097 	beq.w	80036b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b83      	ldr	r3, [pc, #524]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b7f      	ldr	r3, [pc, #508]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a7e      	ldr	r2, [pc, #504]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b7c      	ldr	r3, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b79      	ldr	r3, [pc, #484]	@ (80037a0 <HAL_RCC_OscConfig+0x4b0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b76      	ldr	r3, [pc, #472]	@ (80037a0 <HAL_RCC_OscConfig+0x4b0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a75      	ldr	r2, [pc, #468]	@ (80037a0 <HAL_RCC_OscConfig+0x4b0>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fd fe9f 	bl	8001314 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fd fe9b 	bl	8001314 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e118      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b6c      	ldr	r3, [pc, #432]	@ (80037a0 <HAL_RCC_OscConfig+0x4b0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x31e>
 8003600:	4b66      	ldr	r3, [pc, #408]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a65      	ldr	r2, [pc, #404]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
 800360c:	e01c      	b.n	8003648 <HAL_RCC_OscConfig+0x358>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x340>
 8003616:	4b61      	ldr	r3, [pc, #388]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a60      	ldr	r2, [pc, #384]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
 8003622:	4b5e      	ldr	r3, [pc, #376]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a5d      	ldr	r2, [pc, #372]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0x358>
 8003630:	4b5a      	ldr	r3, [pc, #360]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4a59      	ldr	r2, [pc, #356]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	@ 0x70
 800363c:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4a56      	ldr	r2, [pc, #344]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fd fe60 	bl	8001314 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd fe5c 	bl	8001314 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0d7      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b4b      	ldr	r3, [pc, #300]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCC_OscConfig+0x368>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fe4a 	bl	8001314 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fe46 	bl	8001314 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0c1      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ee      	bne.n	8003684 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	4a3a      	ldr	r2, [pc, #232]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80ad 	beq.w	800381c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d060      	beq.n	8003790 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d145      	bne.n	8003762 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <HAL_RCC_OscConfig+0x4b4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fd fe1a 	bl	8001314 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd fe16 	bl	8001314 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e093      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b29      	ldr	r3, [pc, #164]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	491b      	ldr	r1, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x4b4>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fdeb 	bl	8001314 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd fde7 	bl	8001314 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e064      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x452>
 8003760:	e05c      	b.n	800381c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HAL_RCC_OscConfig+0x4b4>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd fdd4 	bl	8001314 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd fdd0 	bl	8001314 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e04d      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x4ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x480>
 800378e:	e045      	b.n	800381c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e040      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <HAL_RCC_OscConfig+0x538>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d030      	beq.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d129      	bne.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d122      	bne.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d119      	bne.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d10f      	bne.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800

0800382c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e04c      	b.n	80038d8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fc38 	bl	80040c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a1f      	ldr	r2, [pc, #124]	@ (80038e0 <HAL_TIM_Base_Init+0xb4>)
 8003864:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f000 fadb 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08000dc9 	.word	0x08000dc9

080038e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04e      	b.n	800399a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a23      	ldr	r2, [pc, #140]	@ (80039a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d022      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003926:	d01d      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1f      	ldr	r2, [pc, #124]	@ (80039ac <HAL_TIM_Base_Start_IT+0xc8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1e      	ldr	r2, [pc, #120]	@ (80039b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d010      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e007      	b.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40001800 	.word	0x40001800

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d026      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d021      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0202 	mvn.w	r2, #2
 80039f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e009      	b.n	8003a2e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d026      	beq.n	8003a8c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d021      	beq.n	8003a8c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0204 	mvn.w	r2, #4
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	e009      	b.n	8003a86 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d026      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d021      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0208 	mvn.w	r2, #8
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2204      	movs	r2, #4
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e009      	b.n	8003ade <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d026      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d021      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2208      	movs	r2, #8
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e009      	b.n	8003b36 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0201 	mvn.w	r2, #1
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0220 	mvn.w	r2, #32
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_ConfigClockSource+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0b4      	b.n	8003d6a <HAL_TIM_ConfigClockSource+0x186>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_TIM_ConfigClockSource+0x172>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b70      	cmp	r3, #112	@ 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xa6>
 8003c54:	2b70      	cmp	r3, #112	@ 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b60      	cmp	r3, #96	@ 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x11a>
 8003c5c:	2b60      	cmp	r3, #96	@ 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b50      	cmp	r3, #80	@ 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xfa>
 8003c64:	2b50      	cmp	r3, #80	@ 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x13a>
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b30      	cmp	r3, #48	@ 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b30      	cmp	r3, #48	@ 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	f000 f9f5 	bl	8004088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	f000 f9de 	bl	8004088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f952 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	@ 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9ab 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f971 	bl	8003ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	@ 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f99b 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 f932 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	@ 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f98b 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 f982 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a46      	ldr	r2, [pc, #280]	@ (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a43      	ldr	r2, [pc, #268]	@ (8003f6c <TIM_Base_SetConfig+0x130>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a42      	ldr	r2, [pc, #264]	@ (8003f70 <TIM_Base_SetConfig+0x134>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a41      	ldr	r2, [pc, #260]	@ (8003f74 <TIM_Base_SetConfig+0x138>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	@ (8003f78 <TIM_Base_SetConfig+0x13c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a35      	ldr	r2, [pc, #212]	@ (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d027      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a32      	ldr	r2, [pc, #200]	@ (8003f6c <TIM_Base_SetConfig+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d023      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a31      	ldr	r2, [pc, #196]	@ (8003f70 <TIM_Base_SetConfig+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	@ (8003f74 <TIM_Base_SetConfig+0x138>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f78 <TIM_Base_SetConfig+0x13c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d017      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <TIM_Base_SetConfig+0x140>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f80 <TIM_Base_SetConfig+0x144>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f84 <TIM_Base_SetConfig+0x148>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f88 <TIM_Base_SetConfig+0x14c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f8c <TIM_Base_SetConfig+0x150>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	@ (8003f90 <TIM_Base_SetConfig+0x154>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	@ (8003f78 <TIM_Base_SetConfig+0x13c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800
 8003f88:	40001800 	.word	0x40001800
 8003f8c:	40001c00 	.word	0x40001c00
 8003f90:	40002000 	.word	0x40002000

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f023 0210 	bic.w	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800401c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800402e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <TIM_ResetCallback+0x7c>)
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <TIM_ResetCallback+0x80>)
 80040dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <TIM_ResetCallback+0x84>)
 80040e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a19      	ldr	r2, [pc, #100]	@ (8004150 <TIM_ResetCallback+0x88>)
 80040ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <TIM_ResetCallback+0x8c>)
 80040f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a17      	ldr	r2, [pc, #92]	@ (8004158 <TIM_ResetCallback+0x90>)
 80040fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a16      	ldr	r2, [pc, #88]	@ (800415c <TIM_ResetCallback+0x94>)
 8004104:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <TIM_ResetCallback+0x98>)
 800410c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <TIM_ResetCallback+0x9c>)
 8004114:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a13      	ldr	r2, [pc, #76]	@ (8004168 <TIM_ResetCallback+0xa0>)
 800411c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <TIM_ResetCallback+0xa4>)
 8004124:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <TIM_ResetCallback+0xa8>)
 800412c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a10      	ldr	r2, [pc, #64]	@ (8004174 <TIM_ResetCallback+0xac>)
 8004134:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	08003d73 	.word	0x08003d73
 8004148:	08003d87 	.word	0x08003d87
 800414c:	08003dff 	.word	0x08003dff
 8004150:	08003e13 	.word	0x08003e13
 8004154:	08003daf 	.word	0x08003daf
 8004158:	08003dc3 	.word	0x08003dc3
 800415c:	08003d9b 	.word	0x08003d9b
 8004160:	08003dd7 	.word	0x08003dd7
 8004164:	08003deb 	.word	0x08003deb
 8004168:	08003e27 	.word	0x08003e27
 800416c:	08004271 	.word	0x08004271
 8004170:	08004285 	.word	0x08004285
 8004174:	08004299 	.word	0x08004299

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e05a      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d01d      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e04d      	b.n	800435a <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d111      	bne.n	80042ee <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fc60 	bl	8004b98 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a20      	ldr	r2, [pc, #128]	@ (8004364 <HAL_UART_Init+0xb8>)
 80042e4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2224      	movs	r2, #36	@ 0x24
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004304:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fe78 	bl	8004ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800431a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800432a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800433a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	08000e15 	.word	0x08000e15

08004368 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	460b      	mov	r3, r1
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e07c      	b.n	800448a <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	d150      	bne.n	800443e <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d844      	bhi.n	800442c <HAL_UART_RegisterCallback+0xc4>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_UART_RegisterCallback+0x40>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043e5 	.word	0x080043e5
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043fd 	.word	0x080043fd
 80043bc:	08004405 	.word	0x08004405
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	08004415 	.word	0x08004415
 80043c8:	0800442d 	.word	0x0800442d
 80043cc:	0800442d 	.word	0x0800442d
 80043d0:	0800442d 	.word	0x0800442d
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	08004425 	.word	0x08004425
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80043e2:	e051      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80043ea:	e04d      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80043f2:	e049      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80043fa:	e045      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004402:	e041      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800440a:	e03d      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004412:	e039      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800441a:	e035      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004422:	e031      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800442a:	e02d      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
        break;
 800443c:	e024      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d116      	bne.n	8004478 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	2b0b      	cmp	r3, #11
 800444e:	d002      	beq.n	8004456 <HAL_UART_RegisterCallback+0xee>
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d004      	beq.n	800445e <HAL_UART_RegisterCallback+0xf6>
 8004454:	e007      	b.n	8004466 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800445c:	e014      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004464:	e010      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
        break;
 8004476:	e007      	b.n	8004488 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
}
 800448a:	4618      	mov	r0, r3
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d175      	bne.n	80045a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Transmit+0x2c>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e06e      	b.n	80045a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2221      	movs	r2, #33	@ 0x21
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d6:	f7fc ff1d 	bl	8001314 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x6c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800450c:	e02e      	b.n	800456c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2180      	movs	r1, #128	@ 0x80
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fb75 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e03a      	b.n	80045a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3302      	adds	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e007      	b.n	800455e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	3301      	adds	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1cb      	bne.n	800450e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2140      	movs	r1, #64	@ 0x40
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fb41 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0ba      	sub	sp, #232	@ 0xe8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fc34 	bl	8004e7c <UART_Receive_IT>
      return;
 8004614:	e260      	b.n	8004ad8 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80e1 	beq.w	80047e2 <HAL_UART_IRQHandler+0x232>
 8004620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004630:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80d4 	beq.w	80047e2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
 8004646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f043 0208 	orr.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 81f7 	beq.w	8004ace <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fbbf 	bl	8004e7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b40      	cmp	r3, #64	@ 0x40
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_UART_IRQHandler+0x17a>
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d051      	beq.n	80047ce <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fac5 	bl	8004cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473a:	2b40      	cmp	r3, #64	@ 0x40
 800473c:	d142      	bne.n	80047c4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800476a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800476e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d9      	bne.n	800473e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	4a80      	ldr	r2, [pc, #512]	@ (8004998 <HAL_UART_IRQHandler+0x3e8>)
 8004798:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd f841 	bl	8001826 <HAL_DMA_Abort_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d019      	beq.n	80047de <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047b4:	4610      	mov	r0, r2
 80047b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e011      	b.n	80047de <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c2:	e00c      	b.n	80047de <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e007      	b.n	80047de <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047dc:	e177      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	bf00      	nop
    return;
 80047e0:	e175      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	f040 8151 	bne.w	8004a8e <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 814a 	beq.w	8004a8e <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8143 	beq.w	8004a8e <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	f040 80b7 	bne.w	800499c <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800483a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8147 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004848:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800484c:	429a      	cmp	r2, r3
 800484e:	f080 8140 	bcs.w	8004ad2 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004858:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004864:	f000 8088 	beq.w	8004978 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800487e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004894:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1d9      	bne.n	8004868 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e1      	bne.n	80048b4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004914:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004916:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800491a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e3      	bne.n	80048f0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004948:	f023 0310 	bic.w	r3, r3, #16
 800494c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800495a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800495c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e3      	bne.n	8004936 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fee7 	bl	8001746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 800498a:	b292      	uxth	r2, r2
 800498c:	1a8a      	subs	r2, r1, r2
 800498e:	b292      	uxth	r2, r2
 8004990:	4611      	mov	r1, r2
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004996:	e09c      	b.n	8004ad2 <HAL_UART_IRQHandler+0x522>
 8004998:	08004d81 	.word	0x08004d81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 808f 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 80049b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 808a 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80049e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e3      	bne.n	80049c2 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a64:	61fa      	str	r2, [r7, #28]
 8004a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	69b9      	ldr	r1, [r7, #24]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	617b      	str	r3, [r7, #20]
   return(result);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a82:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004a86:	4611      	mov	r1, r2
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a8c:	e023      	b.n	8004ad6 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x4fe>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f97f 	bl	8004daa <UART_Transmit_IT>
    return;
 8004aac:	e014      	b.n	8004ad8 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x528>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9bf 	bl	8004e4a <UART_EndTransmit_IT>
    return;
 8004acc:	e004      	b.n	8004ad8 <HAL_UART_IRQHandler+0x528>
    return;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_UART_IRQHandler+0x528>
      return;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_UART_IRQHandler+0x528>
      return;
 8004ad6:	bf00      	nop
  }
}
 8004ad8:	37e8      	adds	r7, #232	@ 0xe8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop

08004ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	@ (8004be4 <UART_InitCallbacksToDefault+0x4c>)
 8004ba4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8004be8 <UART_InitCallbacksToDefault+0x50>)
 8004baa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0f      	ldr	r2, [pc, #60]	@ (8004bec <UART_InitCallbacksToDefault+0x54>)
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf0 <UART_InitCallbacksToDefault+0x58>)
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf4 <UART_InitCallbacksToDefault+0x5c>)
 8004bbc:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf8 <UART_InitCallbacksToDefault+0x60>)
 8004bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bfc <UART_InitCallbacksToDefault+0x64>)
 8004bc8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c00 <UART_InitCallbacksToDefault+0x68>)
 8004bce:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <UART_InitCallbacksToDefault+0x6c>)
 8004bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	08004af5 	.word	0x08004af5
 8004be8:	08004ae1 	.word	0x08004ae1
 8004bec:	08004b1d 	.word	0x08004b1d
 8004bf0:	08004b09 	.word	0x08004b09
 8004bf4:	08004b31 	.word	0x08004b31
 8004bf8:	08004b45 	.word	0x08004b45
 8004bfc:	08004b59 	.word	0x08004b59
 8004c00:	08004b6d 	.word	0x08004b6d
 8004c04:	08004b81 	.word	0x08004b81

08004c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c18:	e03b      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d037      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fc fb77 	bl	8001314 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e03a      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d023      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b80      	cmp	r3, #128	@ 0x80
 8004c4e:	d020      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d01d      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d116      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f81d 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2208      	movs	r2, #8
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00f      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d0b4      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b095      	sub	sp, #84	@ 0x54
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d119      	bne.n	8004d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d52:	61ba      	str	r2, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d74:	bf00      	nop
 8004d76:	3754      	adds	r7, #84	@ 0x54
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	@ 0x21
 8004dbc:	d13e      	bne.n	8004e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc6:	d114      	bne.n	8004df2 <UART_Transmit_IT+0x48>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]
 8004df0:	e008      	b.n	8004e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6211      	str	r1, [r2, #32]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	@ 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b22      	cmp	r3, #34	@ 0x22
 8004e8e:	f040 80b0 	bne.w	8004ff2 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9a:	d117      	bne.n	8004ecc <UART_Receive_IT+0x50>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d113      	bne.n	8004ecc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eca:	e026      	b.n	8004f1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d007      	beq.n	8004ef0 <UART_Receive_IT+0x74>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <UART_Receive_IT+0x82>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e008      	b.n	8004f10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4619      	mov	r1, r3
 8004f28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d15f      	bne.n	8004fee <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0220 	bic.w	r2, r2, #32
 8004f3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d136      	bne.n	8004fe2 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9a:	623a      	str	r2, [r7, #32]
 8004f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d10a      	bne.n	8004fd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8004fda:	4611      	mov	r1, r2
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
 8004fe0:	e003      	b.n	8004fea <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e002      	b.n	8004ff4 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3730      	adds	r7, #48	@ 0x30
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b0c0      	sub	sp, #256	@ 0x100
 8005002:	af00      	add	r7, sp, #0
 8005004:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	68d9      	ldr	r1, [r3, #12]
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	ea40 0301 	orr.w	r3, r0, r1
 8005024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	431a      	orrs	r2, r3
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005054:	f021 010c 	bic.w	r1, r1, #12
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005062:	430b      	orrs	r3, r1
 8005064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005076:	6999      	ldr	r1, [r3, #24]
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	ea40 0301 	orr.w	r3, r0, r1
 8005082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8f      	ldr	r3, [pc, #572]	@ (80052c8 <UART_SetConfig+0x2cc>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d005      	beq.n	800509c <UART_SetConfig+0xa0>
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b8d      	ldr	r3, [pc, #564]	@ (80052cc <UART_SetConfig+0x2d0>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d104      	bne.n	80050a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7fd fee4 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 80050a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050a4:	e003      	b.n	80050ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050a6:	f7fd fecb 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80050aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b8:	f040 810c 	bne.w	80052d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050ce:	4622      	mov	r2, r4
 80050d0:	462b      	mov	r3, r5
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050d6:	415b      	adcs	r3, r3
 80050d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050de:	4621      	mov	r1, r4
 80050e0:	eb12 0801 	adds.w	r8, r2, r1
 80050e4:	4629      	mov	r1, r5
 80050e6:	eb43 0901 	adc.w	r9, r3, r1
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fe:	4690      	mov	r8, r2
 8005100:	4699      	mov	r9, r3
 8005102:	4623      	mov	r3, r4
 8005104:	eb18 0303 	adds.w	r3, r8, r3
 8005108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800510c:	462b      	mov	r3, r5
 800510e:	eb49 0303 	adc.w	r3, r9, r3
 8005112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005122:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800512a:	460b      	mov	r3, r1
 800512c:	18db      	adds	r3, r3, r3
 800512e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005130:	4613      	mov	r3, r2
 8005132:	eb42 0303 	adc.w	r3, r2, r3
 8005136:	657b      	str	r3, [r7, #84]	@ 0x54
 8005138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800513c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005140:	f7fb f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4b61      	ldr	r3, [pc, #388]	@ (80052d0 <UART_SetConfig+0x2d4>)
 800514a:	fba3 2302 	umull	r2, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	011c      	lsls	r4, r3, #4
 8005152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005156:	2200      	movs	r2, #0
 8005158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800515c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005164:	4642      	mov	r2, r8
 8005166:	464b      	mov	r3, r9
 8005168:	1891      	adds	r1, r2, r2
 800516a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800516c:	415b      	adcs	r3, r3
 800516e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005174:	4641      	mov	r1, r8
 8005176:	eb12 0a01 	adds.w	sl, r2, r1
 800517a:	4649      	mov	r1, r9
 800517c:	eb43 0b01 	adc.w	fp, r3, r1
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800518c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005194:	4692      	mov	sl, r2
 8005196:	469b      	mov	fp, r3
 8005198:	4643      	mov	r3, r8
 800519a:	eb1a 0303 	adds.w	r3, sl, r3
 800519e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a2:	464b      	mov	r3, r9
 80051a4:	eb4b 0303 	adc.w	r3, fp, r3
 80051a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051c0:	460b      	mov	r3, r1
 80051c2:	18db      	adds	r3, r3, r3
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c6:	4613      	mov	r3, r2
 80051c8:	eb42 0303 	adc.w	r3, r2, r3
 80051cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051d6:	f7fb f86b 	bl	80002b0 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	4b3b      	ldr	r3, [pc, #236]	@ (80052d0 <UART_SetConfig+0x2d4>)
 80051e2:	fba3 2301 	umull	r2, r3, r3, r1
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2264      	movs	r2, #100	@ 0x64
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	1acb      	subs	r3, r1, r3
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051f6:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <UART_SetConfig+0x2d4>)
 80051f8:	fba3 2302 	umull	r2, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005204:	441c      	add	r4, r3
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005210:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	1891      	adds	r1, r2, r2
 800521e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005220:	415b      	adcs	r3, r3
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005228:	4641      	mov	r1, r8
 800522a:	1851      	adds	r1, r2, r1
 800522c:	6339      	str	r1, [r7, #48]	@ 0x30
 800522e:	4649      	mov	r1, r9
 8005230:	414b      	adcs	r3, r1
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005240:	4659      	mov	r1, fp
 8005242:	00cb      	lsls	r3, r1, #3
 8005244:	4651      	mov	r1, sl
 8005246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524a:	4651      	mov	r1, sl
 800524c:	00ca      	lsls	r2, r1, #3
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	4603      	mov	r3, r0
 8005254:	4642      	mov	r2, r8
 8005256:	189b      	adds	r3, r3, r2
 8005258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800525c:	464b      	mov	r3, r9
 800525e:	460a      	mov	r2, r1
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005274:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800527c:	460b      	mov	r3, r1
 800527e:	18db      	adds	r3, r3, r3
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005282:	4613      	mov	r3, r2
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800528e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005292:	f7fb f80d 	bl	80002b0 <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <UART_SetConfig+0x2d4>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	@ 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	3332      	adds	r3, #50	@ 0x32
 80052ae:	4a08      	ldr	r2, [pc, #32]	@ (80052d0 <UART_SetConfig+0x2d4>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 0207 	and.w	r2, r3, #7
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4422      	add	r2, r4
 80052c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c4:	e106      	b.n	80054d4 <UART_SetConfig+0x4d8>
 80052c6:	bf00      	nop
 80052c8:	40011000 	.word	0x40011000
 80052cc:	40011400 	.word	0x40011400
 80052d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052e6:	4642      	mov	r2, r8
 80052e8:	464b      	mov	r3, r9
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	6239      	str	r1, [r7, #32]
 80052ee:	415b      	adcs	r3, r3
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f6:	4641      	mov	r1, r8
 80052f8:	1854      	adds	r4, r2, r1
 80052fa:	4649      	mov	r1, r9
 80052fc:	eb43 0501 	adc.w	r5, r3, r1
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	00eb      	lsls	r3, r5, #3
 800530a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530e:	00e2      	lsls	r2, r4, #3
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	4643      	mov	r3, r8
 8005316:	18e3      	adds	r3, r4, r3
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800531c:	464b      	mov	r3, r9
 800531e:	eb45 0303 	adc.w	r3, r5, r3
 8005322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005332:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005342:	4629      	mov	r1, r5
 8005344:	008b      	lsls	r3, r1, #2
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534c:	4621      	mov	r1, r4
 800534e:	008a      	lsls	r2, r1, #2
 8005350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005354:	f7fa ffac 	bl	80002b0 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4b60      	ldr	r3, [pc, #384]	@ (80054e0 <UART_SetConfig+0x4e4>)
 800535e:	fba3 2302 	umull	r2, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	011c      	lsls	r4, r3, #4
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800536a:	2200      	movs	r2, #0
 800536c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005370:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	1891      	adds	r1, r2, r2
 800537e:	61b9      	str	r1, [r7, #24]
 8005380:	415b      	adcs	r3, r3
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005388:	4641      	mov	r1, r8
 800538a:	1851      	adds	r1, r2, r1
 800538c:	6139      	str	r1, [r7, #16]
 800538e:	4649      	mov	r1, r9
 8005390:	414b      	adcs	r3, r1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a0:	4659      	mov	r1, fp
 80053a2:	00cb      	lsls	r3, r1, #3
 80053a4:	4651      	mov	r1, sl
 80053a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053aa:	4651      	mov	r1, sl
 80053ac:	00ca      	lsls	r2, r1, #3
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	4642      	mov	r2, r8
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053bc:	464b      	mov	r3, r9
 80053be:	460a      	mov	r2, r1
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053e0:	4649      	mov	r1, r9
 80053e2:	008b      	lsls	r3, r1, #2
 80053e4:	4641      	mov	r1, r8
 80053e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ea:	4641      	mov	r1, r8
 80053ec:	008a      	lsls	r2, r1, #2
 80053ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053f2:	f7fa ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	4b38      	ldr	r3, [pc, #224]	@ (80054e0 <UART_SetConfig+0x4e4>)
 80053fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2264      	movs	r2, #100	@ 0x64
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	1acb      	subs	r3, r1, r3
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	3332      	adds	r3, #50	@ 0x32
 8005410:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <UART_SetConfig+0x4e4>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800541c:	441c      	add	r4, r3
 800541e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005422:	2200      	movs	r2, #0
 8005424:	673b      	str	r3, [r7, #112]	@ 0x70
 8005426:	677a      	str	r2, [r7, #116]	@ 0x74
 8005428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	1891      	adds	r1, r2, r2
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	415b      	adcs	r3, r3
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800543c:	4641      	mov	r1, r8
 800543e:	1851      	adds	r1, r2, r1
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	4649      	mov	r1, r9
 8005444:	414b      	adcs	r3, r1
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005454:	4659      	mov	r1, fp
 8005456:	00cb      	lsls	r3, r1, #3
 8005458:	4651      	mov	r1, sl
 800545a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545e:	4651      	mov	r1, sl
 8005460:	00ca      	lsls	r2, r1, #3
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	4603      	mov	r3, r0
 8005468:	4642      	mov	r2, r8
 800546a:	189b      	adds	r3, r3, r2
 800546c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800546e:	464b      	mov	r3, r9
 8005470:	460a      	mov	r2, r1
 8005472:	eb42 0303 	adc.w	r3, r2, r3
 8005476:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	663b      	str	r3, [r7, #96]	@ 0x60
 8005482:	667a      	str	r2, [r7, #100]	@ 0x64
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005490:	4649      	mov	r1, r9
 8005492:	008b      	lsls	r3, r1, #2
 8005494:	4641      	mov	r1, r8
 8005496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800549a:	4641      	mov	r1, r8
 800549c:	008a      	lsls	r2, r1, #2
 800549e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054a2:	f7fa ff05 	bl	80002b0 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <UART_SetConfig+0x4e4>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	@ 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	3332      	adds	r3, #50	@ 0x32
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <UART_SetConfig+0x4e4>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 020f 	and.w	r2, r3, #15
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4422      	add	r2, r4
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054da:	46bd      	mov	sp, r7
 80054dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e0:	51eb851f 	.word	0x51eb851f

080054e4 <std>:
 80054e4:	2300      	movs	r3, #0
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4604      	mov	r4, r0
 80054ea:	e9c0 3300 	strd	r3, r3, [r0]
 80054ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054f2:	6083      	str	r3, [r0, #8]
 80054f4:	8181      	strh	r1, [r0, #12]
 80054f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80054f8:	81c2      	strh	r2, [r0, #14]
 80054fa:	6183      	str	r3, [r0, #24]
 80054fc:	4619      	mov	r1, r3
 80054fe:	2208      	movs	r2, #8
 8005500:	305c      	adds	r0, #92	@ 0x5c
 8005502:	f000 f9f9 	bl	80058f8 <memset>
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <std+0x58>)
 8005508:	6263      	str	r3, [r4, #36]	@ 0x24
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <std+0x5c>)
 800550c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <std+0x60>)
 8005510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <std+0x64>)
 8005514:	6323      	str	r3, [r4, #48]	@ 0x30
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <std+0x68>)
 8005518:	6224      	str	r4, [r4, #32]
 800551a:	429c      	cmp	r4, r3
 800551c:	d006      	beq.n	800552c <std+0x48>
 800551e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005522:	4294      	cmp	r4, r2
 8005524:	d002      	beq.n	800552c <std+0x48>
 8005526:	33d0      	adds	r3, #208	@ 0xd0
 8005528:	429c      	cmp	r4, r3
 800552a:	d105      	bne.n	8005538 <std+0x54>
 800552c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005534:	f000 ba58 	b.w	80059e8 <__retarget_lock_init_recursive>
 8005538:	bd10      	pop	{r4, pc}
 800553a:	bf00      	nop
 800553c:	08005749 	.word	0x08005749
 8005540:	0800576b 	.word	0x0800576b
 8005544:	080057a3 	.word	0x080057a3
 8005548:	080057c7 	.word	0x080057c7
 800554c:	20000324 	.word	0x20000324

08005550 <stdio_exit_handler>:
 8005550:	4a02      	ldr	r2, [pc, #8]	@ (800555c <stdio_exit_handler+0xc>)
 8005552:	4903      	ldr	r1, [pc, #12]	@ (8005560 <stdio_exit_handler+0x10>)
 8005554:	4803      	ldr	r0, [pc, #12]	@ (8005564 <stdio_exit_handler+0x14>)
 8005556:	f000 b869 	b.w	800562c <_fwalk_sglue>
 800555a:	bf00      	nop
 800555c:	2000000c 	.word	0x2000000c
 8005560:	08006289 	.word	0x08006289
 8005564:	2000001c 	.word	0x2000001c

08005568 <cleanup_stdio>:
 8005568:	6841      	ldr	r1, [r0, #4]
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <cleanup_stdio+0x34>)
 800556c:	4299      	cmp	r1, r3
 800556e:	b510      	push	{r4, lr}
 8005570:	4604      	mov	r4, r0
 8005572:	d001      	beq.n	8005578 <cleanup_stdio+0x10>
 8005574:	f000 fe88 	bl	8006288 <_fflush_r>
 8005578:	68a1      	ldr	r1, [r4, #8]
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <cleanup_stdio+0x38>)
 800557c:	4299      	cmp	r1, r3
 800557e:	d002      	beq.n	8005586 <cleanup_stdio+0x1e>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fe81 	bl	8006288 <_fflush_r>
 8005586:	68e1      	ldr	r1, [r4, #12]
 8005588:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <cleanup_stdio+0x3c>)
 800558a:	4299      	cmp	r1, r3
 800558c:	d004      	beq.n	8005598 <cleanup_stdio+0x30>
 800558e:	4620      	mov	r0, r4
 8005590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005594:	f000 be78 	b.w	8006288 <_fflush_r>
 8005598:	bd10      	pop	{r4, pc}
 800559a:	bf00      	nop
 800559c:	20000324 	.word	0x20000324
 80055a0:	2000038c 	.word	0x2000038c
 80055a4:	200003f4 	.word	0x200003f4

080055a8 <global_stdio_init.part.0>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <global_stdio_init.part.0+0x30>)
 80055ac:	4c0b      	ldr	r4, [pc, #44]	@ (80055dc <global_stdio_init.part.0+0x34>)
 80055ae:	4a0c      	ldr	r2, [pc, #48]	@ (80055e0 <global_stdio_init.part.0+0x38>)
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	4620      	mov	r0, r4
 80055b4:	2200      	movs	r2, #0
 80055b6:	2104      	movs	r1, #4
 80055b8:	f7ff ff94 	bl	80054e4 <std>
 80055bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055c0:	2201      	movs	r2, #1
 80055c2:	2109      	movs	r1, #9
 80055c4:	f7ff ff8e 	bl	80054e4 <std>
 80055c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055cc:	2202      	movs	r2, #2
 80055ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d2:	2112      	movs	r1, #18
 80055d4:	f7ff bf86 	b.w	80054e4 <std>
 80055d8:	2000045c 	.word	0x2000045c
 80055dc:	20000324 	.word	0x20000324
 80055e0:	08005551 	.word	0x08005551

080055e4 <__sfp_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	@ (80055ec <__sfp_lock_acquire+0x8>)
 80055e6:	f000 ba00 	b.w	80059ea <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	20000465 	.word	0x20000465

080055f0 <__sfp_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	@ (80055f8 <__sfp_lock_release+0x8>)
 80055f2:	f000 b9fb 	b.w	80059ec <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000465 	.word	0x20000465

080055fc <__sinit>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	f7ff fff0 	bl	80055e4 <__sfp_lock_acquire>
 8005604:	6a23      	ldr	r3, [r4, #32]
 8005606:	b11b      	cbz	r3, 8005610 <__sinit+0x14>
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	f7ff bff0 	b.w	80055f0 <__sfp_lock_release>
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <__sinit+0x28>)
 8005612:	6223      	str	r3, [r4, #32]
 8005614:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <__sinit+0x2c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f5      	bne.n	8005608 <__sinit+0xc>
 800561c:	f7ff ffc4 	bl	80055a8 <global_stdio_init.part.0>
 8005620:	e7f2      	b.n	8005608 <__sinit+0xc>
 8005622:	bf00      	nop
 8005624:	08005569 	.word	0x08005569
 8005628:	2000045c 	.word	0x2000045c

0800562c <_fwalk_sglue>:
 800562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005630:	4607      	mov	r7, r0
 8005632:	4688      	mov	r8, r1
 8005634:	4614      	mov	r4, r2
 8005636:	2600      	movs	r6, #0
 8005638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800563c:	f1b9 0901 	subs.w	r9, r9, #1
 8005640:	d505      	bpl.n	800564e <_fwalk_sglue+0x22>
 8005642:	6824      	ldr	r4, [r4, #0]
 8005644:	2c00      	cmp	r4, #0
 8005646:	d1f7      	bne.n	8005638 <_fwalk_sglue+0xc>
 8005648:	4630      	mov	r0, r6
 800564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d907      	bls.n	8005664 <_fwalk_sglue+0x38>
 8005654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005658:	3301      	adds	r3, #1
 800565a:	d003      	beq.n	8005664 <_fwalk_sglue+0x38>
 800565c:	4629      	mov	r1, r5
 800565e:	4638      	mov	r0, r7
 8005660:	47c0      	blx	r8
 8005662:	4306      	orrs	r6, r0
 8005664:	3568      	adds	r5, #104	@ 0x68
 8005666:	e7e9      	b.n	800563c <_fwalk_sglue+0x10>

08005668 <iprintf>:
 8005668:	b40f      	push	{r0, r1, r2, r3}
 800566a:	b507      	push	{r0, r1, r2, lr}
 800566c:	4906      	ldr	r1, [pc, #24]	@ (8005688 <iprintf+0x20>)
 800566e:	ab04      	add	r3, sp, #16
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	f853 2b04 	ldr.w	r2, [r3], #4
 8005676:	6881      	ldr	r1, [r0, #8]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	f000 fadb 	bl	8005c34 <_vfiprintf_r>
 800567e:	b003      	add	sp, #12
 8005680:	f85d eb04 	ldr.w	lr, [sp], #4
 8005684:	b004      	add	sp, #16
 8005686:	4770      	bx	lr
 8005688:	20000018 	.word	0x20000018

0800568c <_puts_r>:
 800568c:	6a03      	ldr	r3, [r0, #32]
 800568e:	b570      	push	{r4, r5, r6, lr}
 8005690:	6884      	ldr	r4, [r0, #8]
 8005692:	4605      	mov	r5, r0
 8005694:	460e      	mov	r6, r1
 8005696:	b90b      	cbnz	r3, 800569c <_puts_r+0x10>
 8005698:	f7ff ffb0 	bl	80055fc <__sinit>
 800569c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_puts_r+0x22>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	0598      	lsls	r0, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_puts_r+0x22>
 80056a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056aa:	f000 f99e 	bl	80059ea <__retarget_lock_acquire_recursive>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	0719      	lsls	r1, r3, #28
 80056b2:	d502      	bpl.n	80056ba <_puts_r+0x2e>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d135      	bne.n	8005726 <_puts_r+0x9a>
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 f8c5 	bl	800584c <__swsetup_r>
 80056c2:	b380      	cbz	r0, 8005726 <_puts_r+0x9a>
 80056c4:	f04f 35ff 	mov.w	r5, #4294967295
 80056c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ca:	07da      	lsls	r2, r3, #31
 80056cc:	d405      	bmi.n	80056da <_puts_r+0x4e>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	059b      	lsls	r3, r3, #22
 80056d2:	d402      	bmi.n	80056da <_puts_r+0x4e>
 80056d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056d6:	f000 f989 	bl	80059ec <__retarget_lock_release_recursive>
 80056da:	4628      	mov	r0, r5
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da04      	bge.n	80056ec <_puts_r+0x60>
 80056e2:	69a2      	ldr	r2, [r4, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	dc17      	bgt.n	8005718 <_puts_r+0x8c>
 80056e8:	290a      	cmp	r1, #10
 80056ea:	d015      	beq.n	8005718 <_puts_r+0x8c>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	6022      	str	r2, [r4, #0]
 80056f2:	7019      	strb	r1, [r3, #0]
 80056f4:	68a3      	ldr	r3, [r4, #8]
 80056f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056fa:	3b01      	subs	r3, #1
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	2900      	cmp	r1, #0
 8005700:	d1ed      	bne.n	80056de <_puts_r+0x52>
 8005702:	2b00      	cmp	r3, #0
 8005704:	da11      	bge.n	800572a <_puts_r+0x9e>
 8005706:	4622      	mov	r2, r4
 8005708:	210a      	movs	r1, #10
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f85f 	bl	80057ce <__swbuf_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d0d7      	beq.n	80056c4 <_puts_r+0x38>
 8005714:	250a      	movs	r5, #10
 8005716:	e7d7      	b.n	80056c8 <_puts_r+0x3c>
 8005718:	4622      	mov	r2, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f857 	bl	80057ce <__swbuf_r>
 8005720:	3001      	adds	r0, #1
 8005722:	d1e7      	bne.n	80056f4 <_puts_r+0x68>
 8005724:	e7ce      	b.n	80056c4 <_puts_r+0x38>
 8005726:	3e01      	subs	r6, #1
 8005728:	e7e4      	b.n	80056f4 <_puts_r+0x68>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	6022      	str	r2, [r4, #0]
 8005730:	220a      	movs	r2, #10
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e7ee      	b.n	8005714 <_puts_r+0x88>
	...

08005738 <puts>:
 8005738:	4b02      	ldr	r3, [pc, #8]	@ (8005744 <puts+0xc>)
 800573a:	4601      	mov	r1, r0
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	f7ff bfa5 	b.w	800568c <_puts_r>
 8005742:	bf00      	nop
 8005744:	20000018 	.word	0x20000018

08005748 <__sread>:
 8005748:	b510      	push	{r4, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	f000 f8fc 	bl	800594c <_read_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	bfab      	itete	ge
 8005758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800575a:	89a3      	ldrhlt	r3, [r4, #12]
 800575c:	181b      	addge	r3, r3, r0
 800575e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005762:	bfac      	ite	ge
 8005764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005766:	81a3      	strhlt	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__swrite>:
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	461f      	mov	r7, r3
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	05db      	lsls	r3, r3, #23
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	4616      	mov	r6, r2
 800577a:	d505      	bpl.n	8005788 <__swrite+0x1e>
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	2302      	movs	r3, #2
 8005782:	2200      	movs	r2, #0
 8005784:	f000 f8d0 	bl	8005928 <_lseek_r>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800578e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	4628      	mov	r0, r5
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	f000 b8e7 	b.w	8005970 <_write_r>

080057a2 <__sseek>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	460c      	mov	r4, r1
 80057a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057aa:	f000 f8bd 	bl	8005928 <_lseek_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	bf15      	itete	ne
 80057b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057be:	81a3      	strheq	r3, [r4, #12]
 80057c0:	bf18      	it	ne
 80057c2:	81a3      	strhne	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__sclose>:
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 b89d 	b.w	8005908 <_close_r>

080057ce <__swbuf_r>:
 80057ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d0:	460e      	mov	r6, r1
 80057d2:	4614      	mov	r4, r2
 80057d4:	4605      	mov	r5, r0
 80057d6:	b118      	cbz	r0, 80057e0 <__swbuf_r+0x12>
 80057d8:	6a03      	ldr	r3, [r0, #32]
 80057da:	b90b      	cbnz	r3, 80057e0 <__swbuf_r+0x12>
 80057dc:	f7ff ff0e 	bl	80055fc <__sinit>
 80057e0:	69a3      	ldr	r3, [r4, #24]
 80057e2:	60a3      	str	r3, [r4, #8]
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	071a      	lsls	r2, r3, #28
 80057e8:	d501      	bpl.n	80057ee <__swbuf_r+0x20>
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	b943      	cbnz	r3, 8005800 <__swbuf_r+0x32>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f82b 	bl	800584c <__swsetup_r>
 80057f6:	b118      	cbz	r0, 8005800 <__swbuf_r+0x32>
 80057f8:	f04f 37ff 	mov.w	r7, #4294967295
 80057fc:	4638      	mov	r0, r7
 80057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	6922      	ldr	r2, [r4, #16]
 8005804:	1a98      	subs	r0, r3, r2
 8005806:	6963      	ldr	r3, [r4, #20]
 8005808:	b2f6      	uxtb	r6, r6
 800580a:	4283      	cmp	r3, r0
 800580c:	4637      	mov	r7, r6
 800580e:	dc05      	bgt.n	800581c <__swbuf_r+0x4e>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 fd38 	bl	8006288 <_fflush_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	d1ed      	bne.n	80057f8 <__swbuf_r+0x2a>
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	3b01      	subs	r3, #1
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	6022      	str	r2, [r4, #0]
 8005828:	701e      	strb	r6, [r3, #0]
 800582a:	6962      	ldr	r2, [r4, #20]
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	429a      	cmp	r2, r3
 8005830:	d004      	beq.n	800583c <__swbuf_r+0x6e>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	07db      	lsls	r3, r3, #31
 8005836:	d5e1      	bpl.n	80057fc <__swbuf_r+0x2e>
 8005838:	2e0a      	cmp	r6, #10
 800583a:	d1df      	bne.n	80057fc <__swbuf_r+0x2e>
 800583c:	4621      	mov	r1, r4
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fd22 	bl	8006288 <_fflush_r>
 8005844:	2800      	cmp	r0, #0
 8005846:	d0d9      	beq.n	80057fc <__swbuf_r+0x2e>
 8005848:	e7d6      	b.n	80057f8 <__swbuf_r+0x2a>
	...

0800584c <__swsetup_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <__swsetup_r+0xa8>)
 8005850:	4605      	mov	r5, r0
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	460c      	mov	r4, r1
 8005856:	b118      	cbz	r0, 8005860 <__swsetup_r+0x14>
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	b90b      	cbnz	r3, 8005860 <__swsetup_r+0x14>
 800585c:	f7ff fece 	bl	80055fc <__sinit>
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	0719      	lsls	r1, r3, #28
 8005866:	d422      	bmi.n	80058ae <__swsetup_r+0x62>
 8005868:	06da      	lsls	r2, r3, #27
 800586a:	d407      	bmi.n	800587c <__swsetup_r+0x30>
 800586c:	2209      	movs	r2, #9
 800586e:	602a      	str	r2, [r5, #0]
 8005870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	e033      	b.n	80058e4 <__swsetup_r+0x98>
 800587c:	0758      	lsls	r0, r3, #29
 800587e:	d512      	bpl.n	80058a6 <__swsetup_r+0x5a>
 8005880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005882:	b141      	cbz	r1, 8005896 <__swsetup_r+0x4a>
 8005884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005888:	4299      	cmp	r1, r3
 800588a:	d002      	beq.n	8005892 <__swsetup_r+0x46>
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f8af 	bl	80059f0 <_free_r>
 8005892:	2300      	movs	r3, #0
 8005894:	6363      	str	r3, [r4, #52]	@ 0x34
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	2300      	movs	r3, #0
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	b94b      	cbnz	r3, 80058c6 <__swsetup_r+0x7a>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058bc:	d003      	beq.n	80058c6 <__swsetup_r+0x7a>
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fd2f 	bl	8006324 <__smakebuf_r>
 80058c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ca:	f013 0201 	ands.w	r2, r3, #1
 80058ce:	d00a      	beq.n	80058e6 <__swsetup_r+0x9a>
 80058d0:	2200      	movs	r2, #0
 80058d2:	60a2      	str	r2, [r4, #8]
 80058d4:	6962      	ldr	r2, [r4, #20]
 80058d6:	4252      	negs	r2, r2
 80058d8:	61a2      	str	r2, [r4, #24]
 80058da:	6922      	ldr	r2, [r4, #16]
 80058dc:	b942      	cbnz	r2, 80058f0 <__swsetup_r+0xa4>
 80058de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058e2:	d1c5      	bne.n	8005870 <__swsetup_r+0x24>
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	0799      	lsls	r1, r3, #30
 80058e8:	bf58      	it	pl
 80058ea:	6962      	ldrpl	r2, [r4, #20]
 80058ec:	60a2      	str	r2, [r4, #8]
 80058ee:	e7f4      	b.n	80058da <__swsetup_r+0x8e>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e7f7      	b.n	80058e4 <__swsetup_r+0x98>
 80058f4:	20000018 	.word	0x20000018

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	@ (8005924 <_close_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb fbf1 	bl	80010fa <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000460 	.word	0x20000460

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	@ (8005948 <_lseek_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb fc06 	bl	8001148 <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000460 	.word	0x20000460

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_read_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fb94 	bl	8001088 <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000460 	.word	0x20000460

08005970 <_write_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	@ (8005990 <_write_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fb9f 	bl	80010c2 <_write>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_write_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_write_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000460 	.word	0x20000460

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	@ (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000018 	.word	0x20000018

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	@ (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	@ (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	@ (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	@ (80059e4 <__libc_init_array+0x44>)
 80059b4:	f000 fd24 	bl	8006400 <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	080064d0 	.word	0x080064d0
 80059dc:	080064d0 	.word	0x080064d0
 80059e0:	080064d0 	.word	0x080064d0
 80059e4:	080064d4 	.word	0x080064d4

080059e8 <__retarget_lock_init_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_acquire_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_release_recursive>:
 80059ec:	4770      	bx	lr
	...

080059f0 <_free_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4605      	mov	r5, r0
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d041      	beq.n	8005a7c <_free_r+0x8c>
 80059f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fc:	1f0c      	subs	r4, r1, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	18e4      	addlt	r4, r4, r3
 8005a04:	f000 f8e0 	bl	8005bc8 <__malloc_lock>
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <_free_r+0x90>)
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	b933      	cbnz	r3, 8005a1c <_free_r+0x2c>
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	6014      	str	r4, [r2, #0]
 8005a12:	4628      	mov	r0, r5
 8005a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a18:	f000 b8dc 	b.w	8005bd4 <__malloc_unlock>
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d908      	bls.n	8005a32 <_free_r+0x42>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf01      	itttt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	1809      	addeq	r1, r1, r0
 8005a2e:	6021      	streq	r1, [r4, #0]
 8005a30:	e7ed      	b.n	8005a0e <_free_r+0x1e>
 8005a32:	461a      	mov	r2, r3
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	b10b      	cbz	r3, 8005a3c <_free_r+0x4c>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d9fa      	bls.n	8005a32 <_free_r+0x42>
 8005a3c:	6811      	ldr	r1, [r2, #0]
 8005a3e:	1850      	adds	r0, r2, r1
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d10b      	bne.n	8005a5c <_free_r+0x6c>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	4401      	add	r1, r0
 8005a48:	1850      	adds	r0, r2, r1
 8005a4a:	4283      	cmp	r3, r0
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	d1e0      	bne.n	8005a12 <_free_r+0x22>
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	6053      	str	r3, [r2, #4]
 8005a56:	4408      	add	r0, r1
 8005a58:	6010      	str	r0, [r2, #0]
 8005a5a:	e7da      	b.n	8005a12 <_free_r+0x22>
 8005a5c:	d902      	bls.n	8005a64 <_free_r+0x74>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	e7d6      	b.n	8005a12 <_free_r+0x22>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	1821      	adds	r1, r4, r0
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf04      	itt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	6063      	str	r3, [r4, #4]
 8005a72:	bf04      	itt	eq
 8005a74:	1809      	addeq	r1, r1, r0
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	6054      	str	r4, [r2, #4]
 8005a7a:	e7ca      	b.n	8005a12 <_free_r+0x22>
 8005a7c:	bd38      	pop	{r3, r4, r5, pc}
 8005a7e:	bf00      	nop
 8005a80:	2000046c 	.word	0x2000046c

08005a84 <sbrk_aligned>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac4 <sbrk_aligned+0x40>)
 8005a88:	460c      	mov	r4, r1
 8005a8a:	6831      	ldr	r1, [r6, #0]
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b911      	cbnz	r1, 8005a96 <sbrk_aligned+0x12>
 8005a90:	f000 fca6 	bl	80063e0 <_sbrk_r>
 8005a94:	6030      	str	r0, [r6, #0]
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 fca1 	bl	80063e0 <_sbrk_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d103      	bne.n	8005aaa <sbrk_aligned+0x26>
 8005aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}
 8005aaa:	1cc4      	adds	r4, r0, #3
 8005aac:	f024 0403 	bic.w	r4, r4, #3
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d0f8      	beq.n	8005aa6 <sbrk_aligned+0x22>
 8005ab4:	1a21      	subs	r1, r4, r0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 fc92 	bl	80063e0 <_sbrk_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d1f2      	bne.n	8005aa6 <sbrk_aligned+0x22>
 8005ac0:	e7ef      	b.n	8005aa2 <sbrk_aligned+0x1e>
 8005ac2:	bf00      	nop
 8005ac4:	20000468 	.word	0x20000468

08005ac8 <_malloc_r>:
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005acc:	1ccd      	adds	r5, r1, #3
 8005ace:	f025 0503 	bic.w	r5, r5, #3
 8005ad2:	3508      	adds	r5, #8
 8005ad4:	2d0c      	cmp	r5, #12
 8005ad6:	bf38      	it	cc
 8005ad8:	250c      	movcc	r5, #12
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	4606      	mov	r6, r0
 8005ade:	db01      	blt.n	8005ae4 <_malloc_r+0x1c>
 8005ae0:	42a9      	cmp	r1, r5
 8005ae2:	d904      	bls.n	8005aee <_malloc_r+0x26>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	6033      	str	r3, [r6, #0]
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc4 <_malloc_r+0xfc>
 8005af2:	f000 f869 	bl	8005bc8 <__malloc_lock>
 8005af6:	f8d8 3000 	ldr.w	r3, [r8]
 8005afa:	461c      	mov	r4, r3
 8005afc:	bb44      	cbnz	r4, 8005b50 <_malloc_r+0x88>
 8005afe:	4629      	mov	r1, r5
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff ffbf 	bl	8005a84 <sbrk_aligned>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	4604      	mov	r4, r0
 8005b0a:	d158      	bne.n	8005bbe <_malloc_r+0xf6>
 8005b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b10:	4627      	mov	r7, r4
 8005b12:	2f00      	cmp	r7, #0
 8005b14:	d143      	bne.n	8005b9e <_malloc_r+0xd6>
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d04b      	beq.n	8005bb2 <_malloc_r+0xea>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4630      	mov	r0, r6
 8005b20:	eb04 0903 	add.w	r9, r4, r3
 8005b24:	f000 fc5c 	bl	80063e0 <_sbrk_r>
 8005b28:	4581      	cmp	r9, r0
 8005b2a:	d142      	bne.n	8005bb2 <_malloc_r+0xea>
 8005b2c:	6821      	ldr	r1, [r4, #0]
 8005b2e:	1a6d      	subs	r5, r5, r1
 8005b30:	4629      	mov	r1, r5
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff ffa6 	bl	8005a84 <sbrk_aligned>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d03a      	beq.n	8005bb2 <_malloc_r+0xea>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	442b      	add	r3, r5
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	f8d8 3000 	ldr.w	r3, [r8]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	bb62      	cbnz	r2, 8005ba4 <_malloc_r+0xdc>
 8005b4a:	f8c8 7000 	str.w	r7, [r8]
 8005b4e:	e00f      	b.n	8005b70 <_malloc_r+0xa8>
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	1b52      	subs	r2, r2, r5
 8005b54:	d420      	bmi.n	8005b98 <_malloc_r+0xd0>
 8005b56:	2a0b      	cmp	r2, #11
 8005b58:	d917      	bls.n	8005b8a <_malloc_r+0xc2>
 8005b5a:	1961      	adds	r1, r4, r5
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	6025      	str	r5, [r4, #0]
 8005b60:	bf18      	it	ne
 8005b62:	6059      	strne	r1, [r3, #4]
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	bf08      	it	eq
 8005b68:	f8c8 1000 	streq.w	r1, [r8]
 8005b6c:	5162      	str	r2, [r4, r5]
 8005b6e:	604b      	str	r3, [r1, #4]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f82f 	bl	8005bd4 <__malloc_unlock>
 8005b76:	f104 000b 	add.w	r0, r4, #11
 8005b7a:	1d23      	adds	r3, r4, #4
 8005b7c:	f020 0007 	bic.w	r0, r0, #7
 8005b80:	1ac2      	subs	r2, r0, r3
 8005b82:	bf1c      	itt	ne
 8005b84:	1a1b      	subne	r3, r3, r0
 8005b86:	50a3      	strne	r3, [r4, r2]
 8005b88:	e7af      	b.n	8005aea <_malloc_r+0x22>
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	bf0c      	ite	eq
 8005b90:	f8c8 2000 	streq.w	r2, [r8]
 8005b94:	605a      	strne	r2, [r3, #4]
 8005b96:	e7eb      	b.n	8005b70 <_malloc_r+0xa8>
 8005b98:	4623      	mov	r3, r4
 8005b9a:	6864      	ldr	r4, [r4, #4]
 8005b9c:	e7ae      	b.n	8005afc <_malloc_r+0x34>
 8005b9e:	463c      	mov	r4, r7
 8005ba0:	687f      	ldr	r7, [r7, #4]
 8005ba2:	e7b6      	b.n	8005b12 <_malloc_r+0x4a>
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d1fb      	bne.n	8005ba4 <_malloc_r+0xdc>
 8005bac:	2300      	movs	r3, #0
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e7de      	b.n	8005b70 <_malloc_r+0xa8>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f80c 	bl	8005bd4 <__malloc_unlock>
 8005bbc:	e794      	b.n	8005ae8 <_malloc_r+0x20>
 8005bbe:	6005      	str	r5, [r0, #0]
 8005bc0:	e7d6      	b.n	8005b70 <_malloc_r+0xa8>
 8005bc2:	bf00      	nop
 8005bc4:	2000046c 	.word	0x2000046c

08005bc8 <__malloc_lock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	@ (8005bd0 <__malloc_lock+0x8>)
 8005bca:	f7ff bf0e 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20000464 	.word	0x20000464

08005bd4 <__malloc_unlock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	@ (8005bdc <__malloc_unlock+0x8>)
 8005bd6:	f7ff bf09 	b.w	80059ec <__retarget_lock_release_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000464 	.word	0x20000464

08005be0 <__sfputc_r>:
 8005be0:	6893      	ldr	r3, [r2, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	b410      	push	{r4}
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	da08      	bge.n	8005bfe <__sfputc_r+0x1e>
 8005bec:	6994      	ldr	r4, [r2, #24]
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	db01      	blt.n	8005bf6 <__sfputc_r+0x16>
 8005bf2:	290a      	cmp	r1, #10
 8005bf4:	d103      	bne.n	8005bfe <__sfputc_r+0x1e>
 8005bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfa:	f7ff bde8 	b.w	80057ce <__swbuf_r>
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	1c58      	adds	r0, r3, #1
 8005c02:	6010      	str	r0, [r2, #0]
 8005c04:	7019      	strb	r1, [r3, #0]
 8005c06:	4608      	mov	r0, r1
 8005c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <__sfputs_r>:
 8005c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c10:	4606      	mov	r6, r0
 8005c12:	460f      	mov	r7, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	18d5      	adds	r5, r2, r3
 8005c18:	42ac      	cmp	r4, r5
 8005c1a:	d101      	bne.n	8005c20 <__sfputs_r+0x12>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e007      	b.n	8005c30 <__sfputs_r+0x22>
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	463a      	mov	r2, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff ffda 	bl	8005be0 <__sfputc_r>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d1f3      	bne.n	8005c18 <__sfputs_r+0xa>
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c34 <_vfiprintf_r>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	460d      	mov	r5, r1
 8005c3a:	b09d      	sub	sp, #116	@ 0x74
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	4698      	mov	r8, r3
 8005c40:	4606      	mov	r6, r0
 8005c42:	b118      	cbz	r0, 8005c4c <_vfiprintf_r+0x18>
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	b90b      	cbnz	r3, 8005c4c <_vfiprintf_r+0x18>
 8005c48:	f7ff fcd8 	bl	80055fc <__sinit>
 8005c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d405      	bmi.n	8005c5e <_vfiprintf_r+0x2a>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_vfiprintf_r+0x2a>
 8005c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c5a:	f7ff fec6 	bl	80059ea <__retarget_lock_acquire_recursive>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	071b      	lsls	r3, r3, #28
 8005c62:	d501      	bpl.n	8005c68 <_vfiprintf_r+0x34>
 8005c64:	692b      	ldr	r3, [r5, #16]
 8005c66:	b99b      	cbnz	r3, 8005c90 <_vfiprintf_r+0x5c>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff fdee 	bl	800584c <__swsetup_r>
 8005c70:	b170      	cbz	r0, 8005c90 <_vfiprintf_r+0x5c>
 8005c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c74:	07dc      	lsls	r4, r3, #31
 8005c76:	d504      	bpl.n	8005c82 <_vfiprintf_r+0x4e>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b01d      	add	sp, #116	@ 0x74
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	0598      	lsls	r0, r3, #22
 8005c86:	d4f7      	bmi.n	8005c78 <_vfiprintf_r+0x44>
 8005c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c8a:	f7ff feaf 	bl	80059ec <__retarget_lock_release_recursive>
 8005c8e:	e7f3      	b.n	8005c78 <_vfiprintf_r+0x44>
 8005c90:	2300      	movs	r3, #0
 8005c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c94:	2320      	movs	r3, #32
 8005c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c9e:	2330      	movs	r3, #48	@ 0x30
 8005ca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e50 <_vfiprintf_r+0x21c>
 8005ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ca8:	f04f 0901 	mov.w	r9, #1
 8005cac:	4623      	mov	r3, r4
 8005cae:	469a      	mov	sl, r3
 8005cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb4:	b10a      	cbz	r2, 8005cba <_vfiprintf_r+0x86>
 8005cb6:	2a25      	cmp	r2, #37	@ 0x25
 8005cb8:	d1f9      	bne.n	8005cae <_vfiprintf_r+0x7a>
 8005cba:	ebba 0b04 	subs.w	fp, sl, r4
 8005cbe:	d00b      	beq.n	8005cd8 <_vfiprintf_r+0xa4>
 8005cc0:	465b      	mov	r3, fp
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ffa1 	bl	8005c0e <__sfputs_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f000 80a7 	beq.w	8005e20 <_vfiprintf_r+0x1ec>
 8005cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cd4:	445a      	add	r2, fp
 8005cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 809f 	beq.w	8005e20 <_vfiprintf_r+0x1ec>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cec:	f10a 0a01 	add.w	sl, sl, #1
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cfa:	4654      	mov	r4, sl
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d02:	4853      	ldr	r0, [pc, #332]	@ (8005e50 <_vfiprintf_r+0x21c>)
 8005d04:	f7fa fa84 	bl	8000210 <memchr>
 8005d08:	9a04      	ldr	r2, [sp, #16]
 8005d0a:	b9d8      	cbnz	r0, 8005d44 <_vfiprintf_r+0x110>
 8005d0c:	06d1      	lsls	r1, r2, #27
 8005d0e:	bf44      	itt	mi
 8005d10:	2320      	movmi	r3, #32
 8005d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d16:	0713      	lsls	r3, r2, #28
 8005d18:	bf44      	itt	mi
 8005d1a:	232b      	movmi	r3, #43	@ 0x2b
 8005d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d20:	f89a 3000 	ldrb.w	r3, [sl]
 8005d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d26:	d015      	beq.n	8005d54 <_vfiprintf_r+0x120>
 8005d28:	9a07      	ldr	r2, [sp, #28]
 8005d2a:	4654      	mov	r4, sl
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f04f 0c0a 	mov.w	ip, #10
 8005d32:	4621      	mov	r1, r4
 8005d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d38:	3b30      	subs	r3, #48	@ 0x30
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d94b      	bls.n	8005dd6 <_vfiprintf_r+0x1a2>
 8005d3e:	b1b0      	cbz	r0, 8005d6e <_vfiprintf_r+0x13a>
 8005d40:	9207      	str	r2, [sp, #28]
 8005d42:	e014      	b.n	8005d6e <_vfiprintf_r+0x13a>
 8005d44:	eba0 0308 	sub.w	r3, r0, r8
 8005d48:	fa09 f303 	lsl.w	r3, r9, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	46a2      	mov	sl, r4
 8005d52:	e7d2      	b.n	8005cfa <_vfiprintf_r+0xc6>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	1d19      	adds	r1, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	9103      	str	r1, [sp, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfbb      	ittet	lt
 8005d60:	425b      	neglt	r3, r3
 8005d62:	f042 0202 	orrlt.w	r2, r2, #2
 8005d66:	9307      	strge	r3, [sp, #28]
 8005d68:	9307      	strlt	r3, [sp, #28]
 8005d6a:	bfb8      	it	lt
 8005d6c:	9204      	strlt	r2, [sp, #16]
 8005d6e:	7823      	ldrb	r3, [r4, #0]
 8005d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d72:	d10a      	bne.n	8005d8a <_vfiprintf_r+0x156>
 8005d74:	7863      	ldrb	r3, [r4, #1]
 8005d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d78:	d132      	bne.n	8005de0 <_vfiprintf_r+0x1ac>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	1d1a      	adds	r2, r3, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	9203      	str	r2, [sp, #12]
 8005d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d86:	3402      	adds	r4, #2
 8005d88:	9305      	str	r3, [sp, #20]
 8005d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e60 <_vfiprintf_r+0x22c>
 8005d8e:	7821      	ldrb	r1, [r4, #0]
 8005d90:	2203      	movs	r2, #3
 8005d92:	4650      	mov	r0, sl
 8005d94:	f7fa fa3c 	bl	8000210 <memchr>
 8005d98:	b138      	cbz	r0, 8005daa <_vfiprintf_r+0x176>
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	eba0 000a 	sub.w	r0, r0, sl
 8005da0:	2240      	movs	r2, #64	@ 0x40
 8005da2:	4082      	lsls	r2, r0
 8005da4:	4313      	orrs	r3, r2
 8005da6:	3401      	adds	r4, #1
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dae:	4829      	ldr	r0, [pc, #164]	@ (8005e54 <_vfiprintf_r+0x220>)
 8005db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005db4:	2206      	movs	r2, #6
 8005db6:	f7fa fa2b 	bl	8000210 <memchr>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d03f      	beq.n	8005e3e <_vfiprintf_r+0x20a>
 8005dbe:	4b26      	ldr	r3, [pc, #152]	@ (8005e58 <_vfiprintf_r+0x224>)
 8005dc0:	bb1b      	cbnz	r3, 8005e0a <_vfiprintf_r+0x1d6>
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	3307      	adds	r3, #7
 8005dc6:	f023 0307 	bic.w	r3, r3, #7
 8005dca:	3308      	adds	r3, #8
 8005dcc:	9303      	str	r3, [sp, #12]
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	443b      	add	r3, r7
 8005dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd4:	e76a      	b.n	8005cac <_vfiprintf_r+0x78>
 8005dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dda:	460c      	mov	r4, r1
 8005ddc:	2001      	movs	r0, #1
 8005dde:	e7a8      	b.n	8005d32 <_vfiprintf_r+0xfe>
 8005de0:	2300      	movs	r3, #0
 8005de2:	3401      	adds	r4, #1
 8005de4:	9305      	str	r3, [sp, #20]
 8005de6:	4619      	mov	r1, r3
 8005de8:	f04f 0c0a 	mov.w	ip, #10
 8005dec:	4620      	mov	r0, r4
 8005dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df2:	3a30      	subs	r2, #48	@ 0x30
 8005df4:	2a09      	cmp	r2, #9
 8005df6:	d903      	bls.n	8005e00 <_vfiprintf_r+0x1cc>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0c6      	beq.n	8005d8a <_vfiprintf_r+0x156>
 8005dfc:	9105      	str	r1, [sp, #20]
 8005dfe:	e7c4      	b.n	8005d8a <_vfiprintf_r+0x156>
 8005e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e04:	4604      	mov	r4, r0
 8005e06:	2301      	movs	r3, #1
 8005e08:	e7f0      	b.n	8005dec <_vfiprintf_r+0x1b8>
 8005e0a:	ab03      	add	r3, sp, #12
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	462a      	mov	r2, r5
 8005e10:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <_vfiprintf_r+0x228>)
 8005e12:	a904      	add	r1, sp, #16
 8005e14:	4630      	mov	r0, r6
 8005e16:	f3af 8000 	nop.w
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	1c78      	adds	r0, r7, #1
 8005e1e:	d1d6      	bne.n	8005dce <_vfiprintf_r+0x19a>
 8005e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e22:	07d9      	lsls	r1, r3, #31
 8005e24:	d405      	bmi.n	8005e32 <_vfiprintf_r+0x1fe>
 8005e26:	89ab      	ldrh	r3, [r5, #12]
 8005e28:	059a      	lsls	r2, r3, #22
 8005e2a:	d402      	bmi.n	8005e32 <_vfiprintf_r+0x1fe>
 8005e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e2e:	f7ff fddd 	bl	80059ec <__retarget_lock_release_recursive>
 8005e32:	89ab      	ldrh	r3, [r5, #12]
 8005e34:	065b      	lsls	r3, r3, #25
 8005e36:	f53f af1f 	bmi.w	8005c78 <_vfiprintf_r+0x44>
 8005e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e3c:	e71e      	b.n	8005c7c <_vfiprintf_r+0x48>
 8005e3e:	ab03      	add	r3, sp, #12
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	462a      	mov	r2, r5
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <_vfiprintf_r+0x228>)
 8005e46:	a904      	add	r1, sp, #16
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f000 f879 	bl	8005f40 <_printf_i>
 8005e4e:	e7e4      	b.n	8005e1a <_vfiprintf_r+0x1e6>
 8005e50:	08006494 	.word	0x08006494
 8005e54:	0800649e 	.word	0x0800649e
 8005e58:	00000000 	.word	0x00000000
 8005e5c:	08005c0f 	.word	0x08005c0f
 8005e60:	0800649a 	.word	0x0800649a

08005e64 <_printf_common>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	4616      	mov	r6, r2
 8005e6a:	4698      	mov	r8, r3
 8005e6c:	688a      	ldr	r2, [r1, #8]
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	bfb8      	it	lt
 8005e78:	4613      	movlt	r3, r2
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e80:	4607      	mov	r7, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b10a      	cbz	r2, 8005e8a <_printf_common+0x26>
 8005e86:	3301      	adds	r3, #1
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	0699      	lsls	r1, r3, #26
 8005e8e:	bf42      	ittt	mi
 8005e90:	6833      	ldrmi	r3, [r6, #0]
 8005e92:	3302      	addmi	r3, #2
 8005e94:	6033      	strmi	r3, [r6, #0]
 8005e96:	6825      	ldr	r5, [r4, #0]
 8005e98:	f015 0506 	ands.w	r5, r5, #6
 8005e9c:	d106      	bne.n	8005eac <_printf_common+0x48>
 8005e9e:	f104 0a19 	add.w	sl, r4, #25
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	6832      	ldr	r2, [r6, #0]
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dc26      	bgt.n	8005efa <_printf_common+0x96>
 8005eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	3b00      	subs	r3, #0
 8005eb4:	bf18      	it	ne
 8005eb6:	2301      	movne	r3, #1
 8005eb8:	0692      	lsls	r2, r2, #26
 8005eba:	d42b      	bmi.n	8005f14 <_printf_common+0xb0>
 8005ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c8      	blx	r9
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d01e      	beq.n	8005f08 <_printf_common+0xa4>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	6922      	ldr	r2, [r4, #16]
 8005ece:	f003 0306 	and.w	r3, r3, #6
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	bf02      	ittt	eq
 8005ed6:	68e5      	ldreq	r5, [r4, #12]
 8005ed8:	6833      	ldreq	r3, [r6, #0]
 8005eda:	1aed      	subeq	r5, r5, r3
 8005edc:	68a3      	ldr	r3, [r4, #8]
 8005ede:	bf0c      	ite	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	2500      	movne	r5, #0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfc4      	itt	gt
 8005eea:	1a9b      	subgt	r3, r3, r2
 8005eec:	18ed      	addgt	r5, r5, r3
 8005eee:	2600      	movs	r6, #0
 8005ef0:	341a      	adds	r4, #26
 8005ef2:	42b5      	cmp	r5, r6
 8005ef4:	d11a      	bne.n	8005f2c <_printf_common+0xc8>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e008      	b.n	8005f0c <_printf_common+0xa8>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4652      	mov	r2, sl
 8005efe:	4641      	mov	r1, r8
 8005f00:	4638      	mov	r0, r7
 8005f02:	47c8      	blx	r9
 8005f04:	3001      	adds	r0, #1
 8005f06:	d103      	bne.n	8005f10 <_printf_common+0xac>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f10:	3501      	adds	r5, #1
 8005f12:	e7c6      	b.n	8005ea2 <_printf_common+0x3e>
 8005f14:	18e1      	adds	r1, r4, r3
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	2030      	movs	r0, #48	@ 0x30
 8005f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f1e:	4422      	add	r2, r4
 8005f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f28:	3302      	adds	r3, #2
 8005f2a:	e7c7      	b.n	8005ebc <_printf_common+0x58>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4641      	mov	r1, r8
 8005f32:	4638      	mov	r0, r7
 8005f34:	47c8      	blx	r9
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0e6      	beq.n	8005f08 <_printf_common+0xa4>
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7d9      	b.n	8005ef2 <_printf_common+0x8e>
	...

08005f40 <_printf_i>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	7e0f      	ldrb	r7, [r1, #24]
 8005f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f48:	2f78      	cmp	r7, #120	@ 0x78
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	469a      	mov	sl, r3
 8005f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f56:	d807      	bhi.n	8005f68 <_printf_i+0x28>
 8005f58:	2f62      	cmp	r7, #98	@ 0x62
 8005f5a:	d80a      	bhi.n	8005f72 <_printf_i+0x32>
 8005f5c:	2f00      	cmp	r7, #0
 8005f5e:	f000 80d2 	beq.w	8006106 <_printf_i+0x1c6>
 8005f62:	2f58      	cmp	r7, #88	@ 0x58
 8005f64:	f000 80b9 	beq.w	80060da <_printf_i+0x19a>
 8005f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f70:	e03a      	b.n	8005fe8 <_printf_i+0xa8>
 8005f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f76:	2b15      	cmp	r3, #21
 8005f78:	d8f6      	bhi.n	8005f68 <_printf_i+0x28>
 8005f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f80 <_printf_i+0x40>)
 8005f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	08005fed 	.word	0x08005fed
 8005f88:	08005f69 	.word	0x08005f69
 8005f8c:	08005f69 	.word	0x08005f69
 8005f90:	08005f69 	.word	0x08005f69
 8005f94:	08005f69 	.word	0x08005f69
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005f69 	.word	0x08005f69
 8005fa0:	08005f69 	.word	0x08005f69
 8005fa4:	08005f69 	.word	0x08005f69
 8005fa8:	08005f69 	.word	0x08005f69
 8005fac:	080060ed 	.word	0x080060ed
 8005fb0:	08006017 	.word	0x08006017
 8005fb4:	080060a7 	.word	0x080060a7
 8005fb8:	08005f69 	.word	0x08005f69
 8005fbc:	08005f69 	.word	0x08005f69
 8005fc0:	0800610f 	.word	0x0800610f
 8005fc4:	08005f69 	.word	0x08005f69
 8005fc8:	08006017 	.word	0x08006017
 8005fcc:	08005f69 	.word	0x08005f69
 8005fd0:	08005f69 	.word	0x08005f69
 8005fd4:	080060af 	.word	0x080060af
 8005fd8:	6833      	ldr	r3, [r6, #0]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6032      	str	r2, [r6, #0]
 8005fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e09d      	b.n	8006128 <_printf_i+0x1e8>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	6820      	ldr	r0, [r4, #0]
 8005ff0:	1d19      	adds	r1, r3, #4
 8005ff2:	6031      	str	r1, [r6, #0]
 8005ff4:	0606      	lsls	r6, r0, #24
 8005ff6:	d501      	bpl.n	8005ffc <_printf_i+0xbc>
 8005ff8:	681d      	ldr	r5, [r3, #0]
 8005ffa:	e003      	b.n	8006004 <_printf_i+0xc4>
 8005ffc:	0645      	lsls	r5, r0, #25
 8005ffe:	d5fb      	bpl.n	8005ff8 <_printf_i+0xb8>
 8006000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006004:	2d00      	cmp	r5, #0
 8006006:	da03      	bge.n	8006010 <_printf_i+0xd0>
 8006008:	232d      	movs	r3, #45	@ 0x2d
 800600a:	426d      	negs	r5, r5
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006010:	4859      	ldr	r0, [pc, #356]	@ (8006178 <_printf_i+0x238>)
 8006012:	230a      	movs	r3, #10
 8006014:	e011      	b.n	800603a <_printf_i+0xfa>
 8006016:	6821      	ldr	r1, [r4, #0]
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	0608      	lsls	r0, r1, #24
 800601c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006020:	d402      	bmi.n	8006028 <_printf_i+0xe8>
 8006022:	0649      	lsls	r1, r1, #25
 8006024:	bf48      	it	mi
 8006026:	b2ad      	uxthmi	r5, r5
 8006028:	2f6f      	cmp	r7, #111	@ 0x6f
 800602a:	4853      	ldr	r0, [pc, #332]	@ (8006178 <_printf_i+0x238>)
 800602c:	6033      	str	r3, [r6, #0]
 800602e:	bf14      	ite	ne
 8006030:	230a      	movne	r3, #10
 8006032:	2308      	moveq	r3, #8
 8006034:	2100      	movs	r1, #0
 8006036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800603a:	6866      	ldr	r6, [r4, #4]
 800603c:	60a6      	str	r6, [r4, #8]
 800603e:	2e00      	cmp	r6, #0
 8006040:	bfa2      	ittt	ge
 8006042:	6821      	ldrge	r1, [r4, #0]
 8006044:	f021 0104 	bicge.w	r1, r1, #4
 8006048:	6021      	strge	r1, [r4, #0]
 800604a:	b90d      	cbnz	r5, 8006050 <_printf_i+0x110>
 800604c:	2e00      	cmp	r6, #0
 800604e:	d04b      	beq.n	80060e8 <_printf_i+0x1a8>
 8006050:	4616      	mov	r6, r2
 8006052:	fbb5 f1f3 	udiv	r1, r5, r3
 8006056:	fb03 5711 	mls	r7, r3, r1, r5
 800605a:	5dc7      	ldrb	r7, [r0, r7]
 800605c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006060:	462f      	mov	r7, r5
 8006062:	42bb      	cmp	r3, r7
 8006064:	460d      	mov	r5, r1
 8006066:	d9f4      	bls.n	8006052 <_printf_i+0x112>
 8006068:	2b08      	cmp	r3, #8
 800606a:	d10b      	bne.n	8006084 <_printf_i+0x144>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07df      	lsls	r7, r3, #31
 8006070:	d508      	bpl.n	8006084 <_printf_i+0x144>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	6861      	ldr	r1, [r4, #4]
 8006076:	4299      	cmp	r1, r3
 8006078:	bfde      	ittt	le
 800607a:	2330      	movle	r3, #48	@ 0x30
 800607c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006084:	1b92      	subs	r2, r2, r6
 8006086:	6122      	str	r2, [r4, #16]
 8006088:	f8cd a000 	str.w	sl, [sp]
 800608c:	464b      	mov	r3, r9
 800608e:	aa03      	add	r2, sp, #12
 8006090:	4621      	mov	r1, r4
 8006092:	4640      	mov	r0, r8
 8006094:	f7ff fee6 	bl	8005e64 <_printf_common>
 8006098:	3001      	adds	r0, #1
 800609a:	d14a      	bne.n	8006132 <_printf_i+0x1f2>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	b004      	add	sp, #16
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f043 0320 	orr.w	r3, r3, #32
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	4833      	ldr	r0, [pc, #204]	@ (800617c <_printf_i+0x23c>)
 80060b0:	2778      	movs	r7, #120	@ 0x78
 80060b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6831      	ldr	r1, [r6, #0]
 80060ba:	061f      	lsls	r7, r3, #24
 80060bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80060c0:	d402      	bmi.n	80060c8 <_printf_i+0x188>
 80060c2:	065f      	lsls	r7, r3, #25
 80060c4:	bf48      	it	mi
 80060c6:	b2ad      	uxthmi	r5, r5
 80060c8:	6031      	str	r1, [r6, #0]
 80060ca:	07d9      	lsls	r1, r3, #31
 80060cc:	bf44      	itt	mi
 80060ce:	f043 0320 	orrmi.w	r3, r3, #32
 80060d2:	6023      	strmi	r3, [r4, #0]
 80060d4:	b11d      	cbz	r5, 80060de <_printf_i+0x19e>
 80060d6:	2310      	movs	r3, #16
 80060d8:	e7ac      	b.n	8006034 <_printf_i+0xf4>
 80060da:	4827      	ldr	r0, [pc, #156]	@ (8006178 <_printf_i+0x238>)
 80060dc:	e7e9      	b.n	80060b2 <_printf_i+0x172>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f023 0320 	bic.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	e7f6      	b.n	80060d6 <_printf_i+0x196>
 80060e8:	4616      	mov	r6, r2
 80060ea:	e7bd      	b.n	8006068 <_printf_i+0x128>
 80060ec:	6833      	ldr	r3, [r6, #0]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	6961      	ldr	r1, [r4, #20]
 80060f2:	1d18      	adds	r0, r3, #4
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	062e      	lsls	r6, r5, #24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	d501      	bpl.n	8006100 <_printf_i+0x1c0>
 80060fc:	6019      	str	r1, [r3, #0]
 80060fe:	e002      	b.n	8006106 <_printf_i+0x1c6>
 8006100:	0668      	lsls	r0, r5, #25
 8006102:	d5fb      	bpl.n	80060fc <_printf_i+0x1bc>
 8006104:	8019      	strh	r1, [r3, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	4616      	mov	r6, r2
 800610c:	e7bc      	b.n	8006088 <_printf_i+0x148>
 800610e:	6833      	ldr	r3, [r6, #0]
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	6032      	str	r2, [r6, #0]
 8006114:	681e      	ldr	r6, [r3, #0]
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	2100      	movs	r1, #0
 800611a:	4630      	mov	r0, r6
 800611c:	f7fa f878 	bl	8000210 <memchr>
 8006120:	b108      	cbz	r0, 8006126 <_printf_i+0x1e6>
 8006122:	1b80      	subs	r0, r0, r6
 8006124:	6060      	str	r0, [r4, #4]
 8006126:	6863      	ldr	r3, [r4, #4]
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	2300      	movs	r3, #0
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006130:	e7aa      	b.n	8006088 <_printf_i+0x148>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	4632      	mov	r2, r6
 8006136:	4649      	mov	r1, r9
 8006138:	4640      	mov	r0, r8
 800613a:	47d0      	blx	sl
 800613c:	3001      	adds	r0, #1
 800613e:	d0ad      	beq.n	800609c <_printf_i+0x15c>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	079b      	lsls	r3, r3, #30
 8006144:	d413      	bmi.n	800616e <_printf_i+0x22e>
 8006146:	68e0      	ldr	r0, [r4, #12]
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	4298      	cmp	r0, r3
 800614c:	bfb8      	it	lt
 800614e:	4618      	movlt	r0, r3
 8006150:	e7a6      	b.n	80060a0 <_printf_i+0x160>
 8006152:	2301      	movs	r3, #1
 8006154:	4632      	mov	r2, r6
 8006156:	4649      	mov	r1, r9
 8006158:	4640      	mov	r0, r8
 800615a:	47d0      	blx	sl
 800615c:	3001      	adds	r0, #1
 800615e:	d09d      	beq.n	800609c <_printf_i+0x15c>
 8006160:	3501      	adds	r5, #1
 8006162:	68e3      	ldr	r3, [r4, #12]
 8006164:	9903      	ldr	r1, [sp, #12]
 8006166:	1a5b      	subs	r3, r3, r1
 8006168:	42ab      	cmp	r3, r5
 800616a:	dcf2      	bgt.n	8006152 <_printf_i+0x212>
 800616c:	e7eb      	b.n	8006146 <_printf_i+0x206>
 800616e:	2500      	movs	r5, #0
 8006170:	f104 0619 	add.w	r6, r4, #25
 8006174:	e7f5      	b.n	8006162 <_printf_i+0x222>
 8006176:	bf00      	nop
 8006178:	080064a5 	.word	0x080064a5
 800617c:	080064b6 	.word	0x080064b6

08006180 <__sflush_r>:
 8006180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	0716      	lsls	r6, r2, #28
 800618a:	4605      	mov	r5, r0
 800618c:	460c      	mov	r4, r1
 800618e:	d454      	bmi.n	800623a <__sflush_r+0xba>
 8006190:	684b      	ldr	r3, [r1, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	dc02      	bgt.n	800619c <__sflush_r+0x1c>
 8006196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	dd48      	ble.n	800622e <__sflush_r+0xae>
 800619c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d045      	beq.n	800622e <__sflush_r+0xae>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061a8:	682f      	ldr	r7, [r5, #0]
 80061aa:	6a21      	ldr	r1, [r4, #32]
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	d030      	beq.n	8006212 <__sflush_r+0x92>
 80061b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	0759      	lsls	r1, r3, #29
 80061b6:	d505      	bpl.n	80061c4 <__sflush_r+0x44>
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061be:	b10b      	cbz	r3, 80061c4 <__sflush_r+0x44>
 80061c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	2300      	movs	r3, #0
 80061c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061c8:	6a21      	ldr	r1, [r4, #32]
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b0      	blx	r6
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	d106      	bne.n	80061e2 <__sflush_r+0x62>
 80061d4:	6829      	ldr	r1, [r5, #0]
 80061d6:	291d      	cmp	r1, #29
 80061d8:	d82b      	bhi.n	8006232 <__sflush_r+0xb2>
 80061da:	4a2a      	ldr	r2, [pc, #168]	@ (8006284 <__sflush_r+0x104>)
 80061dc:	410a      	asrs	r2, r1
 80061de:	07d6      	lsls	r6, r2, #31
 80061e0:	d427      	bmi.n	8006232 <__sflush_r+0xb2>
 80061e2:	2200      	movs	r2, #0
 80061e4:	6062      	str	r2, [r4, #4]
 80061e6:	04d9      	lsls	r1, r3, #19
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	6022      	str	r2, [r4, #0]
 80061ec:	d504      	bpl.n	80061f8 <__sflush_r+0x78>
 80061ee:	1c42      	adds	r2, r0, #1
 80061f0:	d101      	bne.n	80061f6 <__sflush_r+0x76>
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	b903      	cbnz	r3, 80061f8 <__sflush_r+0x78>
 80061f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80061f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fa:	602f      	str	r7, [r5, #0]
 80061fc:	b1b9      	cbz	r1, 800622e <__sflush_r+0xae>
 80061fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006202:	4299      	cmp	r1, r3
 8006204:	d002      	beq.n	800620c <__sflush_r+0x8c>
 8006206:	4628      	mov	r0, r5
 8006208:	f7ff fbf2 	bl	80059f0 <_free_r>
 800620c:	2300      	movs	r3, #0
 800620e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006210:	e00d      	b.n	800622e <__sflush_r+0xae>
 8006212:	2301      	movs	r3, #1
 8006214:	4628      	mov	r0, r5
 8006216:	47b0      	blx	r6
 8006218:	4602      	mov	r2, r0
 800621a:	1c50      	adds	r0, r2, #1
 800621c:	d1c9      	bne.n	80061b2 <__sflush_r+0x32>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c6      	beq.n	80061b2 <__sflush_r+0x32>
 8006224:	2b1d      	cmp	r3, #29
 8006226:	d001      	beq.n	800622c <__sflush_r+0xac>
 8006228:	2b16      	cmp	r3, #22
 800622a:	d11e      	bne.n	800626a <__sflush_r+0xea>
 800622c:	602f      	str	r7, [r5, #0]
 800622e:	2000      	movs	r0, #0
 8006230:	e022      	b.n	8006278 <__sflush_r+0xf8>
 8006232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006236:	b21b      	sxth	r3, r3
 8006238:	e01b      	b.n	8006272 <__sflush_r+0xf2>
 800623a:	690f      	ldr	r7, [r1, #16]
 800623c:	2f00      	cmp	r7, #0
 800623e:	d0f6      	beq.n	800622e <__sflush_r+0xae>
 8006240:	0793      	lsls	r3, r2, #30
 8006242:	680e      	ldr	r6, [r1, #0]
 8006244:	bf08      	it	eq
 8006246:	694b      	ldreq	r3, [r1, #20]
 8006248:	600f      	str	r7, [r1, #0]
 800624a:	bf18      	it	ne
 800624c:	2300      	movne	r3, #0
 800624e:	eba6 0807 	sub.w	r8, r6, r7
 8006252:	608b      	str	r3, [r1, #8]
 8006254:	f1b8 0f00 	cmp.w	r8, #0
 8006258:	dde9      	ble.n	800622e <__sflush_r+0xae>
 800625a:	6a21      	ldr	r1, [r4, #32]
 800625c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800625e:	4643      	mov	r3, r8
 8006260:	463a      	mov	r2, r7
 8006262:	4628      	mov	r0, r5
 8006264:	47b0      	blx	r6
 8006266:	2800      	cmp	r0, #0
 8006268:	dc08      	bgt.n	800627c <__sflush_r+0xfc>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800627c:	4407      	add	r7, r0
 800627e:	eba8 0800 	sub.w	r8, r8, r0
 8006282:	e7e7      	b.n	8006254 <__sflush_r+0xd4>
 8006284:	dfbffffe 	.word	0xdfbffffe

08006288 <_fflush_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	690b      	ldr	r3, [r1, #16]
 800628c:	4605      	mov	r5, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b913      	cbnz	r3, 8006298 <_fflush_r+0x10>
 8006292:	2500      	movs	r5, #0
 8006294:	4628      	mov	r0, r5
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	b118      	cbz	r0, 80062a2 <_fflush_r+0x1a>
 800629a:	6a03      	ldr	r3, [r0, #32]
 800629c:	b90b      	cbnz	r3, 80062a2 <_fflush_r+0x1a>
 800629e:	f7ff f9ad 	bl	80055fc <__sinit>
 80062a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f3      	beq.n	8006292 <_fflush_r+0xa>
 80062aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062ac:	07d0      	lsls	r0, r2, #31
 80062ae:	d404      	bmi.n	80062ba <_fflush_r+0x32>
 80062b0:	0599      	lsls	r1, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_fflush_r+0x32>
 80062b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062b6:	f7ff fb98 	bl	80059ea <__retarget_lock_acquire_recursive>
 80062ba:	4628      	mov	r0, r5
 80062bc:	4621      	mov	r1, r4
 80062be:	f7ff ff5f 	bl	8006180 <__sflush_r>
 80062c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062c4:	07da      	lsls	r2, r3, #31
 80062c6:	4605      	mov	r5, r0
 80062c8:	d4e4      	bmi.n	8006294 <_fflush_r+0xc>
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	059b      	lsls	r3, r3, #22
 80062ce:	d4e1      	bmi.n	8006294 <_fflush_r+0xc>
 80062d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062d2:	f7ff fb8b 	bl	80059ec <__retarget_lock_release_recursive>
 80062d6:	e7dd      	b.n	8006294 <_fflush_r+0xc>

080062d8 <__swhatbuf_r>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e0:	2900      	cmp	r1, #0
 80062e2:	b096      	sub	sp, #88	@ 0x58
 80062e4:	4615      	mov	r5, r2
 80062e6:	461e      	mov	r6, r3
 80062e8:	da0d      	bge.n	8006306 <__swhatbuf_r+0x2e>
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	bf14      	ite	ne
 80062f6:	2340      	movne	r3, #64	@ 0x40
 80062f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062fc:	2000      	movs	r0, #0
 80062fe:	6031      	str	r1, [r6, #0]
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	b016      	add	sp, #88	@ 0x58
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	466a      	mov	r2, sp
 8006308:	f000 f848 	bl	800639c <_fstat_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	dbec      	blt.n	80062ea <__swhatbuf_r+0x12>
 8006310:	9901      	ldr	r1, [sp, #4]
 8006312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800631a:	4259      	negs	r1, r3
 800631c:	4159      	adcs	r1, r3
 800631e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006322:	e7eb      	b.n	80062fc <__swhatbuf_r+0x24>

08006324 <__smakebuf_r>:
 8006324:	898b      	ldrh	r3, [r1, #12]
 8006326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006328:	079d      	lsls	r5, r3, #30
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	d507      	bpl.n	8006340 <__smakebuf_r+0x1c>
 8006330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	2301      	movs	r3, #1
 800633a:	6163      	str	r3, [r4, #20]
 800633c:	b003      	add	sp, #12
 800633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006340:	ab01      	add	r3, sp, #4
 8006342:	466a      	mov	r2, sp
 8006344:	f7ff ffc8 	bl	80062d8 <__swhatbuf_r>
 8006348:	9f00      	ldr	r7, [sp, #0]
 800634a:	4605      	mov	r5, r0
 800634c:	4639      	mov	r1, r7
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff fbba 	bl	8005ac8 <_malloc_r>
 8006354:	b948      	cbnz	r0, 800636a <__smakebuf_r+0x46>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	059a      	lsls	r2, r3, #22
 800635c:	d4ee      	bmi.n	800633c <__smakebuf_r+0x18>
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	f043 0302 	orr.w	r3, r3, #2
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	e7e2      	b.n	8006330 <__smakebuf_r+0xc>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	6020      	str	r0, [r4, #0]
 800636e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800637a:	b15b      	cbz	r3, 8006394 <__smakebuf_r+0x70>
 800637c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f81d 	bl	80063c0 <_isatty_r>
 8006386:	b128      	cbz	r0, 8006394 <__smakebuf_r+0x70>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	431d      	orrs	r5, r3
 8006398:	81a5      	strh	r5, [r4, #12]
 800639a:	e7cf      	b.n	800633c <__smakebuf_r+0x18>

0800639c <_fstat_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	@ (80063bc <_fstat_r+0x20>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	f7fa feb2 	bl	8001112 <_fstat>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	d102      	bne.n	80063b8 <_fstat_r+0x1c>
 80063b2:	682b      	ldr	r3, [r5, #0]
 80063b4:	b103      	cbz	r3, 80063b8 <_fstat_r+0x1c>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd38      	pop	{r3, r4, r5, pc}
 80063ba:	bf00      	nop
 80063bc:	20000460 	.word	0x20000460

080063c0 <_isatty_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d06      	ldr	r5, [pc, #24]	@ (80063dc <_isatty_r+0x1c>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fa feb1 	bl	8001132 <_isatty>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_isatty_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_isatty_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	20000460 	.word	0x20000460

080063e0 <_sbrk_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d06      	ldr	r5, [pc, #24]	@ (80063fc <_sbrk_r+0x1c>)
 80063e4:	2300      	movs	r3, #0
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fa feba 	bl	8001164 <_sbrk>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_sbrk_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_sbrk_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000460 	.word	0x20000460

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
