
TD_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb0  08006cb0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb0  08006cb0  00007cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb8  08006cb8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb8  08006cb8  00007cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cbc  08006cbc  00007cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006cc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000068  08006d28  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08006d28  00008474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b9a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b1  00000000  00000000  0001bc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  0001f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a5b  00000000  00000000  0002058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166f4  00000000  00000000  00043fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d89af  00000000  00000000  0005a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013308b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005678  00000000  00000000  001330d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00138748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b60 	.word	0x08006b60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006b60 	.word	0x08006b60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <read_raw_t_p>:
void read_raw_t_p(int32_t *raw_press, int32_t *raw_temp);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_raw_t_p(int32_t *raw_press, int32_t *raw_temp){
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	uint8_t raw_data[BMP_TEMP_PRESS_DATA_LENGTH];
	uint8_t reg = BMP_TEMP_PRESS_REG;
 800064a:	23f7      	movs	r3, #247	@ 0xf7
 800064c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, &reg, 1, HAL_MAX_DELAY)==HAL_OK){
 800064e:	f107 020f 	add.w	r2, r7, #15
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	21ee      	movs	r1, #238	@ 0xee
 800065c:	4817      	ldr	r0, [pc, #92]	@ (80006bc <read_raw_t_p+0x7c>)
 800065e:	f001 ffa7 	bl	80025b0 <HAL_I2C_Master_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d123      	bne.n	80006b0 <read_raw_t_p+0x70>
		HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, raw_data, BMP_TEMP_PRESS_DATA_LENGTH, HAL_MAX_DELAY);
 8000668:	f107 0210 	add.w	r2, r7, #16
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2306      	movs	r3, #6
 8000674:	21ee      	movs	r1, #238	@ 0xee
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <read_raw_t_p+0x7c>)
 8000678:	f002 f898 	bl	80027ac <HAL_I2C_Master_Receive>
		*raw_press = (int32_t)(((raw_data[0] << 16) | (raw_data[1] << 8) | raw_data[2]) >> 4);
 800067c:	7c3b      	ldrb	r3, [r7, #16]
 800067e:	041a      	lsls	r2, r3, #16
 8000680:	7c7b      	ldrb	r3, [r7, #17]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	4313      	orrs	r3, r2
 8000686:	7cba      	ldrb	r2, [r7, #18]
 8000688:	4313      	orrs	r3, r2
 800068a:	111a      	asrs	r2, r3, #4
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
		*raw_temp = (int32_t)(((raw_data[3] << 16) | (raw_data[4] << 8) | raw_data[5]) >> 4);
 8000690:	7cfb      	ldrb	r3, [r7, #19]
 8000692:	041a      	lsls	r2, r3, #16
 8000694:	7d3b      	ldrb	r3, [r7, #20]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4313      	orrs	r3, r2
 800069a:	7d7a      	ldrb	r2, [r7, #21]
 800069c:	4313      	orrs	r3, r2
 800069e:	111a      	asrs	r2, r3, #4
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	601a      	str	r2, [r3, #0]
		printf("Raw Temp = %ld,\r\nRaw Press = %ld\r\n", raw_temp, raw_press);
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <read_raw_t_p+0x80>)
 80006aa:	f005 fb8d 	bl	8005dc8 <iprintf>
 80006ae:	e002      	b.n	80006b6 <read_raw_t_p+0x76>
	}
	else{
		printf("Erreur de communication sur le bus bus I2C\r\n");
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <read_raw_t_p+0x84>)
 80006b2:	f005 fbf1 	bl	8005e98 <puts>
		return 0;
	}
}
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000ac 	.word	0x200000ac
 80006c0:	08006b78 	.word	0x08006b78
 80006c4:	08006b9c 	.word	0x08006b9c

080006c8 <bmp280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
int32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T,BMP280_CalibDataNames *calib_names)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((BMP280_S32_t)calib_names->dig_T1<<1))) * ((BMP280_S32_t)calib_names->dig_T2)) >> 11;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	10da      	asrs	r2, r3, #3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	12db      	asrs	r3, r3, #11
 80006ea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4)-((BMP280_S32_t)calib_names->dig_T1)) * ((adc_T>>4)-((BMP280_S32_t)calib_names->dig_T1))) >> 12) * ((BMP280_S32_t)calib_names->dig_T3)) >> 14;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	111b      	asrs	r3, r3, #4
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	8812      	ldrh	r2, [r2, #0]
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	1112      	asrs	r2, r2, #4
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	8809      	ldrh	r1, [r1, #0]
 80006fe:	1a52      	subs	r2, r2, r1
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	131b      	asrs	r3, r3, #12
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	139b      	asrs	r3, r3, #14
 8000712:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4413      	add	r3, r2
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <bmp280_compensate_T_int32+0x74>)
 800071c:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <bmp280_compensate_T_int32+0x74>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	3380      	adds	r3, #128	@ 0x80
 800072a:	121b      	asrs	r3, r3, #8
 800072c:	60fb      	str	r3, [r7, #12]
	return T;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	2000031c 	.word	0x2000031c

08000740 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P, BMP280_CalibDataNames *calib_names)
{
 8000740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000744:	b0ca      	sub	sp, #296	@ 0x128
 8000746:	af00      	add	r7, sp, #0
 8000748:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800074c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine)-128000;
 8000750:	4bb2      	ldr	r3, [pc, #712]	@ (8000a1c <bmp280_compensate_P_int64+0x2dc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	17da      	asrs	r2, r3, #31
 8000756:	461c      	mov	r4, r3
 8000758:	4615      	mov	r5, r2
 800075a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800075e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000762:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)calib_names->dig_P6;
 8000766:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800076a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800076e:	fb03 f102 	mul.w	r1, r3, r2
 8000772:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000776:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	18ca      	adds	r2, r1, r3
 8000780:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000784:	fba3 8903 	umull	r8, r9, r3, r3
 8000788:	eb02 0309 	add.w	r3, r2, r9
 800078c:	4699      	mov	r9, r3
 800078e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000792:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000796:	b21b      	sxth	r3, r3
 8000798:	17da      	asrs	r2, r3, #31
 800079a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800079e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80007a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80007a6:	4603      	mov	r3, r0
 80007a8:	fb03 f209 	mul.w	r2, r3, r9
 80007ac:	460b      	mov	r3, r1
 80007ae:	fb08 f303 	mul.w	r3, r8, r3
 80007b2:	4413      	add	r3, r2
 80007b4:	4602      	mov	r2, r0
 80007b6:	fba8 1202 	umull	r1, r2, r8, r2
 80007ba:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80007be:	460a      	mov	r2, r1
 80007c0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80007c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80007c8:	4413      	add	r3, r2
 80007ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80007ce:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80007d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80007d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)calib_names->dig_P5)<<17);
 80007da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80007de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	17da      	asrs	r2, r3, #31
 80007e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80007ea:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80007ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007f2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80007f6:	462a      	mov	r2, r5
 80007f8:	fb02 f203 	mul.w	r2, r2, r3
 80007fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000800:	4621      	mov	r1, r4
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	441a      	add	r2, r3
 8000808:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800080c:	4621      	mov	r1, r4
 800080e:	fba3 1301 	umull	r1, r3, r3, r1
 8000812:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000816:	460b      	mov	r3, r1
 8000818:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800081c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 0100 	mov.w	r1, #0
 800082e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000832:	462b      	mov	r3, r5
 8000834:	0459      	lsls	r1, r3, #17
 8000836:	4623      	mov	r3, r4
 8000838:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800083c:	4623      	mov	r3, r4
 800083e:	0458      	lsls	r0, r3, #17
 8000840:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000844:	1814      	adds	r4, r2, r0
 8000846:	643c      	str	r4, [r7, #64]	@ 0x40
 8000848:	414b      	adcs	r3, r1
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
 800084c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000850:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)calib_names->dig_P4)<<35);
 8000854:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000858:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800085c:	b21b      	sxth	r3, r3
 800085e:	17da      	asrs	r2, r3, #31
 8000860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000864:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	f04f 0100 	mov.w	r1, #0
 8000870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000874:	00d9      	lsls	r1, r3, #3
 8000876:	2000      	movs	r0, #0
 8000878:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800087c:	1814      	adds	r4, r2, r0
 800087e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000880:	414b      	adcs	r3, r1
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000884:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000888:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)calib_names->dig_P3)>>8) + ((var1 * (BMP280_S64_t)calib_names->dig_P2)<<12);
 800088c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000890:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000894:	fb03 f102 	mul.w	r1, r3, r2
 8000898:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800089c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	18ca      	adds	r2, r1, r3
 80008a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008aa:	fba3 1303 	umull	r1, r3, r3, r3
 80008ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80008b2:	460b      	mov	r3, r1
 80008b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80008b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80008c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	17da      	asrs	r2, r3, #31
 80008ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80008d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80008d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80008da:	462b      	mov	r3, r5
 80008dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80008e0:	4642      	mov	r2, r8
 80008e2:	fb02 f203 	mul.w	r2, r2, r3
 80008e6:	464b      	mov	r3, r9
 80008e8:	4621      	mov	r1, r4
 80008ea:	fb01 f303 	mul.w	r3, r1, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	4622      	mov	r2, r4
 80008f2:	4641      	mov	r1, r8
 80008f4:	fba2 1201 	umull	r1, r2, r2, r1
 80008f8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80008fc:	460a      	mov	r2, r1
 80008fe:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000902:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000906:	4413      	add	r3, r2
 8000908:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	f04f 0100 	mov.w	r1, #0
 8000914:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000918:	4623      	mov	r3, r4
 800091a:	0a18      	lsrs	r0, r3, #8
 800091c:	462b      	mov	r3, r5
 800091e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000922:	462b      	mov	r3, r5
 8000924:	1219      	asrs	r1, r3, #8
 8000926:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800092a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800092e:	b21b      	sxth	r3, r3
 8000930:	17da      	asrs	r2, r3, #31
 8000932:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000936:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800093a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800093e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000942:	464a      	mov	r2, r9
 8000944:	fb02 f203 	mul.w	r2, r2, r3
 8000948:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800094c:	4644      	mov	r4, r8
 800094e:	fb04 f303 	mul.w	r3, r4, r3
 8000952:	441a      	add	r2, r3
 8000954:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000958:	4644      	mov	r4, r8
 800095a:	fba3 4304 	umull	r4, r3, r3, r4
 800095e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000962:	4623      	mov	r3, r4
 8000964:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800097e:	464c      	mov	r4, r9
 8000980:	0323      	lsls	r3, r4, #12
 8000982:	4644      	mov	r4, r8
 8000984:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000988:	4644      	mov	r4, r8
 800098a:	0322      	lsls	r2, r4, #12
 800098c:	1884      	adds	r4, r0, r2
 800098e:	633c      	str	r4, [r7, #48]	@ 0x30
 8000990:	eb41 0303 	adc.w	r3, r1, r3
 8000994:	637b      	str	r3, [r7, #52]	@ 0x34
 8000996:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800099a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)calib_names->dig_P1)>>33;
 800099e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80009a2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80009a6:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80009aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80009ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80009b2:	88db      	ldrh	r3, [r3, #6]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	2200      	movs	r2, #0
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80009bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80009c0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80009c4:	462b      	mov	r3, r5
 80009c6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80009ca:	4642      	mov	r2, r8
 80009cc:	fb02 f203 	mul.w	r2, r2, r3
 80009d0:	464b      	mov	r3, r9
 80009d2:	4621      	mov	r1, r4
 80009d4:	fb01 f303 	mul.w	r3, r1, r3
 80009d8:	4413      	add	r3, r2
 80009da:	4622      	mov	r2, r4
 80009dc:	4641      	mov	r1, r8
 80009de:	fba2 1201 	umull	r1, r2, r2, r1
 80009e2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80009e6:	460a      	mov	r2, r1
 80009e8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80009ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80009f0:	4413      	add	r3, r2
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000a02:	4629      	mov	r1, r5
 8000a04:	104a      	asrs	r2, r1, #1
 8000a06:	4629      	mov	r1, r5
 8000a08:	17cb      	asrs	r3, r1, #31
 8000a0a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000a0e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000a12:	4313      	orrs	r3, r2
 8000a14:	d104      	bne.n	8000a20 <bmp280_compensate_P_int64+0x2e0>
	{
	return 0; // avoid exception caused by division by zero
 8000a16:	2300      	movs	r3, #0
 8000a18:	e14b      	b.n	8000cb2 <bmp280_compensate_P_int64+0x572>
 8000a1a:	bf00      	nop
 8000a1c:	2000031c 	.word	0x2000031c
	}
	p = 1048576-adc_P;
 8000a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a24:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000a2e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000a32:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000a36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000a3a:	105b      	asrs	r3, r3, #1
 8000a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000a40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000a44:	07db      	lsls	r3, r3, #31
 8000a46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000a4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000a4e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000a52:	4621      	mov	r1, r4
 8000a54:	1a89      	subs	r1, r1, r2
 8000a56:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000a58:	4629      	mov	r1, r5
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000a60:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000a64:	4622      	mov	r2, r4
 8000a66:	462b      	mov	r3, r5
 8000a68:	1891      	adds	r1, r2, r2
 8000a6a:	6239      	str	r1, [r7, #32]
 8000a6c:	415b      	adcs	r3, r3
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a74:	4621      	mov	r1, r4
 8000a76:	1851      	adds	r1, r2, r1
 8000a78:	61b9      	str	r1, [r7, #24]
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	414b      	adcs	r3, r1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	018b      	lsls	r3, r1, #6
 8000a90:	4641      	mov	r1, r8
 8000a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000a96:	4641      	mov	r1, r8
 8000a98:	018a      	lsls	r2, r1, #6
 8000a9a:	4641      	mov	r1, r8
 8000a9c:	1889      	adds	r1, r1, r2
 8000a9e:	6139      	str	r1, [r7, #16]
 8000aa0:	4649      	mov	r1, r9
 8000aa2:	eb43 0101 	adc.w	r1, r3, r1
 8000aa6:	6179      	str	r1, [r7, #20]
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	008b      	lsls	r3, r1, #2
 8000ab8:	4641      	mov	r1, r8
 8000aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000abe:	4641      	mov	r1, r8
 8000ac0:	008a      	lsls	r2, r1, #2
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4622      	mov	r2, r4
 8000aca:	189b      	adds	r3, r3, r2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	462a      	mov	r2, r5
 8000ad2:	eb42 0303 	adc.w	r3, r2, r3
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	f04f 0200 	mov.w	r2, #0
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000ae4:	4649      	mov	r1, r9
 8000ae6:	008b      	lsls	r3, r1, #2
 8000ae8:	4641      	mov	r1, r8
 8000aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000aee:	4641      	mov	r1, r8
 8000af0:	008a      	lsls	r2, r1, #2
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	4603      	mov	r3, r0
 8000af8:	4622      	mov	r2, r4
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000afe:	462b      	mov	r3, r5
 8000b00:	460a      	mov	r2, r1
 8000b02:	eb42 0303 	adc.w	r3, r2, r3
 8000b06:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000b10:	f7ff fbce 	bl	80002b0 <__aeabi_ldivmod>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)calib_names->dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000b1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	17da      	asrs	r2, r3, #31
 8000b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000b2c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	0b50      	lsrs	r0, r2, #13
 8000b3a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000b3e:	1359      	asrs	r1, r3, #13
 8000b40:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000b44:	462b      	mov	r3, r5
 8000b46:	fb00 f203 	mul.w	r2, r0, r3
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	fb03 f301 	mul.w	r3, r3, r1
 8000b50:	4413      	add	r3, r2
 8000b52:	4622      	mov	r2, r4
 8000b54:	fba2 1200 	umull	r1, r2, r2, r0
 8000b58:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000b62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b66:	4413      	add	r3, r2
 8000b68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000b6c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	f04f 0100 	mov.w	r1, #0
 8000b78:	0b50      	lsrs	r0, r2, #13
 8000b7a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000b7e:	1359      	asrs	r1, r3, #13
 8000b80:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000b84:	462b      	mov	r3, r5
 8000b86:	fb00 f203 	mul.w	r2, r0, r3
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	fb03 f301 	mul.w	r3, r3, r1
 8000b90:	4413      	add	r3, r2
 8000b92:	4622      	mov	r2, r4
 8000b94:	fba2 1200 	umull	r1, r2, r2, r0
 8000b98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ba2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ba6:	4413      	add	r3, r2
 8000ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000bb8:	4621      	mov	r1, r4
 8000bba:	0e4a      	lsrs	r2, r1, #25
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	164b      	asrs	r3, r1, #25
 8000bc6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)calib_names->dig_P8) * p) >> 19;
 8000bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000bce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	17da      	asrs	r2, r3, #31
 8000bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bd8:	667a      	str	r2, [r7, #100]	@ 0x64
 8000bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000bde:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000be2:	462a      	mov	r2, r5
 8000be4:	fb02 f203 	mul.w	r2, r2, r3
 8000be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bec:	4621      	mov	r1, r4
 8000bee:	fb01 f303 	mul.w	r3, r1, r3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	fba2 1201 	umull	r1, r2, r2, r1
 8000bfe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000c02:	460a      	mov	r2, r1
 8000c04:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000c08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000c1e:	4621      	mov	r1, r4
 8000c20:	0cca      	lsrs	r2, r1, #19
 8000c22:	4629      	mov	r1, r5
 8000c24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000c28:	4629      	mov	r1, r5
 8000c2a:	14cb      	asrs	r3, r1, #19
 8000c2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)calib_names->dig_P7)<<4);
 8000c30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000c34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c38:	1884      	adds	r4, r0, r2
 8000c3a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000c3c:	eb41 0303 	adc.w	r3, r1, r3
 8000c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	1889      	adds	r1, r1, r2
 8000c4e:	6539      	str	r1, [r7, #80]	@ 0x50
 8000c50:	4629      	mov	r1, r5
 8000c52:	eb43 0101 	adc.w	r1, r3, r1
 8000c56:	6579      	str	r1, [r7, #84]	@ 0x54
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	f04f 0100 	mov.w	r1, #0
 8000c60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000c64:	4623      	mov	r3, r4
 8000c66:	0a18      	lsrs	r0, r3, #8
 8000c68:	462b      	mov	r3, r5
 8000c6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c6e:	462b      	mov	r3, r5
 8000c70:	1219      	asrs	r1, r3, #8
 8000c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	17da      	asrs	r2, r3, #31
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000c8e:	464c      	mov	r4, r9
 8000c90:	0123      	lsls	r3, r4, #4
 8000c92:	4644      	mov	r4, r8
 8000c94:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000c98:	4644      	mov	r4, r8
 8000c9a:	0122      	lsls	r2, r4, #4
 8000c9c:	1884      	adds	r4, r0, r2
 8000c9e:	603c      	str	r4, [r7, #0]
 8000ca0:	eb41 0303 	adc.w	r3, r1, r3
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000caa:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 8000cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cbe:	bf00      	nop

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b090      	sub	sp, #64	@ 0x40
 8000cc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fe4b 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f91f 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 fabf 	bl	8001250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd2:	f000 fa93 	bl	80011fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000cd6:	f000 f98b 	bl	8000ff0 <MX_CAN1_Init>
  MX_UART4_Init();
 8000cda:	f000 fa3b 	bl	8001154 <MX_UART4_Init>
  MX_UART5_Init();
 8000cde:	f000 fa63 	bl	80011a8 <MX_UART5_Init>
  MX_TIM2_Init();
 8000ce2:	f000 f9e9 	bl	80010b8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f9b9 	bl	800105c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_RegisterCallback(&huart4, HAL_UART_RX_COMPLETE_CB_ID, User_UartCompleteCallback);
 8000cea:	4a7e      	ldr	r2, [pc, #504]	@ (8000ee4 <main+0x224>)
 8000cec:	2103      	movs	r1, #3
 8000cee:	487e      	ldr	r0, [pc, #504]	@ (8000ee8 <main+0x228>)
 8000cf0:	f003 feea 	bl	8004ac8 <HAL_UART_RegisterCallback>
	HAL_TIM_Base_Start_IT(&htim2);
 8000cf4:	487d      	ldr	r0, [pc, #500]	@ (8000eec <main+0x22c>)
 8000cf6:	f003 f9a5 	bl	8004044 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("==== TP BUS & NETWORK ====\r\n");
 8000cfa:	487d      	ldr	r0, [pc, #500]	@ (8000ef0 <main+0x230>)
 8000cfc:	f005 f8cc 	bl	8005e98 <puts>
	BMP280_CalibDataNames *calib_names;
	int32_t raw_temp;
	int32_t raw_press;

	//question réponse capteur avec I2C pour ID capteur
	id_buf[0]= BMP_ID_REG;
 8000d00:	23d0      	movs	r3, #208	@ 0xd0
 8000d02:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(&hi2c1,BMP_ADDR,id_buf,1,HAL_MAX_DELAY);
 8000d06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	21ee      	movs	r1, #238	@ 0xee
 8000d14:	4877      	ldr	r0, [pc, #476]	@ (8000ef4 <main+0x234>)
 8000d16:	f001 fc4b 	bl	80025b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,BMP_ADDR,id_buf,1,HAL_MAX_DELAY);
 8000d1a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	21ee      	movs	r1, #238	@ 0xee
 8000d28:	4872      	ldr	r0, [pc, #456]	@ (8000ef4 <main+0x234>)
 8000d2a:	f001 fd3f 	bl	80027ac <HAL_I2C_Master_Receive>
	printf("BMP280 ID : %x\r\n",id_buf[0]);
 8000d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4870      	ldr	r0, [pc, #448]	@ (8000ef8 <main+0x238>)
 8000d36:	f005 f847 	bl	8005dc8 <iprintf>

	//Configuration et vérification du capteur
	data_config[0]= BMP_ADDR_MODE;
 8000d3a:	23f4      	movs	r3, #244	@ 0xf4
 8000d3c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	data_config[1]= BMP_MODE;
 8000d40:	2357      	movs	r3, #87	@ 0x57
 8000d42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(&hi2c1,BMP_ADDR,data_config,2,HAL_MAX_DELAY);
 8000d46:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2302      	movs	r3, #2
 8000d52:	21ee      	movs	r1, #238	@ 0xee
 8000d54:	4867      	ldr	r0, [pc, #412]	@ (8000ef4 <main+0x234>)
 8000d56:	f001 fc2b 	bl	80025b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,BMP_ADDR,data_config,2,HAL_MAX_DELAY);
 8000d5a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2302      	movs	r3, #2
 8000d66:	21ee      	movs	r1, #238	@ 0xee
 8000d68:	4862      	ldr	r0, [pc, #392]	@ (8000ef4 <main+0x234>)
 8000d6a:	f001 fd1f 	bl	80027ac <HAL_I2C_Master_Receive>
	printf("Register : %x\r\n",data_config[0]);
 8000d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4861      	ldr	r0, [pc, #388]	@ (8000efc <main+0x23c>)
 8000d76:	f005 f827 	bl	8005dc8 <iprintf>
	printf("Mode : %x\r\n",data_config[1]);
 8000d7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d7e:	4619      	mov	r1, r3
 8000d80:	485f      	ldr	r0, [pc, #380]	@ (8000f00 <main+0x240>)
 8000d82:	f005 f821 	bl	8005dc8 <iprintf>

	// Retrieving of calibration Data
	calib_reg[0] = BMP_CALIB_REG;
 8000d86:	2388      	movs	r3, #136	@ 0x88
 8000d88:	f887 3020 	strb.w	r3, [r7, #32]
	HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, calib_reg, 1, HAL_MAX_DELAY);
 8000d8c:	f107 0220 	add.w	r2, r7, #32
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	21ee      	movs	r1, #238	@ 0xee
 8000d9a:	4856      	ldr	r0, [pc, #344]	@ (8000ef4 <main+0x234>)
 8000d9c:	f001 fc08 	bl	80025b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, calib_data, BMP_CALIB_DATA_LENGTH, HAL_MAX_DELAY);
 8000da0:	f107 0208 	add.w	r2, r7, #8
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2318      	movs	r3, #24
 8000dac:	21ee      	movs	r1, #238	@ 0xee
 8000dae:	4851      	ldr	r0, [pc, #324]	@ (8000ef4 <main+0x234>)
 8000db0:	f001 fcfc 	bl	80027ac <HAL_I2C_Master_Receive>
	calib_names->dig_T1 = (uint16_t)((calib_data[1] << 8) | calib_data[0]);
 8000db4:	7a7b      	ldrb	r3, [r7, #9]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc6:	801a      	strh	r2, [r3, #0]
	calib_names->dig_T2 = (int16_t)((calib_data[3] << 8) | calib_data[2]);
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7abb      	ldrb	r3, [r7, #10]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd8:	805a      	strh	r2, [r3, #2]
	calib_names->dig_T3 = (int16_t)((calib_data[5] << 8) | calib_data[4]);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dea:	809a      	strh	r2, [r3, #4]
	calib_names->dig_P1 = (uint16_t)((calib_data[7] << 8) | calib_data[6]);
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfe:	80da      	strh	r2, [r3, #6]
	calib_names->dig_P2 = (int16_t)((calib_data[9] << 8) | calib_data[8]);
 8000e00:	7c7b      	ldrb	r3, [r7, #17]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	7c3b      	ldrb	r3, [r7, #16]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e10:	811a      	strh	r2, [r3, #8]
	calib_names->dig_P3 = (int16_t)((calib_data[11] << 8) | calib_data[10]);
 8000e12:	7cfb      	ldrb	r3, [r7, #19]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e22:	815a      	strh	r2, [r3, #10]
	calib_names->dig_P4 = (int16_t)((calib_data[13] << 8) | calib_data[12]);
 8000e24:	7d7b      	ldrb	r3, [r7, #21]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e34:	819a      	strh	r2, [r3, #12]
	calib_names->dig_P5 = (int16_t)((calib_data[15] << 8) | calib_data[14]);
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	7dbb      	ldrb	r3, [r7, #22]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e46:	81da      	strh	r2, [r3, #14]
	calib_names->dig_P6 = (int16_t)((calib_data[17] << 8) | calib_data[16]);
 8000e48:	7e7b      	ldrb	r3, [r7, #25]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	7e3b      	ldrb	r3, [r7, #24]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e58:	821a      	strh	r2, [r3, #16]
	calib_names->dig_P7 = (int16_t)((calib_data[19] << 8) | calib_data[18]);
 8000e5a:	7efb      	ldrb	r3, [r7, #27]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	7ebb      	ldrb	r3, [r7, #26]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6a:	825a      	strh	r2, [r3, #18]
	calib_names->dig_P8 = (int16_t)((calib_data[21] << 8) | calib_data[20]);
 8000e6c:	7f7b      	ldrb	r3, [r7, #29]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7f3b      	ldrb	r3, [r7, #28]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e7c:	829a      	strh	r2, [r3, #20]
	calib_names->dig_P9 = (int16_t)((calib_data[23] << 8) | calib_data[22]);
 8000e7e:	7ffb      	ldrb	r3, [r7, #31]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	7fbb      	ldrb	r3, [r7, #30]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8e:	82da      	strh	r2, [r3, #22]
		printf("%s\r\n",&data);
		HAL_UART_Transmit( &huart2, &data, 1, HAL_MAX_DELAY );
		 */

		//Retrieving the raw temp and press values
		read_raw_t_p(&raw_temp, &raw_press);
 8000e90:	463a      	mov	r2, r7
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fbd2 	bl	8000640 <read_raw_t_p>

		// Compensated temperature and pressure
		int32_t temp = bmp280_compensate_T_int32(raw_temp, calib_names);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc11 	bl	80006c8 <bmp280_compensate_T_int32>
 8000ea6:	6338      	str	r0, [r7, #48]	@ 0x30
		int32_t press = bmp280_compensate_P_int64(raw_press, calib_names);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc47 	bl	8000740 <bmp280_compensate_P_int64>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		printf("Compensated Temp = %d C\r\nCompensated Press = %d Pa\r\n", temp/100, press/256);
 8000eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <main+0x244>)
 8000eba:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebe:	1152      	asrs	r2, r2, #5
 8000ec0:	17db      	asrs	r3, r3, #31
 8000ec2:	1ad1      	subs	r1, r2, r3
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da00      	bge.n	8000ecc <main+0x20c>
 8000eca:	33ff      	adds	r3, #255	@ 0xff
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	461a      	mov	r2, r3
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <main+0x248>)
 8000ed2:	f004 ff79 	bl	8005dc8 <iprintf>
				TxData[1] = 0;
		}
		else{
			TxData[1]=1;
		}*/
		HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eda:	f000 fdb3 	bl	8001a44 <HAL_Delay>
	{
 8000ede:	bf00      	nop
 8000ee0:	e7d6      	b.n	8000e90 <main+0x1d0>
 8000ee2:	bf00      	nop
 8000ee4:	08001349 	.word	0x08001349
 8000ee8:	200001b4 	.word	0x200001b4
 8000eec:	20000100 	.word	0x20000100
 8000ef0:	08006bc8 	.word	0x08006bc8
 8000ef4:	200000ac 	.word	0x200000ac
 8000ef8:	08006be4 	.word	0x08006be4
 8000efc:	08006bf8 	.word	0x08006bf8
 8000f00:	08006c08 	.word	0x08006c08
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	08006c14 	.word	0x08006c14

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2234      	movs	r2, #52	@ 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 f89c 	bl	8006058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <SystemClock_Config+0xdc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe8 <SystemClock_Config+0xdc>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <SystemClock_Config+0xdc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <SystemClock_Config+0xe0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <SystemClock_Config+0xe0>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <SystemClock_Config+0xe0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f80:	23b4      	movs	r3, #180	@ 0xb4
 8000f82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 fd5b 	bl	8003a50 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa0:	f000 f9e0 	bl	8001364 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fa4:	f002 f9ba 	bl	800331c <HAL_PWREx_EnableOverDrive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fae:	f000 f9d9 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2105      	movs	r1, #5
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 f9f3 	bl	80033bc <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fdc:	f000 f9c2 	bl	8001364 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	@ 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_CAN1_Init+0x64>)
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <MX_CAN1_Init+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_CAN1_Init+0x64>)
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_CAN1_Init+0x64>)
 800100e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001012:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001016:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800101a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_CAN1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_CAN1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_CAN1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_CAN1_Init+0x64>)
 8001042:	f000 fd23 	bl	8001a8c <HAL_CAN_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800104c:	f000 f98a 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000084 	.word	0x20000084
 8001058:	40006400 	.word	0x40006400

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f001 f945 	bl	8002328 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f95e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000ac 	.word	0x200000ac
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_TIM2_Init+0x94>)
 80010de:	22b3      	movs	r2, #179	@ 0xb3
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_TIM2_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <MX_TIM2_Init+0x94>)
 80010ea:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <MX_TIM2_Init+0x98>)
 80010ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_TIM2_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_TIM2_Init+0x94>)
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <MX_TIM2_Init+0x94>)
 80010fc:	f002 ff46 	bl	8003f8c <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001106:	f000 f92d 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	@ (800114c <MX_TIM2_Init+0x94>)
 8001118:	f003 f914 	bl	8004344 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f91f 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_TIM2_Init+0x94>)
 8001134:	f003 fbd0 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800113e:	f000 f911 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000100 	.word	0x20000100
 8001150:	000f423f 	.word	0x000f423f

08001154 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_UART4_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <MX_UART4_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <MX_UART4_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <MX_UART4_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <MX_UART4_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <MX_UART4_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_UART4_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <MX_UART4_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_UART4_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <MX_UART4_Init+0x4c>)
 800118c:	f003 fc3e 	bl	8004a0c <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f8e5 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001b4 	.word	0x200001b4
 80011a4:	40004c00 	.word	0x40004c00

080011a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <MX_UART5_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_UART5_Init+0x4c>)
 80011e0:	f003 fc14 	bl	8004a0c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f8bb 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000022c 	.word	0x2000022c
 80011f8:	40005000 	.word	0x40005000

080011fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <MX_USART2_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USART2_UART_Init+0x4c>)
 8001234:	f003 fbea 	bl	8004a0c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f891 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002a4 	.word	0x200002a4
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_GPIO_Init+0xec>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a33      	ldr	r2, [pc, #204]	@ (800133c <MX_GPIO_Init+0xec>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b31      	ldr	r3, [pc, #196]	@ (800133c <MX_GPIO_Init+0xec>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_GPIO_Init+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a2c      	ldr	r2, [pc, #176]	@ (800133c <MX_GPIO_Init+0xec>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_GPIO_Init+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_GPIO_Init+0xec>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a25      	ldr	r2, [pc, #148]	@ (800133c <MX_GPIO_Init+0xec>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_GPIO_Init+0xec>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_GPIO_Init+0xec>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <MX_GPIO_Init+0xec>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_GPIO_Init+0xec>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_GPIO_Init+0xec>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_GPIO_Init+0xec>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_GPIO_Init+0xec>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	4812      	ldr	r0, [pc, #72]	@ (8001340 <MX_GPIO_Init+0xf0>)
 80012f8:	f000 fffc 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001302:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_GPIO_Init+0xf4>)
 8001314:	f000 fe5a 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001318:	2320      	movs	r3, #32
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_GPIO_Init+0xf0>)
 8001330:	f000 fe4c 	bl	8001fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020800 	.word	0x40020800

08001348 <User_UartCompleteCallback>:

/* USER CODE BEGIN 4 */
void User_UartCompleteCallback(UART_HandleTypeDef *huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	printf("j'ai reçu des datas\r\n");
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <User_UartCompleteCallback+0x18>)
 8001352:	f004 fda1 	bl	8005e98 <puts>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08006c4c 	.word	0x08006c4c

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f000 fd38 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <HAL_CAN_MspInit+0x84>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12c      	bne.n	800143c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_CAN_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800142c:	2309      	movs	r3, #9
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_CAN_MspInit+0x8c>)
 8001438:	f000 fdc8 	bl	8001fcc <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40006400 	.word	0x40006400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_I2C_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12b      	bne.n	80014ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23c0      	movs	r3, #192	@ 0xc0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001492:	2312      	movs	r3, #18
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149e:	2304      	movs	r3, #4
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <HAL_I2C_MspInit+0x8c>)
 80014aa:	f000 fd8f 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	@ 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f0:	d115      	bne.n	800151e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_TIM_Base_MspInit+0x48>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_TIM_Base_MspInit+0x48>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_Base_MspInit+0x48>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	201c      	movs	r0, #28
 8001514:	f000 fc91 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001518:	201c      	movs	r0, #28
 800151a:	f000 fcaa 	bl	8001e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	@ 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5e      	ldr	r2, [pc, #376]	@ (80016c4 <HAL_UART_MspInit+0x198>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d134      	bne.n	80015b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a5c      	ldr	r2, [pc, #368]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b5a      	ldr	r3, [pc, #360]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	4b56      	ldr	r3, [pc, #344]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a55      	ldr	r2, [pc, #340]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001586:	2303      	movs	r3, #3
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001596:	2308      	movs	r3, #8
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	484a      	ldr	r0, [pc, #296]	@ (80016cc <HAL_UART_MspInit+0x1a0>)
 80015a2:	f000 fd13 	bl	8001fcc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2034      	movs	r0, #52	@ 0x34
 80015ac:	f000 fc45 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015b0:	2034      	movs	r0, #52	@ 0x34
 80015b2:	f000 fc5e 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	e081      	b.n	80016bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==UART5)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a44      	ldr	r2, [pc, #272]	@ (80016d0 <HAL_UART_MspInit+0x1a4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d14b      	bne.n	800165a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	4a3f      	ldr	r2, [pc, #252]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a38      	ldr	r2, [pc, #224]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a31      	ldr	r2, [pc, #196]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b2f      	ldr	r3, [pc, #188]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001628:	2308      	movs	r3, #8
 800162a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4828      	ldr	r0, [pc, #160]	@ (80016d4 <HAL_UART_MspInit+0x1a8>)
 8001634:	f000 fcca 	bl	8001fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001648:	2308      	movs	r3, #8
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4821      	ldr	r0, [pc, #132]	@ (80016d8 <HAL_UART_MspInit+0x1ac>)
 8001654:	f000 fcba 	bl	8001fcc <HAL_GPIO_Init>
}
 8001658:	e030      	b.n	80016bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_UART_MspInit+0x1b0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d12b      	bne.n	80016bc <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001672:	6413      	str	r3, [r2, #64]	@ 0x40
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_UART_MspInit+0x19c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169c:	230c      	movs	r3, #12
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ac:	2307      	movs	r3, #7
 80016ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_UART_MspInit+0x1a0>)
 80016b8:	f000 fc88 	bl	8001fcc <HAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	@ 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004c00 	.word	0x40004c00
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40005000 	.word	0x40005000
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40004400 	.word	0x40004400

080016e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016e8:	1d39      	adds	r1, r7, #4
 80016ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ee:	2201      	movs	r2, #1
 80016f0:	4807      	ldr	r0, [pc, #28]	@ (8001710 <__io_putchar+0x30>)
 80016f2:	f003 fa81 	bl	8004bf8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 80016f6:	1d39      	adds	r1, r7, #4
 80016f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fc:	2201      	movs	r2, #1
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <__io_putchar+0x34>)
 8001700:	f003 fa7a 	bl	8004bf8 <HAL_UART_Transmit>

  return ch;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002a4 	.word	0x200002a4
 8001714:	200001b4 	.word	0x200001b4

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f949 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM2_IRQHandler+0x10>)
 800177e:	f002 fcd1 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000100 	.word	0x20000100

0800178c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <UART4_IRQHandler+0x10>)
 8001792:	f003 fabd 	bl	8004d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001b4 	.word	0x200001b4

080017a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00a      	b.n	80017c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b2:	f3af 8000 	nop.w
 80017b6:	4601      	mov	r1, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	b2ca      	uxtb	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf0      	blt.n	80017b2 <_read+0x12>
  }

  return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e009      	b.n	8001800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff73 	bl	80016e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf1      	blt.n	80017ec <_write+0x12>
  }
  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183a:	605a      	str	r2, [r3, #4]
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f004 fc22 	bl	80060f4 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20020000 	.word	0x20020000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	20000320 	.word	0x20000320
 80018e4:	20000478 	.word	0x20000478

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	@ (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800193a:	f004 fbe1 	bl	8006100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff f9bf 	bl	8000cc0 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001950:	08006cc0 	.word	0x08006cc0
  ldr r2, =_sbss
 8001954:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001958:	20000474 	.word	0x20000474

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 fa4b 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fcec 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fa63 	bl	8001e8e <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 fa2b 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000324 	.word	0x20000324

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000324 	.word	0x20000324

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0ed      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fc88 	bl	80013c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff ffb4 	bl	8001a2c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac6:	e012      	b.n	8001aee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac8:	f7ff ffb0 	bl	8001a2c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d90b      	bls.n	8001aee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0c5      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e5      	beq.n	8001ac8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0202 	bic.w	r2, r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0c:	f7ff ff8e 	bl	8001a2c <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b12:	e012      	b.n	8001b3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b14:	f7ff ff8a 	bl	8001a2c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d90b      	bls.n	8001b3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2205      	movs	r2, #5
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e09f      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e5      	bne.n	8001b14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e1b      	ldrb	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e007      	b.n	8001b72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7e5b      	ldrb	r3, [r3, #25]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e9b      	ldrb	r3, [r3, #26]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d108      	bne.n	8001bb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0220 	bic.w	r2, r2, #32
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7edb      	ldrb	r3, [r3, #27]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e007      	b.n	8001bf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0210 	orr.w	r2, r2, #16
 8001bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7f1b      	ldrb	r3, [r3, #28]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d108      	bne.n	8001c0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0208 	orr.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0208 	bic.w	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7f5b      	ldrb	r3, [r3, #29]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0204 	orr.w	r2, r2, #4
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	ea42 0103 	orr.w	r1, r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	@ (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	@ (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	@ 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff29 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff3e 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff8e 	bl	8001d78 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5d 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff31 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffa2 	bl	8001de0 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fdba 	bl	8001a2c <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d008      	beq.n	8001ed8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e052      	b.n	8001f7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0216 	bic.w	r2, r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ef6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <HAL_DMA_Abort+0x62>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0208 	bic.w	r2, r2, #8
 8001f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f28:	e013      	b.n	8001f52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2a:	f7ff fd7f 	bl	8001a2c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d90c      	bls.n	8001f52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e015      	b.n	8001f7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e4      	bne.n	8001f2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f64:	223f      	movs	r2, #63	@ 0x3f
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e00c      	b.n	8001fbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e165      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8154 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ae 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b5d      	ldr	r3, [pc, #372]	@ (80022cc <HAL_GPIO_Init+0x300>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a5c      	ldr	r2, [pc, #368]	@ (80022cc <HAL_GPIO_Init+0x300>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_GPIO_Init+0x300>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	@ (80022d4 <HAL_GPIO_Init+0x308>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4e      	ldr	r2, [pc, #312]	@ (80022d8 <HAL_GPIO_Init+0x30c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	@ (80022dc <HAL_GPIO_Init+0x310>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	@ (80022e0 <HAL_GPIO_Init+0x314>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	@ (80022e4 <HAL_GPIO_Init+0x318>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x20a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_GPIO_Init+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x206>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a49      	ldr	r2, [pc, #292]	@ (80022ec <HAL_GPIO_Init+0x320>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x202>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae96 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40021400 	.word	0x40021400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff f87e 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	@ 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f001 f908 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	@ (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	@ (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	@ (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	@ (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	@ (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
 80025c0:	4613      	mov	r3, r2
 80025c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fa32 	bl	8001a2c <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 80e0 	bne.w	8002798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4970      	ldr	r1, [pc, #448]	@ (80027a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fc64 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0d3      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_Master_Transmit+0x50>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0cc      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d007      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	@ 0x21
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2210      	movs	r2, #16
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	893a      	ldrh	r2, [r7, #8]
 8002656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a50      	ldr	r2, [pc, #320]	@ (80027a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002668:	8979      	ldrh	r1, [r7, #10]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 face 	bl	8002c10 <I2C_MasterRequestWrite>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08d      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002694:	e066      	b.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fd22 	bl	80030e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11b      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x188>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6a39      	ldr	r1, [r7, #32]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fd19 	bl	8003174 <I2C_WaitOnBTFFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e01a      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d194      	bne.n	8002696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	@ 0x30
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	817b      	strh	r3, [r7, #10]
 80027bc:	4613      	mov	r3, r2
 80027be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff f934 	bl	8001a2c <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 8217 	bne.w	8002c02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2319      	movs	r3, #25
 80027da:	2201      	movs	r2, #1
 80027dc:	497c      	ldr	r1, [pc, #496]	@ (80029d0 <HAL_I2C_Master_Receive+0x224>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb66 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
 80027ec:	e20a      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_I2C_Master_Receive+0x50>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e203      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2222      	movs	r2, #34	@ 0x22
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a5c      	ldr	r2, [pc, #368]	@ (80029d4 <HAL_I2C_Master_Receive+0x228>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002864:	8979      	ldrh	r1, [r7, #10]
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa52 	bl	8002d14 <I2C_MasterRequestRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c4      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e198      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11b      	bne.n	80028ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e178      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	e158      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002950:	e144      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002956:	2b03      	cmp	r3, #3
 8002958:	f200 80f1 	bhi.w	8002b3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b01      	cmp	r3, #1
 8002962:	d123      	bne.n	80029ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fc4b 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e145      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029aa:	e117      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d14e      	bne.n	8002a52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	4906      	ldr	r1, [pc, #24]	@ (80029d8 <HAL_I2C_Master_Receive+0x22c>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fa76 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e11a      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
 80029ce:	bf00      	nop
 80029d0:	00100002 	.word	0x00100002
 80029d4:	ffff0000 	.word	0xffff0000
 80029d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a50:	e0c4      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	496c      	ldr	r1, [pc, #432]	@ (8002c0c <HAL_I2C_Master_Receive+0x460>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa27 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cb      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4955      	ldr	r1, [pc, #340]	@ (8002c0c <HAL_I2C_Master_Receive+0x460>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9f9 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e09d      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b3c:	e04e      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fb5e 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e058      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d124      	bne.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aeb6 	bne.w	8002952 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	@ 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010004 	.word	0x00010004

08002c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d006      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d003      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c38:	d108      	bne.n	8002c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00b      	b.n	8002c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	2b12      	cmp	r3, #18
 8002c52:	d107      	bne.n	8002c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f91d 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8a:	d103      	bne.n	8002c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e035      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ca0:	d108      	bne.n	8002cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	e01b      	b.n	8002cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	11db      	asrs	r3, r3, #7
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f063 030f 	orn	r3, r3, #15
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <I2C_MasterRequestWrite+0xfc>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f966 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e010      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4907      	ldr	r1, [pc, #28]	@ (8002d10 <I2C_MasterRequestWrite+0x100>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f956 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	00010008 	.word	0x00010008
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d006      	beq.n	8002d4e <I2C_MasterRequestRead+0x3a>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d003      	beq.n	8002d4e <I2C_MasterRequestRead+0x3a>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d4c:	d108      	bne.n	8002d60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00b      	b.n	8002d78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d107      	bne.n	8002d78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f893 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9e:	d103      	bne.n	8002da8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e079      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db4:	d108      	bne.n	8002dc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e05f      	b.n	8002e88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dc8:	897b      	ldrh	r3, [r7, #10]
 8002dca:	11db      	asrs	r3, r3, #7
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0306 	and.w	r3, r3, #6
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f063 030f 	orn	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4930      	ldr	r1, [pc, #192]	@ (8002ea8 <I2C_MasterRequestRead+0x194>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f8dc 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e054      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4929      	ldr	r1, [pc, #164]	@ (8002eac <I2C_MasterRequestRead+0x198>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8cc 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e044      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f831 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e62:	d103      	bne.n	8002e6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e017      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	11db      	asrs	r3, r3, #7
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f063 030e 	orn	r3, r3, #14
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <I2C_MasterRequestRead+0x198>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f888 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00010008 	.word	0x00010008
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	e048      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d044      	beq.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe fdaf 	bl	8001a2c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d139      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10d      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	e00c      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e023      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10d      	bne.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	e00c      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d093      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb2:	e071      	b.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d123      	bne.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e067      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d041      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fe fd0a 	bl	8001a2c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d136      	bne.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10c      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e00b      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e021      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e00b      	b.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f af6d 	bne.w	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f0:	e034      	b.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8e3 	bl	80032be <I2C_IsAcknowledgeFailed>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e034      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d028      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe fc8f 	bl	8001a2c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b80      	cmp	r3, #128	@ 0x80
 800312c:	d016      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	d1c3      	bne.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f89b 	bl	80032be <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fc47 	bl	8001a2c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003210:	e049      	b.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d119      	bne.n	8003254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e030      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe fbea 	bl	8001a2c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d016      	beq.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e007      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d1ae      	bne.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d11b      	bne.n	800330e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003342:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003348:	f7fe fb70 	bl	8001a2c <HAL_GetTick>
 800334c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800334e:	e009      	b.n	8003364 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003350:	f7fe fb6c 	bl	8001a2c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800335e:	d901      	bls.n	8003364 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e01f      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003370:	d1ee      	bne.n	8003350 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003372:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7fe fb58 	bl	8001a2c <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7fe fb54 	bl	8001a2c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e007      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003394:	4b07      	ldr	r3, [pc, #28]	@ (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	420e0040 	.word	0x420e0040
 80033b4:	40007000 	.word	0x40007000
 80033b8:	420e0044 	.word	0x420e0044

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cc      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b68      	ldr	r3, [pc, #416]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90c      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e067      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4934      	ldr	r1, [pc, #208]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fabe 	bl	8001a2c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe faba 	bl	8001a2c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e04f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f855 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	@ (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fa1e 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	08006c64 	.word	0x08006c64
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_RCC_GetHCLKFreq+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000000 	.word	0x20000000

080035a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a4:	f7ff fff0 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	@ (80035c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08006c74 	.word	0x08006c74

080035c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035cc:	f7ff ffdc 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0b5b      	lsrs	r3, r3, #13
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	@ (80035ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08006c74 	.word	0x08006c74

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b0ae      	sub	sp, #184	@ 0xb8
 80035f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003616:	4bcb      	ldr	r3, [pc, #812]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b0c      	cmp	r3, #12
 8003620:	f200 8206 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x440>
 8003624:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003661 	.word	0x08003661
 8003630:	08003a31 	.word	0x08003a31
 8003634:	08003a31 	.word	0x08003a31
 8003638:	08003a31 	.word	0x08003a31
 800363c:	08003669 	.word	0x08003669
 8003640:	08003a31 	.word	0x08003a31
 8003644:	08003a31 	.word	0x08003a31
 8003648:	08003a31 	.word	0x08003a31
 800364c:	08003671 	.word	0x08003671
 8003650:	08003a31 	.word	0x08003a31
 8003654:	08003a31 	.word	0x08003a31
 8003658:	08003a31 	.word	0x08003a31
 800365c:	08003861 	.word	0x08003861
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4bb9      	ldr	r3, [pc, #740]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 8003662:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003666:	e1e7      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4bb8      	ldr	r3, [pc, #736]	@ (800394c <HAL_RCC_GetSysClockFreq+0x35c>)
 800366a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800366e:	e1e3      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4bb4      	ldr	r3, [pc, #720]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367c:	4bb1      	ldr	r3, [pc, #708]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d071      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003688:	4bae      	ldr	r3, [pc, #696]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003694:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800369c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f04f 0100 	mov.w	r1, #0
 80036ba:	0159      	lsls	r1, r3, #5
 80036bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c0:	0150      	lsls	r0, r2, #5
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4621      	mov	r1, r4
 80036c8:	1a51      	subs	r1, r2, r1
 80036ca:	6439      	str	r1, [r7, #64]	@ 0x40
 80036cc:	4629      	mov	r1, r5
 80036ce:	eb63 0301 	sbc.w	r3, r3, r1
 80036d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80036e0:	4649      	mov	r1, r9
 80036e2:	018b      	lsls	r3, r1, #6
 80036e4:	4641      	mov	r1, r8
 80036e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ea:	4641      	mov	r1, r8
 80036ec:	018a      	lsls	r2, r1, #6
 80036ee:	4641      	mov	r1, r8
 80036f0:	1a51      	subs	r1, r2, r1
 80036f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036f4:	4649      	mov	r1, r9
 80036f6:	eb63 0301 	sbc.w	r3, r3, r1
 80036fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003708:	4649      	mov	r1, r9
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4641      	mov	r1, r8
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4622      	mov	r2, r4
 800371e:	189b      	adds	r3, r3, r2
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
 8003722:	462b      	mov	r3, r5
 8003724:	460a      	mov	r2, r1
 8003726:	eb42 0303 	adc.w	r3, r2, r3
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003738:	4629      	mov	r1, r5
 800373a:	024b      	lsls	r3, r1, #9
 800373c:	4621      	mov	r1, r4
 800373e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003742:	4621      	mov	r1, r4
 8003744:	024a      	lsls	r2, r1, #9
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003758:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800375c:	f7fc fdf8 	bl	8000350 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800376a:	e067      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b75      	ldr	r3, [pc, #468]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003778:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800377c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003786:	2300      	movs	r3, #0
 8003788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800378a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80037c0:	4649      	mov	r1, r9
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4641      	mov	r1, r8
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4641      	mov	r1, r8
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4641      	mov	r1, r8
 80037d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80037d4:	4649      	mov	r1, r9
 80037d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ee:	4692      	mov	sl, r2
 80037f0:	469b      	mov	fp, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb1a 0303 	adds.w	r3, sl, r3
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800380e:	4629      	mov	r1, r5
 8003810:	028b      	lsls	r3, r1, #10
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003818:	4621      	mov	r1, r4
 800381a:	028a      	lsls	r2, r1, #10
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003824:	2200      	movs	r2, #0
 8003826:	673b      	str	r3, [r7, #112]	@ 0x70
 8003828:	677a      	str	r2, [r7, #116]	@ 0x74
 800382a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800382e:	f7fc fd8f 	bl	8000350 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4613      	mov	r3, r2
 8003838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800383c:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	3301      	adds	r3, #1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800384e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800385e:	e0eb      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003860:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d06b      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003878:	4b32      	ldr	r3, [pc, #200]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x354>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	2200      	movs	r2, #0
 8003880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	663b      	str	r3, [r7, #96]	@ 0x60
 800388c:	2300      	movs	r3, #0
 800388e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003890:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	f04f 0000 	mov.w	r0, #0
 800389c:	f04f 0100 	mov.w	r1, #0
 80038a0:	0159      	lsls	r1, r3, #5
 80038a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a6:	0150      	lsls	r0, r2, #5
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4621      	mov	r1, r4
 80038ae:	1a51      	subs	r1, r2, r1
 80038b0:	61b9      	str	r1, [r7, #24]
 80038b2:	4629      	mov	r1, r5
 80038b4:	eb63 0301 	sbc.w	r3, r3, r1
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038c6:	4659      	mov	r1, fp
 80038c8:	018b      	lsls	r3, r1, #6
 80038ca:	4651      	mov	r1, sl
 80038cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d0:	4651      	mov	r1, sl
 80038d2:	018a      	lsls	r2, r1, #6
 80038d4:	4651      	mov	r1, sl
 80038d6:	ebb2 0801 	subs.w	r8, r2, r1
 80038da:	4659      	mov	r1, fp
 80038dc:	eb63 0901 	sbc.w	r9, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f4:	4690      	mov	r8, r2
 80038f6:	4699      	mov	r9, r3
 80038f8:	4623      	mov	r3, r4
 80038fa:	eb18 0303 	adds.w	r3, r8, r3
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	462b      	mov	r3, r5
 8003902:	eb49 0303 	adc.w	r3, r9, r3
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003914:	4629      	mov	r1, r5
 8003916:	024b      	lsls	r3, r1, #9
 8003918:	4621      	mov	r1, r4
 800391a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800391e:	4621      	mov	r1, r4
 8003920:	024a      	lsls	r2, r1, #9
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800392a:	2200      	movs	r2, #0
 800392c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800392e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003930:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003934:	f7fc fd0c 	bl	8000350 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003942:	e065      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x420>
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b3d      	ldr	r3, [pc, #244]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	2200      	movs	r2, #0
 8003958:	4618      	mov	r0, r3
 800395a:	4611      	mov	r1, r2
 800395c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003960:	653b      	str	r3, [r7, #80]	@ 0x50
 8003962:	2300      	movs	r3, #0
 8003964:	657b      	str	r3, [r7, #84]	@ 0x54
 8003966:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800396a:	4642      	mov	r2, r8
 800396c:	464b      	mov	r3, r9
 800396e:	f04f 0000 	mov.w	r0, #0
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	0159      	lsls	r1, r3, #5
 8003978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397c:	0150      	lsls	r0, r2, #5
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4641      	mov	r1, r8
 8003984:	1a51      	subs	r1, r2, r1
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	4649      	mov	r1, r9
 800398a:	eb63 0301 	sbc.w	r3, r3, r1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800399c:	4659      	mov	r1, fp
 800399e:	018b      	lsls	r3, r1, #6
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a6:	4651      	mov	r1, sl
 80039a8:	018a      	lsls	r2, r1, #6
 80039aa:	4651      	mov	r1, sl
 80039ac:	1a54      	subs	r4, r2, r1
 80039ae:	4659      	mov	r1, fp
 80039b0:	eb63 0501 	sbc.w	r5, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	00eb      	lsls	r3, r5, #3
 80039be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c2:	00e2      	lsls	r2, r4, #3
 80039c4:	4614      	mov	r4, r2
 80039c6:	461d      	mov	r5, r3
 80039c8:	4643      	mov	r3, r8
 80039ca:	18e3      	adds	r3, r4, r3
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	464b      	mov	r3, r9
 80039d0:	eb45 0303 	adc.w	r3, r5, r3
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039f8:	2200      	movs	r2, #0
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a02:	f7fc fca5 	bl	8000350 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a10:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0f1b      	lsrs	r3, r3, #28
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a2e:	e003      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	37b8      	adds	r7, #184	@ 0xb8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400

08003a50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e28d      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8083 	beq.w	8003b76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a70:	4b94      	ldr	r3, [pc, #592]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a7c:	4b91      	ldr	r3, [pc, #580]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a88:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a94:	d00c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a96:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d112      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa2:	4b88      	ldr	r3, [pc, #544]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	4b84      	ldr	r3, [pc, #528]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05b      	beq.n	8003b74 <HAL_RCC_OscConfig+0x124>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d157      	bne.n	8003b74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e25a      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d106      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x90>
 8003ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e01d      	b.n	8003b1c <HAL_RCC_OscConfig+0xcc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0xb4>
 8003aea:	4b76      	ldr	r3, [pc, #472]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a75      	ldr	r2, [pc, #468]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b73      	ldr	r3, [pc, #460]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a72      	ldr	r2, [pc, #456]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0xcc>
 8003b04:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd ff82 	bl	8001a2c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd ff7e 	bl	8001a2c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e21f      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0xdc>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff6e 	bl	8001a2c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd ff6a 	bl	8001a2c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e20b      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	4b57      	ldr	r3, [pc, #348]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x104>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d06f      	beq.n	8003c62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b82:	4b50      	ldr	r3, [pc, #320]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b47      	ldr	r3, [pc, #284]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b44      	ldr	r3, [pc, #272]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x186>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1d3      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4937      	ldr	r1, [pc, #220]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCC_OscConfig+0x278>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd ff17 	bl	8001a2c <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd ff13 	bl	8001a2c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1b4      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4925      	ldr	r1, [pc, #148]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <HAL_RCC_OscConfig+0x278>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fef6 	bl	8001a2c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fd fef2 	bl	8001a2c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e193      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_RCC_OscConfig+0x27c>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fed6 	bl	8001a2c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fed2 	bl	8001a2c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e173      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x234>
 8003ca2:	e01b      	b.n	8003cdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd febf 	bl	8001a2c <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	e00e      	b.n	8003cd0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fd febb 	bl	8001a2c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d907      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e15c      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ea      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8097 	beq.w	8003e18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b83      	ldr	r3, [pc, #524]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	4a7e      	ldr	r2, [pc, #504]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <HAL_RCC_OscConfig+0x4b0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d118      	bne.n	8003d58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d26:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCC_OscConfig+0x4b0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x4b0>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d32:	f7fd fe7b 	bl	8001a2c <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd fe77 	bl	8001a2c <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e118      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f00 <HAL_RCC_OscConfig+0x4b0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x31e>
 8003d60:	4b66      	ldr	r3, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a65      	ldr	r2, [pc, #404]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCC_OscConfig+0x358>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x340>
 8003d76:	4b61      	ldr	r3, [pc, #388]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	4a60      	ldr	r2, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d82:	4b5e      	ldr	r3, [pc, #376]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	4a5d      	ldr	r2, [pc, #372]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0x358>
 8003d90:	4b5a      	ldr	r3, [pc, #360]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a59      	ldr	r2, [pc, #356]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	4b57      	ldr	r3, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a56      	ldr	r2, [pc, #344]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	f023 0304 	bic.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fe3c 	bl	8001a2c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fe38 	bl	8001a2c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0d7      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	4b4b      	ldr	r3, [pc, #300]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ee      	beq.n	8003db8 <HAL_RCC_OscConfig+0x368>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fe26 	bl	8001a2c <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fe22 	bl	8001a2c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0c1      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfa:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ee      	bne.n	8003de4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4a3a      	ldr	r2, [pc, #232]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80ad 	beq.w	8003f7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e22:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d060      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d145      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b33      	ldr	r3, [pc, #204]	@ (8003f04 <HAL_RCC_OscConfig+0x4b4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fdf6 	bl	8001a2c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd fdf2 	bl	8001a2c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e093      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x4b4>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fdc7 	bl	8001a2c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd fdc3 	bl	8001a2c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e064      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x452>
 8003ec0:	e05c      	b.n	8003f7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_RCC_OscConfig+0x4b4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fdb0 	bl	8001a2c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fdac 	bl	8001a2c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04d      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x4ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x480>
 8003eee:	e045      	b.n	8003f7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e040      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <HAL_RCC_OscConfig+0x538>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d030      	beq.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d129      	bne.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d122      	bne.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d119      	bne.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d10f      	bne.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e04c      	b.n	8004038 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d111      	bne.n	8003fce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fc38 	bl	8004828 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <HAL_TIM_Base_Init+0xb4>)
 8003fc4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fadb 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	080014e1 	.word	0x080014e1

08004044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04e      	b.n	80040fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a23      	ldr	r2, [pc, #140]	@ (8004108 <HAL_TIM_Base_Start_IT+0xc4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d01d      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <HAL_TIM_Base_Start_IT+0xc8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_TIM_Base_Start_IT+0xcc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004114 <HAL_TIM_Base_Start_IT+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <HAL_TIM_Base_Start_IT+0xd8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_TIM_Base_Start_IT+0xdc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d111      	bne.n	80040e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d010      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	e007      	b.n	80040f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40001800 	.word	0x40001800

08004124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d026      	beq.n	8004194 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d021      	beq.n	8004194 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e009      	b.n	800418e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d026      	beq.n	80041ec <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d021      	beq.n	80041ec <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0204 	mvn.w	r2, #4
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e009      	b.n	80041e6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d026      	beq.n	8004244 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0208 	mvn.w	r2, #8
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
 8004228:	e009      	b.n	800423e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d026      	beq.n	800429c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d021      	beq.n	800429c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0210 	mvn.w	r2, #16
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2208      	movs	r2, #8
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
 8004280:	e009      	b.n	8004296 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0220 	mvn.w	r2, #32
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0x1c>
 800435c:	2302      	movs	r3, #2
 800435e:	e0b4      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x186>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xd4>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x172>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xa6>
 80043b4:	2b70      	cmp	r3, #112	@ 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x11a>
 80043bc:	2b60      	cmp	r3, #96	@ 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xfa>
 80043c4:	2b50      	cmp	r3, #80	@ 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x13a>
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	f000 f9f5 	bl	80047e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	f000 f9de 	bl	80047e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	461a      	mov	r2, r3
 800444c:	f000 f952 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f9ab 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 f971 	bl	8004752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	@ 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f99b 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f932 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f98b 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 f982 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a46      	ldr	r2, [pc, #280]	@ (80046c8 <TIM_Base_SetConfig+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a43      	ldr	r2, [pc, #268]	@ (80046cc <TIM_Base_SetConfig+0x130>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a42      	ldr	r2, [pc, #264]	@ (80046d0 <TIM_Base_SetConfig+0x134>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a41      	ldr	r2, [pc, #260]	@ (80046d4 <TIM_Base_SetConfig+0x138>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a40      	ldr	r2, [pc, #256]	@ (80046d8 <TIM_Base_SetConfig+0x13c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <TIM_Base_SetConfig+0x12c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fc:	d027      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a32      	ldr	r2, [pc, #200]	@ (80046cc <TIM_Base_SetConfig+0x130>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d023      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a31      	ldr	r2, [pc, #196]	@ (80046d0 <TIM_Base_SetConfig+0x134>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <TIM_Base_SetConfig+0x138>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <TIM_Base_SetConfig+0x13c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <TIM_Base_SetConfig+0x140>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <TIM_Base_SetConfig+0x144>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2c      	ldr	r2, [pc, #176]	@ (80046e4 <TIM_Base_SetConfig+0x148>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2b      	ldr	r2, [pc, #172]	@ (80046e8 <TIM_Base_SetConfig+0x14c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <TIM_Base_SetConfig+0x150>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <TIM_Base_SetConfig+0x154>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a10      	ldr	r2, [pc, #64]	@ (80046c8 <TIM_Base_SetConfig+0x12c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0xf8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <TIM_Base_SetConfig+0x13c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]
  }
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800
 80046e8:	40001800 	.word	0x40001800
 80046ec:	40001c00 	.word	0x40001c00
 80046f0:	40002000 	.word	0x40002000

080046f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004752:	b480      	push	{r7}
 8004754:	b087      	sub	sp, #28
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0210 	bic.w	r2, r3, #16
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800478e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 0307 	orr.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	021a      	lsls	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <TIM_ResetCallback+0x7c>)
 8004834:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1b      	ldr	r2, [pc, #108]	@ (80048a8 <TIM_ResetCallback+0x80>)
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <TIM_ResetCallback+0x84>)
 8004844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <TIM_ResetCallback+0x88>)
 800484c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <TIM_ResetCallback+0x8c>)
 8004854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <TIM_ResetCallback+0x90>)
 800485c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <TIM_ResetCallback+0x94>)
 8004864:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <TIM_ResetCallback+0x98>)
 800486c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <TIM_ResetCallback+0x9c>)
 8004874:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <TIM_ResetCallback+0xa0>)
 800487c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a12      	ldr	r2, [pc, #72]	@ (80048cc <TIM_ResetCallback+0xa4>)
 8004884:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a11      	ldr	r2, [pc, #68]	@ (80048d0 <TIM_ResetCallback+0xa8>)
 800488c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <TIM_ResetCallback+0xac>)
 8004894:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	080044d3 	.word	0x080044d3
 80048a8:	080044e7 	.word	0x080044e7
 80048ac:	0800455f 	.word	0x0800455f
 80048b0:	08004573 	.word	0x08004573
 80048b4:	0800450f 	.word	0x0800450f
 80048b8:	08004523 	.word	0x08004523
 80048bc:	080044fb 	.word	0x080044fb
 80048c0:	08004537 	.word	0x08004537
 80048c4:	0800454b 	.word	0x0800454b
 80048c8:	08004587 	.word	0x08004587
 80048cc:	080049d1 	.word	0x080049d1
 80048d0:	080049e5 	.word	0x080049e5
 80048d4:	080049f9 	.word	0x080049f9

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e05a      	b.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10c      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40001800 	.word	0x40001800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e04d      	b.n	8004aba <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d111      	bne.n	8004a4e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fc60 	bl	80052f8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <HAL_UART_Init+0xb8>)
 8004a44:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	@ 0x24
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fe78 	bl	800575c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	0800152d 	.word	0x0800152d

08004ac8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e07c      	b.n	8004bea <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d150      	bne.n	8004b9e <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d844      	bhi.n	8004b8c <HAL_UART_RegisterCallback+0xc4>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <HAL_UART_RegisterCallback+0x40>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b4d 	.word	0x08004b4d
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b65 	.word	0x08004b65
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b75 	.word	0x08004b75
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004b8d 	.word	0x08004b8d
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004b7d 	.word	0x08004b7d
 8004b38:	08004b85 	.word	0x08004b85
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8004b42:	e051      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004b4a:	e04d      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004b52:	e049      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004b5a:	e045      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004b62:	e041      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004b6a:	e03d      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004b72:	e039      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004b7a:	e035      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004b82:	e031      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004b8a:	e02d      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
        break;
 8004b9c:	e024      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	2b0b      	cmp	r3, #11
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_RegisterCallback+0xee>
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d004      	beq.n	8004bbe <HAL_UART_RegisterCallback+0xf6>
 8004bb4:	e007      	b.n	8004bc6 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004bbc:	e014      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004bc4:	e010      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f043 0220 	orr.w	r2, r3, #32
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
        break;
 8004bd6:	e007      	b.n	8004be8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop

08004bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d175      	bne.n	8004d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Transmit+0x2c>
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e06e      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fc fef9 	bl	8001a2c <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c6c:	e02e      	b.n	8004ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	@ 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fb75 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e03a      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cb      	bne.n	8004c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fb41 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e006      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
  }
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b0ba      	sub	sp, #232	@ 0xe8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_UART_IRQHandler+0x66>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fc34 	bl	80055dc <UART_Receive_IT>
      return;
 8004d74:	e260      	b.n	8005238 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80e1 	beq.w	8004f42 <HAL_UART_IRQHandler+0x232>
 8004d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80d4 	beq.w	8004f42 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xae>
 8004da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_UART_IRQHandler+0xd2>
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f043 0202 	orr.w	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_UART_IRQHandler+0xf6>
 8004dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	f043 0204 	orr.w	r2, r3, #4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <HAL_UART_IRQHandler+0x126>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d105      	bne.n	8004e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	f043 0208 	orr.w	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 81f7 	beq.w	800522e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_UART_IRQHandler+0x14e>
 8004e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fbbf 	bl	80055dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b40      	cmp	r3, #64	@ 0x40
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_UART_IRQHandler+0x17a>
 8004e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d051      	beq.n	8004f2e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fac5 	bl	800541a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b40      	cmp	r3, #64	@ 0x40
 8004e9c:	d142      	bne.n	8004f24 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1d9      	bne.n	8004e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d013      	beq.n	8004f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef6:	4a80      	ldr	r2, [pc, #512]	@ (80050f8 <HAL_UART_IRQHandler+0x3e8>)
 8004ef8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd f841 	bl	8001f86 <HAL_DMA_Abort_IT>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f14:	4610      	mov	r0, r2
 8004f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	e011      	b.n	8004f3e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f22:	e00c      	b.n	8004f3e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e007      	b.n	8004f3e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f3c:	e177      	b.n	800522e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3e:	bf00      	nop
    return;
 8004f40:	e175      	b.n	800522e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	f040 8151 	bne.w	80051ee <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 814a 	beq.w	80051ee <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8143 	beq.w	80051ee <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	f040 80b7 	bne.w	80050fc <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8147 	beq.w	8005232 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fac:	429a      	cmp	r2, r3
 8004fae:	f080 8140 	bcs.w	8005232 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc4:	f000 8088 	beq.w	80050d8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ff4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005000:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800500c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1d9      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005038:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800503c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005040:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800504a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e1      	bne.n	8005014 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005074:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005076:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800507a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e3      	bne.n	8005050 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc fee7 	bl	8001ea6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80050ea:	b292      	uxth	r2, r2
 80050ec:	1a8a      	subs	r2, r1, r2
 80050ee:	b292      	uxth	r2, r2
 80050f0:	4611      	mov	r1, r2
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f6:	e09c      	b.n	8005232 <HAL_UART_IRQHandler+0x522>
 80050f8:	080054e1 	.word	0x080054e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005104:	b29b      	uxth	r3, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 808f 	beq.w	8005236 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8005118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 808a 	beq.w	8005236 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005138:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005146:	647a      	str	r2, [r7, #68]	@ 0x44
 8005148:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800514c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e3      	bne.n	8005122 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	623b      	str	r3, [r7, #32]
   return(result);
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3314      	adds	r3, #20
 800517a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800517e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0310 	bic.w	r3, r3, #16
 80051b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051c4:	61fa      	str	r2, [r7, #28]
 80051c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	617b      	str	r3, [r7, #20]
   return(result);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e3      	bne.n	80051a0 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80051e6:	4611      	mov	r1, r2
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051ec:	e023      	b.n	8005236 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_UART_IRQHandler+0x4fe>
 80051fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f97f 	bl	800550a <UART_Transmit_IT>
    return;
 800520c:	e014      	b.n	8005238 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <HAL_UART_IRQHandler+0x528>
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9bf 	bl	80055aa <UART_EndTransmit_IT>
    return;
 800522c:	e004      	b.n	8005238 <HAL_UART_IRQHandler+0x528>
    return;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <HAL_UART_IRQHandler+0x528>
      return;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_UART_IRQHandler+0x528>
      return;
 8005236:	bf00      	nop
  }
}
 8005238:	37e8      	adds	r7, #232	@ 0xe8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop

08005240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a10      	ldr	r2, [pc, #64]	@ (8005344 <UART_InitCallbacksToDefault+0x4c>)
 8005304:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a0f      	ldr	r2, [pc, #60]	@ (8005348 <UART_InitCallbacksToDefault+0x50>)
 800530a:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a0f      	ldr	r2, [pc, #60]	@ (800534c <UART_InitCallbacksToDefault+0x54>)
 8005310:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a0e      	ldr	r2, [pc, #56]	@ (8005350 <UART_InitCallbacksToDefault+0x58>)
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0e      	ldr	r2, [pc, #56]	@ (8005354 <UART_InitCallbacksToDefault+0x5c>)
 800531c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <UART_InitCallbacksToDefault+0x60>)
 8005322:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a0d      	ldr	r2, [pc, #52]	@ (800535c <UART_InitCallbacksToDefault+0x64>)
 8005328:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a0c      	ldr	r2, [pc, #48]	@ (8005360 <UART_InitCallbacksToDefault+0x68>)
 800532e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <UART_InitCallbacksToDefault+0x6c>)
 8005334:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	08005255 	.word	0x08005255
 8005348:	08005241 	.word	0x08005241
 800534c:	0800527d 	.word	0x0800527d
 8005350:	08005269 	.word	0x08005269
 8005354:	08005291 	.word	0x08005291
 8005358:	080052a5 	.word	0x080052a5
 800535c:	080052b9 	.word	0x080052b9
 8005360:	080052cd 	.word	0x080052cd
 8005364:	080052e1 	.word	0x080052e1

08005368 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	e03b      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d037      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fc fb53 	bl	8001a2c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <UART_WaitOnFlagUntilTimeout+0x30>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e03a      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d023      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b80      	cmp	r3, #128	@ 0x80
 80053ae:	d020      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b40      	cmp	r3, #64	@ 0x40
 80053b4:	d01d      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d116      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f81d 	bl	800541a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2208      	movs	r2, #8
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e00f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	429a      	cmp	r2, r3
 800540e:	d0b4      	beq.n	800537a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541a:	b480      	push	{r7}
 800541c:	b095      	sub	sp, #84	@ 0x54
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005442:	643a      	str	r2, [r7, #64]	@ 0x40
 8005444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	61fb      	str	r3, [r7, #28]
   return(result);
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800547c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	2b01      	cmp	r3, #1
 8005490:	d119      	bne.n	80054c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 0310 	bic.w	r3, r3, #16
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b2:	61ba      	str	r2, [r7, #24]
 80054b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	613b      	str	r3, [r7, #16]
   return(result);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054d4:	bf00      	nop
 80054d6:	3754      	adds	r7, #84	@ 0x54
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b21      	cmp	r3, #33	@ 0x21
 800551c:	d13e      	bne.n	800559c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005526:	d114      	bne.n	8005552 <UART_Transmit_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d110      	bne.n	8005552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	e008      	b.n	8005564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6211      	str	r1, [r2, #32]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	@ 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b22      	cmp	r3, #34	@ 0x22
 80055ee:	f040 80b0 	bne.w	8005752 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fa:	d117      	bne.n	800562c <UART_Receive_IT+0x50>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d113      	bne.n	800562c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	b29a      	uxth	r2, r3
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
 800562a:	e026      	b.n	800567a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563e:	d007      	beq.n	8005650 <UART_Receive_IT+0x74>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <UART_Receive_IT+0x82>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e008      	b.n	8005670 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566a:	b2da      	uxtb	r2, r3
 800566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29b      	uxth	r3, r3
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	4619      	mov	r1, r3
 8005688:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800568a:	2b00      	cmp	r3, #0
 800568c:	d15f      	bne.n	800574e <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0220 	bic.w	r2, r2, #32
 800569c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d136      	bne.n	8005742 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fa:	623a      	str	r2, [r7, #32]
 80056fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	69f9      	ldr	r1, [r7, #28]
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	61bb      	str	r3, [r7, #24]
   return(result);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b10      	cmp	r3, #16
 800571a:	d10a      	bne.n	8005732 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800573a:	4611      	mov	r1, r2
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
 8005740:	e003      	b.n	800574a <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e002      	b.n	8005754 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	@ 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800575c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005760:	b0c0      	sub	sp, #256	@ 0x100
 8005762:	af00      	add	r7, sp, #0
 8005764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	68d9      	ldr	r1, [r3, #12]
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	ea40 0301 	orr.w	r3, r0, r1
 8005784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	431a      	orrs	r2, r3
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	431a      	orrs	r2, r3
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057b4:	f021 010c 	bic.w	r1, r1, #12
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057c2:	430b      	orrs	r3, r1
 80057c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d6:	6999      	ldr	r1, [r3, #24]
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	ea40 0301 	orr.w	r3, r0, r1
 80057e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005a28 <UART_SetConfig+0x2cc>)
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d005      	beq.n	80057fc <UART_SetConfig+0xa0>
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a2c <UART_SetConfig+0x2d0>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d104      	bne.n	8005806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057fc:	f7fd fee4 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8005800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005804:	e003      	b.n	800580e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005806:	f7fd fecb 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 800580a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005818:	f040 810c 	bne.w	8005a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800581c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005820:	2200      	movs	r2, #0
 8005822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800582a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800582e:	4622      	mov	r2, r4
 8005830:	462b      	mov	r3, r5
 8005832:	1891      	adds	r1, r2, r2
 8005834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005836:	415b      	adcs	r3, r3
 8005838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800583a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800583e:	4621      	mov	r1, r4
 8005840:	eb12 0801 	adds.w	r8, r2, r1
 8005844:	4629      	mov	r1, r5
 8005846:	eb43 0901 	adc.w	r9, r3, r1
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800585a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585e:	4690      	mov	r8, r2
 8005860:	4699      	mov	r9, r3
 8005862:	4623      	mov	r3, r4
 8005864:	eb18 0303 	adds.w	r3, r8, r3
 8005868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800586c:	462b      	mov	r3, r5
 800586e:	eb49 0303 	adc.w	r3, r9, r3
 8005872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800588a:	460b      	mov	r3, r1
 800588c:	18db      	adds	r3, r3, r3
 800588e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005890:	4613      	mov	r3, r2
 8005892:	eb42 0303 	adc.w	r3, r2, r3
 8005896:	657b      	str	r3, [r7, #84]	@ 0x54
 8005898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800589c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058a0:	f7fa fd56 	bl	8000350 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4b61      	ldr	r3, [pc, #388]	@ (8005a30 <UART_SetConfig+0x2d4>)
 80058aa:	fba3 2302 	umull	r2, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	011c      	lsls	r4, r3, #4
 80058b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	1891      	adds	r1, r2, r2
 80058ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058cc:	415b      	adcs	r3, r3
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058d4:	4641      	mov	r1, r8
 80058d6:	eb12 0a01 	adds.w	sl, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0b01 	adc.w	fp, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f4:	4692      	mov	sl, r2
 80058f6:	469b      	mov	fp, r3
 80058f8:	4643      	mov	r3, r8
 80058fa:	eb1a 0303 	adds.w	r3, sl, r3
 80058fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005902:	464b      	mov	r3, r9
 8005904:	eb4b 0303 	adc.w	r3, fp, r3
 8005908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800591c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005920:	460b      	mov	r3, r1
 8005922:	18db      	adds	r3, r3, r3
 8005924:	643b      	str	r3, [r7, #64]	@ 0x40
 8005926:	4613      	mov	r3, r2
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	647b      	str	r3, [r7, #68]	@ 0x44
 800592e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005936:	f7fa fd0b 	bl	8000350 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4611      	mov	r1, r2
 8005940:	4b3b      	ldr	r3, [pc, #236]	@ (8005a30 <UART_SetConfig+0x2d4>)
 8005942:	fba3 2301 	umull	r2, r3, r3, r1
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2264      	movs	r2, #100	@ 0x64
 800594a:	fb02 f303 	mul.w	r3, r2, r3
 800594e:	1acb      	subs	r3, r1, r3
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005956:	4b36      	ldr	r3, [pc, #216]	@ (8005a30 <UART_SetConfig+0x2d4>)
 8005958:	fba3 2302 	umull	r2, r3, r3, r2
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005964:	441c      	add	r4, r3
 8005966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	1891      	adds	r1, r2, r2
 800597e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005980:	415b      	adcs	r3, r3
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005988:	4641      	mov	r1, r8
 800598a:	1851      	adds	r1, r2, r1
 800598c:	6339      	str	r1, [r7, #48]	@ 0x30
 800598e:	4649      	mov	r1, r9
 8005990:	414b      	adcs	r3, r1
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059a0:	4659      	mov	r1, fp
 80059a2:	00cb      	lsls	r3, r1, #3
 80059a4:	4651      	mov	r1, sl
 80059a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059aa:	4651      	mov	r1, sl
 80059ac:	00ca      	lsls	r2, r1, #3
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	4642      	mov	r2, r8
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059bc:	464b      	mov	r3, r9
 80059be:	460a      	mov	r2, r1
 80059c0:	eb42 0303 	adc.w	r3, r2, r3
 80059c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059dc:	460b      	mov	r3, r1
 80059de:	18db      	adds	r3, r3, r3
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e2:	4613      	mov	r3, r2
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059f2:	f7fa fcad 	bl	8000350 <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005a30 <UART_SetConfig+0x2d4>)
 80059fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	2164      	movs	r1, #100	@ 0x64
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	3332      	adds	r3, #50	@ 0x32
 8005a0e:	4a08      	ldr	r2, [pc, #32]	@ (8005a30 <UART_SetConfig+0x2d4>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f003 0207 	and.w	r2, r3, #7
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4422      	add	r2, r4
 8005a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a24:	e106      	b.n	8005c34 <UART_SetConfig+0x4d8>
 8005a26:	bf00      	nop
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	40011400 	.word	0x40011400
 8005a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a46:	4642      	mov	r2, r8
 8005a48:	464b      	mov	r3, r9
 8005a4a:	1891      	adds	r1, r2, r2
 8005a4c:	6239      	str	r1, [r7, #32]
 8005a4e:	415b      	adcs	r3, r3
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a56:	4641      	mov	r1, r8
 8005a58:	1854      	adds	r4, r2, r1
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	eb43 0501 	adc.w	r5, r3, r1
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	00eb      	lsls	r3, r5, #3
 8005a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a6e:	00e2      	lsls	r2, r4, #3
 8005a70:	4614      	mov	r4, r2
 8005a72:	461d      	mov	r5, r3
 8005a74:	4643      	mov	r3, r8
 8005a76:	18e3      	adds	r3, r4, r3
 8005a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	eb45 0303 	adc.w	r3, r5, r3
 8005a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	008b      	lsls	r3, r1, #2
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aac:	4621      	mov	r1, r4
 8005aae:	008a      	lsls	r2, r1, #2
 8005ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ab4:	f7fa fc4c 	bl	8000350 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4b60      	ldr	r3, [pc, #384]	@ (8005c40 <UART_SetConfig+0x4e4>)
 8005abe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	011c      	lsls	r4, r3, #4
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ad8:	4642      	mov	r2, r8
 8005ada:	464b      	mov	r3, r9
 8005adc:	1891      	adds	r1, r2, r2
 8005ade:	61b9      	str	r1, [r7, #24]
 8005ae0:	415b      	adcs	r3, r3
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae8:	4641      	mov	r1, r8
 8005aea:	1851      	adds	r1, r2, r1
 8005aec:	6139      	str	r1, [r7, #16]
 8005aee:	4649      	mov	r1, r9
 8005af0:	414b      	adcs	r3, r1
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b00:	4659      	mov	r1, fp
 8005b02:	00cb      	lsls	r3, r1, #3
 8005b04:	4651      	mov	r1, sl
 8005b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	00ca      	lsls	r2, r1, #3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	4642      	mov	r2, r8
 8005b16:	189b      	adds	r3, r3, r2
 8005b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	460a      	mov	r2, r1
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b40:	4649      	mov	r1, r9
 8005b42:	008b      	lsls	r3, r1, #2
 8005b44:	4641      	mov	r1, r8
 8005b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	008a      	lsls	r2, r1, #2
 8005b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b52:	f7fa fbfd 	bl	8000350 <__aeabi_uldivmod>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4b38      	ldr	r3, [pc, #224]	@ (8005c40 <UART_SetConfig+0x4e4>)
 8005b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2264      	movs	r2, #100	@ 0x64
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	1acb      	subs	r3, r1, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	@ 0x32
 8005b70:	4a33      	ldr	r2, [pc, #204]	@ (8005c40 <UART_SetConfig+0x4e4>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b7c:	441c      	add	r4, r3
 8005b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b82:	2200      	movs	r2, #0
 8005b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	415b      	adcs	r3, r3
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	1851      	adds	r1, r2, r1
 8005ba0:	6039      	str	r1, [r7, #0]
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	414b      	adcs	r3, r1
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	00cb      	lsls	r3, r1, #3
 8005bb8:	4651      	mov	r1, sl
 8005bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	00ca      	lsls	r2, r1, #3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bce:	464b      	mov	r3, r9
 8005bd0:	460a      	mov	r2, r1
 8005bd2:	eb42 0303 	adc.w	r3, r2, r3
 8005bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	008b      	lsls	r3, r1, #2
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	008a      	lsls	r2, r1, #2
 8005bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c02:	f7fa fba5 	bl	8000350 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <UART_SetConfig+0x4e4>)
 8005c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	2164      	movs	r1, #100	@ 0x64
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	3332      	adds	r3, #50	@ 0x32
 8005c1e:	4a08      	ldr	r2, [pc, #32]	@ (8005c40 <UART_SetConfig+0x4e4>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f003 020f 	and.w	r2, r3, #15
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4422      	add	r2, r4
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c40:	51eb851f 	.word	0x51eb851f

08005c44 <std>:
 8005c44:	2300      	movs	r3, #0
 8005c46:	b510      	push	{r4, lr}
 8005c48:	4604      	mov	r4, r0
 8005c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c52:	6083      	str	r3, [r0, #8]
 8005c54:	8181      	strh	r1, [r0, #12]
 8005c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c58:	81c2      	strh	r2, [r0, #14]
 8005c5a:	6183      	str	r3, [r0, #24]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	2208      	movs	r2, #8
 8005c60:	305c      	adds	r0, #92	@ 0x5c
 8005c62:	f000 f9f9 	bl	8006058 <memset>
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <std+0x58>)
 8005c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <std+0x5c>)
 8005c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <std+0x60>)
 8005c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca8 <std+0x64>)
 8005c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <std+0x68>)
 8005c78:	6224      	str	r4, [r4, #32]
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	d006      	beq.n	8005c8c <std+0x48>
 8005c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c82:	4294      	cmp	r4, r2
 8005c84:	d002      	beq.n	8005c8c <std+0x48>
 8005c86:	33d0      	adds	r3, #208	@ 0xd0
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	d105      	bne.n	8005c98 <std+0x54>
 8005c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	f000 ba58 	b.w	8006148 <__retarget_lock_init_recursive>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08005ea9 	.word	0x08005ea9
 8005ca0:	08005ecb 	.word	0x08005ecb
 8005ca4:	08005f03 	.word	0x08005f03
 8005ca8:	08005f27 	.word	0x08005f27
 8005cac:	20000328 	.word	0x20000328

08005cb0 <stdio_exit_handler>:
 8005cb0:	4a02      	ldr	r2, [pc, #8]	@ (8005cbc <stdio_exit_handler+0xc>)
 8005cb2:	4903      	ldr	r1, [pc, #12]	@ (8005cc0 <stdio_exit_handler+0x10>)
 8005cb4:	4803      	ldr	r0, [pc, #12]	@ (8005cc4 <stdio_exit_handler+0x14>)
 8005cb6:	f000 b869 	b.w	8005d8c <_fwalk_sglue>
 8005cba:	bf00      	nop
 8005cbc:	2000000c 	.word	0x2000000c
 8005cc0:	080069e9 	.word	0x080069e9
 8005cc4:	2000001c 	.word	0x2000001c

08005cc8 <cleanup_stdio>:
 8005cc8:	6841      	ldr	r1, [r0, #4]
 8005cca:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <cleanup_stdio+0x34>)
 8005ccc:	4299      	cmp	r1, r3
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	d001      	beq.n	8005cd8 <cleanup_stdio+0x10>
 8005cd4:	f000 fe88 	bl	80069e8 <_fflush_r>
 8005cd8:	68a1      	ldr	r1, [r4, #8]
 8005cda:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <cleanup_stdio+0x38>)
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d002      	beq.n	8005ce6 <cleanup_stdio+0x1e>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fe81 	bl	80069e8 <_fflush_r>
 8005ce6:	68e1      	ldr	r1, [r4, #12]
 8005ce8:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <cleanup_stdio+0x3c>)
 8005cea:	4299      	cmp	r1, r3
 8005cec:	d004      	beq.n	8005cf8 <cleanup_stdio+0x30>
 8005cee:	4620      	mov	r0, r4
 8005cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf4:	f000 be78 	b.w	80069e8 <_fflush_r>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000328 	.word	0x20000328
 8005d00:	20000390 	.word	0x20000390
 8005d04:	200003f8 	.word	0x200003f8

08005d08 <global_stdio_init.part.0>:
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <global_stdio_init.part.0+0x30>)
 8005d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d3c <global_stdio_init.part.0+0x34>)
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d40 <global_stdio_init.part.0+0x38>)
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	4620      	mov	r0, r4
 8005d14:	2200      	movs	r2, #0
 8005d16:	2104      	movs	r1, #4
 8005d18:	f7ff ff94 	bl	8005c44 <std>
 8005d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d20:	2201      	movs	r2, #1
 8005d22:	2109      	movs	r1, #9
 8005d24:	f7ff ff8e 	bl	8005c44 <std>
 8005d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d32:	2112      	movs	r1, #18
 8005d34:	f7ff bf86 	b.w	8005c44 <std>
 8005d38:	20000460 	.word	0x20000460
 8005d3c:	20000328 	.word	0x20000328
 8005d40:	08005cb1 	.word	0x08005cb1

08005d44 <__sfp_lock_acquire>:
 8005d44:	4801      	ldr	r0, [pc, #4]	@ (8005d4c <__sfp_lock_acquire+0x8>)
 8005d46:	f000 ba00 	b.w	800614a <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20000469 	.word	0x20000469

08005d50 <__sfp_lock_release>:
 8005d50:	4801      	ldr	r0, [pc, #4]	@ (8005d58 <__sfp_lock_release+0x8>)
 8005d52:	f000 b9fb 	b.w	800614c <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	20000469 	.word	0x20000469

08005d5c <__sinit>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	f7ff fff0 	bl	8005d44 <__sfp_lock_acquire>
 8005d64:	6a23      	ldr	r3, [r4, #32]
 8005d66:	b11b      	cbz	r3, 8005d70 <__sinit+0x14>
 8005d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6c:	f7ff bff0 	b.w	8005d50 <__sfp_lock_release>
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <__sinit+0x28>)
 8005d72:	6223      	str	r3, [r4, #32]
 8005d74:	4b04      	ldr	r3, [pc, #16]	@ (8005d88 <__sinit+0x2c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f5      	bne.n	8005d68 <__sinit+0xc>
 8005d7c:	f7ff ffc4 	bl	8005d08 <global_stdio_init.part.0>
 8005d80:	e7f2      	b.n	8005d68 <__sinit+0xc>
 8005d82:	bf00      	nop
 8005d84:	08005cc9 	.word	0x08005cc9
 8005d88:	20000460 	.word	0x20000460

08005d8c <_fwalk_sglue>:
 8005d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	4607      	mov	r7, r0
 8005d92:	4688      	mov	r8, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	2600      	movs	r6, #0
 8005d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005da0:	d505      	bpl.n	8005dae <_fwalk_sglue+0x22>
 8005da2:	6824      	ldr	r4, [r4, #0]
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d1f7      	bne.n	8005d98 <_fwalk_sglue+0xc>
 8005da8:	4630      	mov	r0, r6
 8005daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d907      	bls.n	8005dc4 <_fwalk_sglue+0x38>
 8005db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005db8:	3301      	adds	r3, #1
 8005dba:	d003      	beq.n	8005dc4 <_fwalk_sglue+0x38>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c0      	blx	r8
 8005dc2:	4306      	orrs	r6, r0
 8005dc4:	3568      	adds	r5, #104	@ 0x68
 8005dc6:	e7e9      	b.n	8005d9c <_fwalk_sglue+0x10>

08005dc8 <iprintf>:
 8005dc8:	b40f      	push	{r0, r1, r2, r3}
 8005dca:	b507      	push	{r0, r1, r2, lr}
 8005dcc:	4906      	ldr	r1, [pc, #24]	@ (8005de8 <iprintf+0x20>)
 8005dce:	ab04      	add	r3, sp, #16
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd6:	6881      	ldr	r1, [r0, #8]
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	f000 fadb 	bl	8006394 <_vfiprintf_r>
 8005dde:	b003      	add	sp, #12
 8005de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr
 8005de8:	20000018 	.word	0x20000018

08005dec <_puts_r>:
 8005dec:	6a03      	ldr	r3, [r0, #32]
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	6884      	ldr	r4, [r0, #8]
 8005df2:	4605      	mov	r5, r0
 8005df4:	460e      	mov	r6, r1
 8005df6:	b90b      	cbnz	r3, 8005dfc <_puts_r+0x10>
 8005df8:	f7ff ffb0 	bl	8005d5c <__sinit>
 8005dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dfe:	07db      	lsls	r3, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_puts_r+0x22>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	0598      	lsls	r0, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_puts_r+0x22>
 8005e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e0a:	f000 f99e 	bl	800614a <__retarget_lock_acquire_recursive>
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	0719      	lsls	r1, r3, #28
 8005e12:	d502      	bpl.n	8005e1a <_puts_r+0x2e>
 8005e14:	6923      	ldr	r3, [r4, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d135      	bne.n	8005e86 <_puts_r+0x9a>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 f8c5 	bl	8005fac <__swsetup_r>
 8005e22:	b380      	cbz	r0, 8005e86 <_puts_r+0x9a>
 8005e24:	f04f 35ff 	mov.w	r5, #4294967295
 8005e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e2a:	07da      	lsls	r2, r3, #31
 8005e2c:	d405      	bmi.n	8005e3a <_puts_r+0x4e>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	059b      	lsls	r3, r3, #22
 8005e32:	d402      	bmi.n	8005e3a <_puts_r+0x4e>
 8005e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e36:	f000 f989 	bl	800614c <__retarget_lock_release_recursive>
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da04      	bge.n	8005e4c <_puts_r+0x60>
 8005e42:	69a2      	ldr	r2, [r4, #24]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	dc17      	bgt.n	8005e78 <_puts_r+0x8c>
 8005e48:	290a      	cmp	r1, #10
 8005e4a:	d015      	beq.n	8005e78 <_puts_r+0x8c>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	6022      	str	r2, [r4, #0]
 8005e52:	7019      	strb	r1, [r3, #0]
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	d1ed      	bne.n	8005e3e <_puts_r+0x52>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da11      	bge.n	8005e8a <_puts_r+0x9e>
 8005e66:	4622      	mov	r2, r4
 8005e68:	210a      	movs	r1, #10
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f85f 	bl	8005f2e <__swbuf_r>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d0d7      	beq.n	8005e24 <_puts_r+0x38>
 8005e74:	250a      	movs	r5, #10
 8005e76:	e7d7      	b.n	8005e28 <_puts_r+0x3c>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f857 	bl	8005f2e <__swbuf_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d1e7      	bne.n	8005e54 <_puts_r+0x68>
 8005e84:	e7ce      	b.n	8005e24 <_puts_r+0x38>
 8005e86:	3e01      	subs	r6, #1
 8005e88:	e7e4      	b.n	8005e54 <_puts_r+0x68>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	220a      	movs	r2, #10
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e7ee      	b.n	8005e74 <_puts_r+0x88>
	...

08005e98 <puts>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	@ (8005ea4 <puts+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f7ff bfa5 	b.w	8005dec <_puts_r>
 8005ea2:	bf00      	nop
 8005ea4:	20000018 	.word	0x20000018

08005ea8 <__sread>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	f000 f8fc 	bl	80060ac <_read_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	bfab      	itete	ge
 8005eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eba:	89a3      	ldrhlt	r3, [r4, #12]
 8005ebc:	181b      	addge	r3, r3, r0
 8005ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ec2:	bfac      	ite	ge
 8005ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ec6:	81a3      	strhlt	r3, [r4, #12]
 8005ec8:	bd10      	pop	{r4, pc}

08005eca <__swrite>:
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	461f      	mov	r7, r3
 8005ed0:	898b      	ldrh	r3, [r1, #12]
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4616      	mov	r6, r2
 8005eda:	d505      	bpl.n	8005ee8 <__swrite+0x1e>
 8005edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f000 f8d0 	bl	8006088 <_lseek_r>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	4628      	mov	r0, r5
 8005efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005efe:	f000 b8e7 	b.w	80060d0 <_write_r>

08005f02 <__sseek>:
 8005f02:	b510      	push	{r4, lr}
 8005f04:	460c      	mov	r4, r1
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 f8bd 	bl	8006088 <_lseek_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	bf15      	itete	ne
 8005f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f1e:	81a3      	strheq	r3, [r4, #12]
 8005f20:	bf18      	it	ne
 8005f22:	81a3      	strhne	r3, [r4, #12]
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <__sclose>:
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	f000 b89d 	b.w	8006068 <_close_r>

08005f2e <__swbuf_r>:
 8005f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f30:	460e      	mov	r6, r1
 8005f32:	4614      	mov	r4, r2
 8005f34:	4605      	mov	r5, r0
 8005f36:	b118      	cbz	r0, 8005f40 <__swbuf_r+0x12>
 8005f38:	6a03      	ldr	r3, [r0, #32]
 8005f3a:	b90b      	cbnz	r3, 8005f40 <__swbuf_r+0x12>
 8005f3c:	f7ff ff0e 	bl	8005d5c <__sinit>
 8005f40:	69a3      	ldr	r3, [r4, #24]
 8005f42:	60a3      	str	r3, [r4, #8]
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	071a      	lsls	r2, r3, #28
 8005f48:	d501      	bpl.n	8005f4e <__swbuf_r+0x20>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	b943      	cbnz	r3, 8005f60 <__swbuf_r+0x32>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f82b 	bl	8005fac <__swsetup_r>
 8005f56:	b118      	cbz	r0, 8005f60 <__swbuf_r+0x32>
 8005f58:	f04f 37ff 	mov.w	r7, #4294967295
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	6922      	ldr	r2, [r4, #16]
 8005f64:	1a98      	subs	r0, r3, r2
 8005f66:	6963      	ldr	r3, [r4, #20]
 8005f68:	b2f6      	uxtb	r6, r6
 8005f6a:	4283      	cmp	r3, r0
 8005f6c:	4637      	mov	r7, r6
 8005f6e:	dc05      	bgt.n	8005f7c <__swbuf_r+0x4e>
 8005f70:	4621      	mov	r1, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fd38 	bl	80069e8 <_fflush_r>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d1ed      	bne.n	8005f58 <__swbuf_r+0x2a>
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60a3      	str	r3, [r4, #8]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	6022      	str	r2, [r4, #0]
 8005f88:	701e      	strb	r6, [r3, #0]
 8005f8a:	6962      	ldr	r2, [r4, #20]
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d004      	beq.n	8005f9c <__swbuf_r+0x6e>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	07db      	lsls	r3, r3, #31
 8005f96:	d5e1      	bpl.n	8005f5c <__swbuf_r+0x2e>
 8005f98:	2e0a      	cmp	r6, #10
 8005f9a:	d1df      	bne.n	8005f5c <__swbuf_r+0x2e>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fd22 	bl	80069e8 <_fflush_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0d9      	beq.n	8005f5c <__swbuf_r+0x2e>
 8005fa8:	e7d6      	b.n	8005f58 <__swbuf_r+0x2a>
	...

08005fac <__swsetup_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4b29      	ldr	r3, [pc, #164]	@ (8006054 <__swsetup_r+0xa8>)
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	b118      	cbz	r0, 8005fc0 <__swsetup_r+0x14>
 8005fb8:	6a03      	ldr	r3, [r0, #32]
 8005fba:	b90b      	cbnz	r3, 8005fc0 <__swsetup_r+0x14>
 8005fbc:	f7ff fece 	bl	8005d5c <__sinit>
 8005fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc4:	0719      	lsls	r1, r3, #28
 8005fc6:	d422      	bmi.n	800600e <__swsetup_r+0x62>
 8005fc8:	06da      	lsls	r2, r3, #27
 8005fca:	d407      	bmi.n	8005fdc <__swsetup_r+0x30>
 8005fcc:	2209      	movs	r2, #9
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fda:	e033      	b.n	8006044 <__swsetup_r+0x98>
 8005fdc:	0758      	lsls	r0, r3, #29
 8005fde:	d512      	bpl.n	8006006 <__swsetup_r+0x5a>
 8005fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fe2:	b141      	cbz	r1, 8005ff6 <__swsetup_r+0x4a>
 8005fe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	d002      	beq.n	8005ff2 <__swsetup_r+0x46>
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f8af 	bl	8006150 <_free_r>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	2300      	movs	r3, #0
 8006000:	6063      	str	r3, [r4, #4]
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	b94b      	cbnz	r3, 8006026 <__swsetup_r+0x7a>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800601c:	d003      	beq.n	8006026 <__swsetup_r+0x7a>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 fd2f 	bl	8006a84 <__smakebuf_r>
 8006026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602a:	f013 0201 	ands.w	r2, r3, #1
 800602e:	d00a      	beq.n	8006046 <__swsetup_r+0x9a>
 8006030:	2200      	movs	r2, #0
 8006032:	60a2      	str	r2, [r4, #8]
 8006034:	6962      	ldr	r2, [r4, #20]
 8006036:	4252      	negs	r2, r2
 8006038:	61a2      	str	r2, [r4, #24]
 800603a:	6922      	ldr	r2, [r4, #16]
 800603c:	b942      	cbnz	r2, 8006050 <__swsetup_r+0xa4>
 800603e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006042:	d1c5      	bne.n	8005fd0 <__swsetup_r+0x24>
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	0799      	lsls	r1, r3, #30
 8006048:	bf58      	it	pl
 800604a:	6962      	ldrpl	r2, [r4, #20]
 800604c:	60a2      	str	r2, [r4, #8]
 800604e:	e7f4      	b.n	800603a <__swsetup_r+0x8e>
 8006050:	2000      	movs	r0, #0
 8006052:	e7f7      	b.n	8006044 <__swsetup_r+0x98>
 8006054:	20000018 	.word	0x20000018

08006058 <memset>:
 8006058:	4402      	add	r2, r0
 800605a:	4603      	mov	r3, r0
 800605c:	4293      	cmp	r3, r2
 800605e:	d100      	bne.n	8006062 <memset+0xa>
 8006060:	4770      	bx	lr
 8006062:	f803 1b01 	strb.w	r1, [r3], #1
 8006066:	e7f9      	b.n	800605c <memset+0x4>

08006068 <_close_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d06      	ldr	r5, [pc, #24]	@ (8006084 <_close_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	f7fb fbcd 	bl	8001812 <_close>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_close_r+0x1a>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_close_r+0x1a>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000464 	.word	0x20000464

08006088 <_lseek_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	@ (80060a8 <_lseek_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fb fbe2 	bl	8001860 <_lseek>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_lseek_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_lseek_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000464 	.word	0x20000464

080060ac <_read_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	@ (80060cc <_read_r+0x20>)
 80060b0:	4604      	mov	r4, r0
 80060b2:	4608      	mov	r0, r1
 80060b4:	4611      	mov	r1, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fb fb70 	bl	80017a0 <_read>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_read_r+0x1e>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_read_r+0x1e>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000464 	.word	0x20000464

080060d0 <_write_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	@ (80060f0 <_write_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fb fb7b 	bl	80017da <_write>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_write_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_write_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000464 	.word	0x20000464

080060f4 <__errno>:
 80060f4:	4b01      	ldr	r3, [pc, #4]	@ (80060fc <__errno+0x8>)
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000018 	.word	0x20000018

08006100 <__libc_init_array>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4d0d      	ldr	r5, [pc, #52]	@ (8006138 <__libc_init_array+0x38>)
 8006104:	4c0d      	ldr	r4, [pc, #52]	@ (800613c <__libc_init_array+0x3c>)
 8006106:	1b64      	subs	r4, r4, r5
 8006108:	10a4      	asrs	r4, r4, #2
 800610a:	2600      	movs	r6, #0
 800610c:	42a6      	cmp	r6, r4
 800610e:	d109      	bne.n	8006124 <__libc_init_array+0x24>
 8006110:	4d0b      	ldr	r5, [pc, #44]	@ (8006140 <__libc_init_array+0x40>)
 8006112:	4c0c      	ldr	r4, [pc, #48]	@ (8006144 <__libc_init_array+0x44>)
 8006114:	f000 fd24 	bl	8006b60 <_init>
 8006118:	1b64      	subs	r4, r4, r5
 800611a:	10a4      	asrs	r4, r4, #2
 800611c:	2600      	movs	r6, #0
 800611e:	42a6      	cmp	r6, r4
 8006120:	d105      	bne.n	800612e <__libc_init_array+0x2e>
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	f855 3b04 	ldr.w	r3, [r5], #4
 8006128:	4798      	blx	r3
 800612a:	3601      	adds	r6, #1
 800612c:	e7ee      	b.n	800610c <__libc_init_array+0xc>
 800612e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006132:	4798      	blx	r3
 8006134:	3601      	adds	r6, #1
 8006136:	e7f2      	b.n	800611e <__libc_init_array+0x1e>
 8006138:	08006cb8 	.word	0x08006cb8
 800613c:	08006cb8 	.word	0x08006cb8
 8006140:	08006cb8 	.word	0x08006cb8
 8006144:	08006cbc 	.word	0x08006cbc

08006148 <__retarget_lock_init_recursive>:
 8006148:	4770      	bx	lr

0800614a <__retarget_lock_acquire_recursive>:
 800614a:	4770      	bx	lr

0800614c <__retarget_lock_release_recursive>:
 800614c:	4770      	bx	lr
	...

08006150 <_free_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	2900      	cmp	r1, #0
 8006156:	d041      	beq.n	80061dc <_free_r+0x8c>
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f0c      	subs	r4, r1, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfb8      	it	lt
 8006162:	18e4      	addlt	r4, r4, r3
 8006164:	f000 f8e0 	bl	8006328 <__malloc_lock>
 8006168:	4a1d      	ldr	r2, [pc, #116]	@ (80061e0 <_free_r+0x90>)
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	b933      	cbnz	r3, 800617c <_free_r+0x2c>
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	6014      	str	r4, [r2, #0]
 8006172:	4628      	mov	r0, r5
 8006174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006178:	f000 b8dc 	b.w	8006334 <__malloc_unlock>
 800617c:	42a3      	cmp	r3, r4
 800617e:	d908      	bls.n	8006192 <_free_r+0x42>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	1821      	adds	r1, r4, r0
 8006184:	428b      	cmp	r3, r1
 8006186:	bf01      	itttt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	1809      	addeq	r1, r1, r0
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	e7ed      	b.n	800616e <_free_r+0x1e>
 8006192:	461a      	mov	r2, r3
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b10b      	cbz	r3, 800619c <_free_r+0x4c>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d9fa      	bls.n	8006192 <_free_r+0x42>
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	1850      	adds	r0, r2, r1
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	d10b      	bne.n	80061bc <_free_r+0x6c>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	4401      	add	r1, r0
 80061a8:	1850      	adds	r0, r2, r1
 80061aa:	4283      	cmp	r3, r0
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	d1e0      	bne.n	8006172 <_free_r+0x22>
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	6053      	str	r3, [r2, #4]
 80061b6:	4408      	add	r0, r1
 80061b8:	6010      	str	r0, [r2, #0]
 80061ba:	e7da      	b.n	8006172 <_free_r+0x22>
 80061bc:	d902      	bls.n	80061c4 <_free_r+0x74>
 80061be:	230c      	movs	r3, #12
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	e7d6      	b.n	8006172 <_free_r+0x22>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	1821      	adds	r1, r4, r0
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf04      	itt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	bf04      	itt	eq
 80061d4:	1809      	addeq	r1, r1, r0
 80061d6:	6021      	streq	r1, [r4, #0]
 80061d8:	6054      	str	r4, [r2, #4]
 80061da:	e7ca      	b.n	8006172 <_free_r+0x22>
 80061dc:	bd38      	pop	{r3, r4, r5, pc}
 80061de:	bf00      	nop
 80061e0:	20000470 	.word	0x20000470

080061e4 <sbrk_aligned>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006224 <sbrk_aligned+0x40>)
 80061e8:	460c      	mov	r4, r1
 80061ea:	6831      	ldr	r1, [r6, #0]
 80061ec:	4605      	mov	r5, r0
 80061ee:	b911      	cbnz	r1, 80061f6 <sbrk_aligned+0x12>
 80061f0:	f000 fca6 	bl	8006b40 <_sbrk_r>
 80061f4:	6030      	str	r0, [r6, #0]
 80061f6:	4621      	mov	r1, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	f000 fca1 	bl	8006b40 <_sbrk_r>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d103      	bne.n	800620a <sbrk_aligned+0x26>
 8006202:	f04f 34ff 	mov.w	r4, #4294967295
 8006206:	4620      	mov	r0, r4
 8006208:	bd70      	pop	{r4, r5, r6, pc}
 800620a:	1cc4      	adds	r4, r0, #3
 800620c:	f024 0403 	bic.w	r4, r4, #3
 8006210:	42a0      	cmp	r0, r4
 8006212:	d0f8      	beq.n	8006206 <sbrk_aligned+0x22>
 8006214:	1a21      	subs	r1, r4, r0
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fc92 	bl	8006b40 <_sbrk_r>
 800621c:	3001      	adds	r0, #1
 800621e:	d1f2      	bne.n	8006206 <sbrk_aligned+0x22>
 8006220:	e7ef      	b.n	8006202 <sbrk_aligned+0x1e>
 8006222:	bf00      	nop
 8006224:	2000046c 	.word	0x2000046c

08006228 <_malloc_r>:
 8006228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800622c:	1ccd      	adds	r5, r1, #3
 800622e:	f025 0503 	bic.w	r5, r5, #3
 8006232:	3508      	adds	r5, #8
 8006234:	2d0c      	cmp	r5, #12
 8006236:	bf38      	it	cc
 8006238:	250c      	movcc	r5, #12
 800623a:	2d00      	cmp	r5, #0
 800623c:	4606      	mov	r6, r0
 800623e:	db01      	blt.n	8006244 <_malloc_r+0x1c>
 8006240:	42a9      	cmp	r1, r5
 8006242:	d904      	bls.n	800624e <_malloc_r+0x26>
 8006244:	230c      	movs	r3, #12
 8006246:	6033      	str	r3, [r6, #0]
 8006248:	2000      	movs	r0, #0
 800624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006324 <_malloc_r+0xfc>
 8006252:	f000 f869 	bl	8006328 <__malloc_lock>
 8006256:	f8d8 3000 	ldr.w	r3, [r8]
 800625a:	461c      	mov	r4, r3
 800625c:	bb44      	cbnz	r4, 80062b0 <_malloc_r+0x88>
 800625e:	4629      	mov	r1, r5
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff ffbf 	bl	80061e4 <sbrk_aligned>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	4604      	mov	r4, r0
 800626a:	d158      	bne.n	800631e <_malloc_r+0xf6>
 800626c:	f8d8 4000 	ldr.w	r4, [r8]
 8006270:	4627      	mov	r7, r4
 8006272:	2f00      	cmp	r7, #0
 8006274:	d143      	bne.n	80062fe <_malloc_r+0xd6>
 8006276:	2c00      	cmp	r4, #0
 8006278:	d04b      	beq.n	8006312 <_malloc_r+0xea>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4639      	mov	r1, r7
 800627e:	4630      	mov	r0, r6
 8006280:	eb04 0903 	add.w	r9, r4, r3
 8006284:	f000 fc5c 	bl	8006b40 <_sbrk_r>
 8006288:	4581      	cmp	r9, r0
 800628a:	d142      	bne.n	8006312 <_malloc_r+0xea>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	1a6d      	subs	r5, r5, r1
 8006290:	4629      	mov	r1, r5
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ffa6 	bl	80061e4 <sbrk_aligned>
 8006298:	3001      	adds	r0, #1
 800629a:	d03a      	beq.n	8006312 <_malloc_r+0xea>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	442b      	add	r3, r5
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	f8d8 3000 	ldr.w	r3, [r8]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	bb62      	cbnz	r2, 8006304 <_malloc_r+0xdc>
 80062aa:	f8c8 7000 	str.w	r7, [r8]
 80062ae:	e00f      	b.n	80062d0 <_malloc_r+0xa8>
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	1b52      	subs	r2, r2, r5
 80062b4:	d420      	bmi.n	80062f8 <_malloc_r+0xd0>
 80062b6:	2a0b      	cmp	r2, #11
 80062b8:	d917      	bls.n	80062ea <_malloc_r+0xc2>
 80062ba:	1961      	adds	r1, r4, r5
 80062bc:	42a3      	cmp	r3, r4
 80062be:	6025      	str	r5, [r4, #0]
 80062c0:	bf18      	it	ne
 80062c2:	6059      	strne	r1, [r3, #4]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	bf08      	it	eq
 80062c8:	f8c8 1000 	streq.w	r1, [r8]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 f82f 	bl	8006334 <__malloc_unlock>
 80062d6:	f104 000b 	add.w	r0, r4, #11
 80062da:	1d23      	adds	r3, r4, #4
 80062dc:	f020 0007 	bic.w	r0, r0, #7
 80062e0:	1ac2      	subs	r2, r0, r3
 80062e2:	bf1c      	itt	ne
 80062e4:	1a1b      	subne	r3, r3, r0
 80062e6:	50a3      	strne	r3, [r4, r2]
 80062e8:	e7af      	b.n	800624a <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	f8c8 2000 	streq.w	r2, [r8]
 80062f4:	605a      	strne	r2, [r3, #4]
 80062f6:	e7eb      	b.n	80062d0 <_malloc_r+0xa8>
 80062f8:	4623      	mov	r3, r4
 80062fa:	6864      	ldr	r4, [r4, #4]
 80062fc:	e7ae      	b.n	800625c <_malloc_r+0x34>
 80062fe:	463c      	mov	r4, r7
 8006300:	687f      	ldr	r7, [r7, #4]
 8006302:	e7b6      	b.n	8006272 <_malloc_r+0x4a>
 8006304:	461a      	mov	r2, r3
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	42a3      	cmp	r3, r4
 800630a:	d1fb      	bne.n	8006304 <_malloc_r+0xdc>
 800630c:	2300      	movs	r3, #0
 800630e:	6053      	str	r3, [r2, #4]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa8>
 8006312:	230c      	movs	r3, #12
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	4630      	mov	r0, r6
 8006318:	f000 f80c 	bl	8006334 <__malloc_unlock>
 800631c:	e794      	b.n	8006248 <_malloc_r+0x20>
 800631e:	6005      	str	r5, [r0, #0]
 8006320:	e7d6      	b.n	80062d0 <_malloc_r+0xa8>
 8006322:	bf00      	nop
 8006324:	20000470 	.word	0x20000470

08006328 <__malloc_lock>:
 8006328:	4801      	ldr	r0, [pc, #4]	@ (8006330 <__malloc_lock+0x8>)
 800632a:	f7ff bf0e 	b.w	800614a <__retarget_lock_acquire_recursive>
 800632e:	bf00      	nop
 8006330:	20000468 	.word	0x20000468

08006334 <__malloc_unlock>:
 8006334:	4801      	ldr	r0, [pc, #4]	@ (800633c <__malloc_unlock+0x8>)
 8006336:	f7ff bf09 	b.w	800614c <__retarget_lock_release_recursive>
 800633a:	bf00      	nop
 800633c:	20000468 	.word	0x20000468

08006340 <__sfputc_r>:
 8006340:	6893      	ldr	r3, [r2, #8]
 8006342:	3b01      	subs	r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	b410      	push	{r4}
 8006348:	6093      	str	r3, [r2, #8]
 800634a:	da08      	bge.n	800635e <__sfputc_r+0x1e>
 800634c:	6994      	ldr	r4, [r2, #24]
 800634e:	42a3      	cmp	r3, r4
 8006350:	db01      	blt.n	8006356 <__sfputc_r+0x16>
 8006352:	290a      	cmp	r1, #10
 8006354:	d103      	bne.n	800635e <__sfputc_r+0x1e>
 8006356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800635a:	f7ff bde8 	b.w	8005f2e <__swbuf_r>
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	1c58      	adds	r0, r3, #1
 8006362:	6010      	str	r0, [r2, #0]
 8006364:	7019      	strb	r1, [r3, #0]
 8006366:	4608      	mov	r0, r1
 8006368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800636c:	4770      	bx	lr

0800636e <__sfputs_r>:
 800636e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	4614      	mov	r4, r2
 8006376:	18d5      	adds	r5, r2, r3
 8006378:	42ac      	cmp	r4, r5
 800637a:	d101      	bne.n	8006380 <__sfputs_r+0x12>
 800637c:	2000      	movs	r0, #0
 800637e:	e007      	b.n	8006390 <__sfputs_r+0x22>
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	463a      	mov	r2, r7
 8006386:	4630      	mov	r0, r6
 8006388:	f7ff ffda 	bl	8006340 <__sfputc_r>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d1f3      	bne.n	8006378 <__sfputs_r+0xa>
 8006390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006394 <_vfiprintf_r>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	460d      	mov	r5, r1
 800639a:	b09d      	sub	sp, #116	@ 0x74
 800639c:	4614      	mov	r4, r2
 800639e:	4698      	mov	r8, r3
 80063a0:	4606      	mov	r6, r0
 80063a2:	b118      	cbz	r0, 80063ac <_vfiprintf_r+0x18>
 80063a4:	6a03      	ldr	r3, [r0, #32]
 80063a6:	b90b      	cbnz	r3, 80063ac <_vfiprintf_r+0x18>
 80063a8:	f7ff fcd8 	bl	8005d5c <__sinit>
 80063ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063ae:	07d9      	lsls	r1, r3, #31
 80063b0:	d405      	bmi.n	80063be <_vfiprintf_r+0x2a>
 80063b2:	89ab      	ldrh	r3, [r5, #12]
 80063b4:	059a      	lsls	r2, r3, #22
 80063b6:	d402      	bmi.n	80063be <_vfiprintf_r+0x2a>
 80063b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ba:	f7ff fec6 	bl	800614a <__retarget_lock_acquire_recursive>
 80063be:	89ab      	ldrh	r3, [r5, #12]
 80063c0:	071b      	lsls	r3, r3, #28
 80063c2:	d501      	bpl.n	80063c8 <_vfiprintf_r+0x34>
 80063c4:	692b      	ldr	r3, [r5, #16]
 80063c6:	b99b      	cbnz	r3, 80063f0 <_vfiprintf_r+0x5c>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff fdee 	bl	8005fac <__swsetup_r>
 80063d0:	b170      	cbz	r0, 80063f0 <_vfiprintf_r+0x5c>
 80063d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063d4:	07dc      	lsls	r4, r3, #31
 80063d6:	d504      	bpl.n	80063e2 <_vfiprintf_r+0x4e>
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	b01d      	add	sp, #116	@ 0x74
 80063de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e2:	89ab      	ldrh	r3, [r5, #12]
 80063e4:	0598      	lsls	r0, r3, #22
 80063e6:	d4f7      	bmi.n	80063d8 <_vfiprintf_r+0x44>
 80063e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ea:	f7ff feaf 	bl	800614c <__retarget_lock_release_recursive>
 80063ee:	e7f3      	b.n	80063d8 <_vfiprintf_r+0x44>
 80063f0:	2300      	movs	r3, #0
 80063f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f4:	2320      	movs	r3, #32
 80063f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80063fe:	2330      	movs	r3, #48	@ 0x30
 8006400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065b0 <_vfiprintf_r+0x21c>
 8006404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006408:	f04f 0901 	mov.w	r9, #1
 800640c:	4623      	mov	r3, r4
 800640e:	469a      	mov	sl, r3
 8006410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006414:	b10a      	cbz	r2, 800641a <_vfiprintf_r+0x86>
 8006416:	2a25      	cmp	r2, #37	@ 0x25
 8006418:	d1f9      	bne.n	800640e <_vfiprintf_r+0x7a>
 800641a:	ebba 0b04 	subs.w	fp, sl, r4
 800641e:	d00b      	beq.n	8006438 <_vfiprintf_r+0xa4>
 8006420:	465b      	mov	r3, fp
 8006422:	4622      	mov	r2, r4
 8006424:	4629      	mov	r1, r5
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffa1 	bl	800636e <__sfputs_r>
 800642c:	3001      	adds	r0, #1
 800642e:	f000 80a7 	beq.w	8006580 <_vfiprintf_r+0x1ec>
 8006432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006434:	445a      	add	r2, fp
 8006436:	9209      	str	r2, [sp, #36]	@ 0x24
 8006438:	f89a 3000 	ldrb.w	r3, [sl]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 809f 	beq.w	8006580 <_vfiprintf_r+0x1ec>
 8006442:	2300      	movs	r3, #0
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644c:	f10a 0a01 	add.w	sl, sl, #1
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	9307      	str	r3, [sp, #28]
 8006454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006458:	931a      	str	r3, [sp, #104]	@ 0x68
 800645a:	4654      	mov	r4, sl
 800645c:	2205      	movs	r2, #5
 800645e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006462:	4853      	ldr	r0, [pc, #332]	@ (80065b0 <_vfiprintf_r+0x21c>)
 8006464:	f7f9 fed4 	bl	8000210 <memchr>
 8006468:	9a04      	ldr	r2, [sp, #16]
 800646a:	b9d8      	cbnz	r0, 80064a4 <_vfiprintf_r+0x110>
 800646c:	06d1      	lsls	r1, r2, #27
 800646e:	bf44      	itt	mi
 8006470:	2320      	movmi	r3, #32
 8006472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006476:	0713      	lsls	r3, r2, #28
 8006478:	bf44      	itt	mi
 800647a:	232b      	movmi	r3, #43	@ 0x2b
 800647c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006480:	f89a 3000 	ldrb.w	r3, [sl]
 8006484:	2b2a      	cmp	r3, #42	@ 0x2a
 8006486:	d015      	beq.n	80064b4 <_vfiprintf_r+0x120>
 8006488:	9a07      	ldr	r2, [sp, #28]
 800648a:	4654      	mov	r4, sl
 800648c:	2000      	movs	r0, #0
 800648e:	f04f 0c0a 	mov.w	ip, #10
 8006492:	4621      	mov	r1, r4
 8006494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006498:	3b30      	subs	r3, #48	@ 0x30
 800649a:	2b09      	cmp	r3, #9
 800649c:	d94b      	bls.n	8006536 <_vfiprintf_r+0x1a2>
 800649e:	b1b0      	cbz	r0, 80064ce <_vfiprintf_r+0x13a>
 80064a0:	9207      	str	r2, [sp, #28]
 80064a2:	e014      	b.n	80064ce <_vfiprintf_r+0x13a>
 80064a4:	eba0 0308 	sub.w	r3, r0, r8
 80064a8:	fa09 f303 	lsl.w	r3, r9, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	46a2      	mov	sl, r4
 80064b2:	e7d2      	b.n	800645a <_vfiprintf_r+0xc6>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	1d19      	adds	r1, r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	9103      	str	r1, [sp, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bfbb      	ittet	lt
 80064c0:	425b      	neglt	r3, r3
 80064c2:	f042 0202 	orrlt.w	r2, r2, #2
 80064c6:	9307      	strge	r3, [sp, #28]
 80064c8:	9307      	strlt	r3, [sp, #28]
 80064ca:	bfb8      	it	lt
 80064cc:	9204      	strlt	r2, [sp, #16]
 80064ce:	7823      	ldrb	r3, [r4, #0]
 80064d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d2:	d10a      	bne.n	80064ea <_vfiprintf_r+0x156>
 80064d4:	7863      	ldrb	r3, [r4, #1]
 80064d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064d8:	d132      	bne.n	8006540 <_vfiprintf_r+0x1ac>
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	9203      	str	r2, [sp, #12]
 80064e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064e6:	3402      	adds	r4, #2
 80064e8:	9305      	str	r3, [sp, #20]
 80064ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065c0 <_vfiprintf_r+0x22c>
 80064ee:	7821      	ldrb	r1, [r4, #0]
 80064f0:	2203      	movs	r2, #3
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7f9 fe8c 	bl	8000210 <memchr>
 80064f8:	b138      	cbz	r0, 800650a <_vfiprintf_r+0x176>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	eba0 000a 	sub.w	r0, r0, sl
 8006500:	2240      	movs	r2, #64	@ 0x40
 8006502:	4082      	lsls	r2, r0
 8006504:	4313      	orrs	r3, r2
 8006506:	3401      	adds	r4, #1
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650e:	4829      	ldr	r0, [pc, #164]	@ (80065b4 <_vfiprintf_r+0x220>)
 8006510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006514:	2206      	movs	r2, #6
 8006516:	f7f9 fe7b 	bl	8000210 <memchr>
 800651a:	2800      	cmp	r0, #0
 800651c:	d03f      	beq.n	800659e <_vfiprintf_r+0x20a>
 800651e:	4b26      	ldr	r3, [pc, #152]	@ (80065b8 <_vfiprintf_r+0x224>)
 8006520:	bb1b      	cbnz	r3, 800656a <_vfiprintf_r+0x1d6>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	3307      	adds	r3, #7
 8006526:	f023 0307 	bic.w	r3, r3, #7
 800652a:	3308      	adds	r3, #8
 800652c:	9303      	str	r3, [sp, #12]
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	443b      	add	r3, r7
 8006532:	9309      	str	r3, [sp, #36]	@ 0x24
 8006534:	e76a      	b.n	800640c <_vfiprintf_r+0x78>
 8006536:	fb0c 3202 	mla	r2, ip, r2, r3
 800653a:	460c      	mov	r4, r1
 800653c:	2001      	movs	r0, #1
 800653e:	e7a8      	b.n	8006492 <_vfiprintf_r+0xfe>
 8006540:	2300      	movs	r3, #0
 8006542:	3401      	adds	r4, #1
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	4619      	mov	r1, r3
 8006548:	f04f 0c0a 	mov.w	ip, #10
 800654c:	4620      	mov	r0, r4
 800654e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006552:	3a30      	subs	r2, #48	@ 0x30
 8006554:	2a09      	cmp	r2, #9
 8006556:	d903      	bls.n	8006560 <_vfiprintf_r+0x1cc>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0c6      	beq.n	80064ea <_vfiprintf_r+0x156>
 800655c:	9105      	str	r1, [sp, #20]
 800655e:	e7c4      	b.n	80064ea <_vfiprintf_r+0x156>
 8006560:	fb0c 2101 	mla	r1, ip, r1, r2
 8006564:	4604      	mov	r4, r0
 8006566:	2301      	movs	r3, #1
 8006568:	e7f0      	b.n	800654c <_vfiprintf_r+0x1b8>
 800656a:	ab03      	add	r3, sp, #12
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	462a      	mov	r2, r5
 8006570:	4b12      	ldr	r3, [pc, #72]	@ (80065bc <_vfiprintf_r+0x228>)
 8006572:	a904      	add	r1, sp, #16
 8006574:	4630      	mov	r0, r6
 8006576:	f3af 8000 	nop.w
 800657a:	4607      	mov	r7, r0
 800657c:	1c78      	adds	r0, r7, #1
 800657e:	d1d6      	bne.n	800652e <_vfiprintf_r+0x19a>
 8006580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006582:	07d9      	lsls	r1, r3, #31
 8006584:	d405      	bmi.n	8006592 <_vfiprintf_r+0x1fe>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	059a      	lsls	r2, r3, #22
 800658a:	d402      	bmi.n	8006592 <_vfiprintf_r+0x1fe>
 800658c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800658e:	f7ff fddd 	bl	800614c <__retarget_lock_release_recursive>
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	065b      	lsls	r3, r3, #25
 8006596:	f53f af1f 	bmi.w	80063d8 <_vfiprintf_r+0x44>
 800659a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800659c:	e71e      	b.n	80063dc <_vfiprintf_r+0x48>
 800659e:	ab03      	add	r3, sp, #12
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	462a      	mov	r2, r5
 80065a4:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <_vfiprintf_r+0x228>)
 80065a6:	a904      	add	r1, sp, #16
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f879 	bl	80066a0 <_printf_i>
 80065ae:	e7e4      	b.n	800657a <_vfiprintf_r+0x1e6>
 80065b0:	08006c7c 	.word	0x08006c7c
 80065b4:	08006c86 	.word	0x08006c86
 80065b8:	00000000 	.word	0x00000000
 80065bc:	0800636f 	.word	0x0800636f
 80065c0:	08006c82 	.word	0x08006c82

080065c4 <_printf_common>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4616      	mov	r6, r2
 80065ca:	4698      	mov	r8, r3
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	690b      	ldr	r3, [r1, #16]
 80065d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	bfb8      	it	lt
 80065d8:	4613      	movlt	r3, r2
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065e0:	4607      	mov	r7, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b10a      	cbz	r2, 80065ea <_printf_common+0x26>
 80065e6:	3301      	adds	r3, #1
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0699      	lsls	r1, r3, #26
 80065ee:	bf42      	ittt	mi
 80065f0:	6833      	ldrmi	r3, [r6, #0]
 80065f2:	3302      	addmi	r3, #2
 80065f4:	6033      	strmi	r3, [r6, #0]
 80065f6:	6825      	ldr	r5, [r4, #0]
 80065f8:	f015 0506 	ands.w	r5, r5, #6
 80065fc:	d106      	bne.n	800660c <_printf_common+0x48>
 80065fe:	f104 0a19 	add.w	sl, r4, #25
 8006602:	68e3      	ldr	r3, [r4, #12]
 8006604:	6832      	ldr	r2, [r6, #0]
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	42ab      	cmp	r3, r5
 800660a:	dc26      	bgt.n	800665a <_printf_common+0x96>
 800660c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	3b00      	subs	r3, #0
 8006614:	bf18      	it	ne
 8006616:	2301      	movne	r3, #1
 8006618:	0692      	lsls	r2, r2, #26
 800661a:	d42b      	bmi.n	8006674 <_printf_common+0xb0>
 800661c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006620:	4641      	mov	r1, r8
 8006622:	4638      	mov	r0, r7
 8006624:	47c8      	blx	r9
 8006626:	3001      	adds	r0, #1
 8006628:	d01e      	beq.n	8006668 <_printf_common+0xa4>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	f003 0306 	and.w	r3, r3, #6
 8006632:	2b04      	cmp	r3, #4
 8006634:	bf02      	ittt	eq
 8006636:	68e5      	ldreq	r5, [r4, #12]
 8006638:	6833      	ldreq	r3, [r6, #0]
 800663a:	1aed      	subeq	r5, r5, r3
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	bf0c      	ite	eq
 8006640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006644:	2500      	movne	r5, #0
 8006646:	4293      	cmp	r3, r2
 8006648:	bfc4      	itt	gt
 800664a:	1a9b      	subgt	r3, r3, r2
 800664c:	18ed      	addgt	r5, r5, r3
 800664e:	2600      	movs	r6, #0
 8006650:	341a      	adds	r4, #26
 8006652:	42b5      	cmp	r5, r6
 8006654:	d11a      	bne.n	800668c <_printf_common+0xc8>
 8006656:	2000      	movs	r0, #0
 8006658:	e008      	b.n	800666c <_printf_common+0xa8>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4641      	mov	r1, r8
 8006660:	4638      	mov	r0, r7
 8006662:	47c8      	blx	r9
 8006664:	3001      	adds	r0, #1
 8006666:	d103      	bne.n	8006670 <_printf_common+0xac>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	3501      	adds	r5, #1
 8006672:	e7c6      	b.n	8006602 <_printf_common+0x3e>
 8006674:	18e1      	adds	r1, r4, r3
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	2030      	movs	r0, #48	@ 0x30
 800667a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800667e:	4422      	add	r2, r4
 8006680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006688:	3302      	adds	r3, #2
 800668a:	e7c7      	b.n	800661c <_printf_common+0x58>
 800668c:	2301      	movs	r3, #1
 800668e:	4622      	mov	r2, r4
 8006690:	4641      	mov	r1, r8
 8006692:	4638      	mov	r0, r7
 8006694:	47c8      	blx	r9
 8006696:	3001      	adds	r0, #1
 8006698:	d0e6      	beq.n	8006668 <_printf_common+0xa4>
 800669a:	3601      	adds	r6, #1
 800669c:	e7d9      	b.n	8006652 <_printf_common+0x8e>
	...

080066a0 <_printf_i>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	7e0f      	ldrb	r7, [r1, #24]
 80066a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066a8:	2f78      	cmp	r7, #120	@ 0x78
 80066aa:	4691      	mov	r9, r2
 80066ac:	4680      	mov	r8, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	469a      	mov	sl, r3
 80066b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066b6:	d807      	bhi.n	80066c8 <_printf_i+0x28>
 80066b8:	2f62      	cmp	r7, #98	@ 0x62
 80066ba:	d80a      	bhi.n	80066d2 <_printf_i+0x32>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	f000 80d2 	beq.w	8006866 <_printf_i+0x1c6>
 80066c2:	2f58      	cmp	r7, #88	@ 0x58
 80066c4:	f000 80b9 	beq.w	800683a <_printf_i+0x19a>
 80066c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066d0:	e03a      	b.n	8006748 <_printf_i+0xa8>
 80066d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066d6:	2b15      	cmp	r3, #21
 80066d8:	d8f6      	bhi.n	80066c8 <_printf_i+0x28>
 80066da:	a101      	add	r1, pc, #4	@ (adr r1, 80066e0 <_printf_i+0x40>)
 80066dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e0:	08006739 	.word	0x08006739
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	080066c9 	.word	0x080066c9
 80066ec:	080066c9 	.word	0x080066c9
 80066f0:	080066c9 	.word	0x080066c9
 80066f4:	080066c9 	.word	0x080066c9
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	080066c9 	.word	0x080066c9
 8006700:	080066c9 	.word	0x080066c9
 8006704:	080066c9 	.word	0x080066c9
 8006708:	080066c9 	.word	0x080066c9
 800670c:	0800684d 	.word	0x0800684d
 8006710:	08006777 	.word	0x08006777
 8006714:	08006807 	.word	0x08006807
 8006718:	080066c9 	.word	0x080066c9
 800671c:	080066c9 	.word	0x080066c9
 8006720:	0800686f 	.word	0x0800686f
 8006724:	080066c9 	.word	0x080066c9
 8006728:	08006777 	.word	0x08006777
 800672c:	080066c9 	.word	0x080066c9
 8006730:	080066c9 	.word	0x080066c9
 8006734:	0800680f 	.word	0x0800680f
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006748:	2301      	movs	r3, #1
 800674a:	e09d      	b.n	8006888 <_printf_i+0x1e8>
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	1d19      	adds	r1, r3, #4
 8006752:	6031      	str	r1, [r6, #0]
 8006754:	0606      	lsls	r6, r0, #24
 8006756:	d501      	bpl.n	800675c <_printf_i+0xbc>
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	e003      	b.n	8006764 <_printf_i+0xc4>
 800675c:	0645      	lsls	r5, r0, #25
 800675e:	d5fb      	bpl.n	8006758 <_printf_i+0xb8>
 8006760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006764:	2d00      	cmp	r5, #0
 8006766:	da03      	bge.n	8006770 <_printf_i+0xd0>
 8006768:	232d      	movs	r3, #45	@ 0x2d
 800676a:	426d      	negs	r5, r5
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006770:	4859      	ldr	r0, [pc, #356]	@ (80068d8 <_printf_i+0x238>)
 8006772:	230a      	movs	r3, #10
 8006774:	e011      	b.n	800679a <_printf_i+0xfa>
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	0608      	lsls	r0, r1, #24
 800677c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006780:	d402      	bmi.n	8006788 <_printf_i+0xe8>
 8006782:	0649      	lsls	r1, r1, #25
 8006784:	bf48      	it	mi
 8006786:	b2ad      	uxthmi	r5, r5
 8006788:	2f6f      	cmp	r7, #111	@ 0x6f
 800678a:	4853      	ldr	r0, [pc, #332]	@ (80068d8 <_printf_i+0x238>)
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	bf14      	ite	ne
 8006790:	230a      	movne	r3, #10
 8006792:	2308      	moveq	r3, #8
 8006794:	2100      	movs	r1, #0
 8006796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800679a:	6866      	ldr	r6, [r4, #4]
 800679c:	60a6      	str	r6, [r4, #8]
 800679e:	2e00      	cmp	r6, #0
 80067a0:	bfa2      	ittt	ge
 80067a2:	6821      	ldrge	r1, [r4, #0]
 80067a4:	f021 0104 	bicge.w	r1, r1, #4
 80067a8:	6021      	strge	r1, [r4, #0]
 80067aa:	b90d      	cbnz	r5, 80067b0 <_printf_i+0x110>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	d04b      	beq.n	8006848 <_printf_i+0x1a8>
 80067b0:	4616      	mov	r6, r2
 80067b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80067b6:	fb03 5711 	mls	r7, r3, r1, r5
 80067ba:	5dc7      	ldrb	r7, [r0, r7]
 80067bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067c0:	462f      	mov	r7, r5
 80067c2:	42bb      	cmp	r3, r7
 80067c4:	460d      	mov	r5, r1
 80067c6:	d9f4      	bls.n	80067b2 <_printf_i+0x112>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10b      	bne.n	80067e4 <_printf_i+0x144>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07df      	lsls	r7, r3, #31
 80067d0:	d508      	bpl.n	80067e4 <_printf_i+0x144>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	6861      	ldr	r1, [r4, #4]
 80067d6:	4299      	cmp	r1, r3
 80067d8:	bfde      	ittt	le
 80067da:	2330      	movle	r3, #48	@ 0x30
 80067dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067e4:	1b92      	subs	r2, r2, r6
 80067e6:	6122      	str	r2, [r4, #16]
 80067e8:	f8cd a000 	str.w	sl, [sp]
 80067ec:	464b      	mov	r3, r9
 80067ee:	aa03      	add	r2, sp, #12
 80067f0:	4621      	mov	r1, r4
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7ff fee6 	bl	80065c4 <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d14a      	bne.n	8006892 <_printf_i+0x1f2>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	b004      	add	sp, #16
 8006802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	4833      	ldr	r0, [pc, #204]	@ (80068dc <_printf_i+0x23c>)
 8006810:	2778      	movs	r7, #120	@ 0x78
 8006812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	6831      	ldr	r1, [r6, #0]
 800681a:	061f      	lsls	r7, r3, #24
 800681c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006820:	d402      	bmi.n	8006828 <_printf_i+0x188>
 8006822:	065f      	lsls	r7, r3, #25
 8006824:	bf48      	it	mi
 8006826:	b2ad      	uxthmi	r5, r5
 8006828:	6031      	str	r1, [r6, #0]
 800682a:	07d9      	lsls	r1, r3, #31
 800682c:	bf44      	itt	mi
 800682e:	f043 0320 	orrmi.w	r3, r3, #32
 8006832:	6023      	strmi	r3, [r4, #0]
 8006834:	b11d      	cbz	r5, 800683e <_printf_i+0x19e>
 8006836:	2310      	movs	r3, #16
 8006838:	e7ac      	b.n	8006794 <_printf_i+0xf4>
 800683a:	4827      	ldr	r0, [pc, #156]	@ (80068d8 <_printf_i+0x238>)
 800683c:	e7e9      	b.n	8006812 <_printf_i+0x172>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f023 0320 	bic.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	e7f6      	b.n	8006836 <_printf_i+0x196>
 8006848:	4616      	mov	r6, r2
 800684a:	e7bd      	b.n	80067c8 <_printf_i+0x128>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	6961      	ldr	r1, [r4, #20]
 8006852:	1d18      	adds	r0, r3, #4
 8006854:	6030      	str	r0, [r6, #0]
 8006856:	062e      	lsls	r6, r5, #24
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	d501      	bpl.n	8006860 <_printf_i+0x1c0>
 800685c:	6019      	str	r1, [r3, #0]
 800685e:	e002      	b.n	8006866 <_printf_i+0x1c6>
 8006860:	0668      	lsls	r0, r5, #25
 8006862:	d5fb      	bpl.n	800685c <_printf_i+0x1bc>
 8006864:	8019      	strh	r1, [r3, #0]
 8006866:	2300      	movs	r3, #0
 8006868:	6123      	str	r3, [r4, #16]
 800686a:	4616      	mov	r6, r2
 800686c:	e7bc      	b.n	80067e8 <_printf_i+0x148>
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	6032      	str	r2, [r6, #0]
 8006874:	681e      	ldr	r6, [r3, #0]
 8006876:	6862      	ldr	r2, [r4, #4]
 8006878:	2100      	movs	r1, #0
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 fcc8 	bl	8000210 <memchr>
 8006880:	b108      	cbz	r0, 8006886 <_printf_i+0x1e6>
 8006882:	1b80      	subs	r0, r0, r6
 8006884:	6060      	str	r0, [r4, #4]
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	2300      	movs	r3, #0
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006890:	e7aa      	b.n	80067e8 <_printf_i+0x148>
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	4632      	mov	r2, r6
 8006896:	4649      	mov	r1, r9
 8006898:	4640      	mov	r0, r8
 800689a:	47d0      	blx	sl
 800689c:	3001      	adds	r0, #1
 800689e:	d0ad      	beq.n	80067fc <_printf_i+0x15c>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	079b      	lsls	r3, r3, #30
 80068a4:	d413      	bmi.n	80068ce <_printf_i+0x22e>
 80068a6:	68e0      	ldr	r0, [r4, #12]
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	4298      	cmp	r0, r3
 80068ac:	bfb8      	it	lt
 80068ae:	4618      	movlt	r0, r3
 80068b0:	e7a6      	b.n	8006800 <_printf_i+0x160>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4632      	mov	r2, r6
 80068b6:	4649      	mov	r1, r9
 80068b8:	4640      	mov	r0, r8
 80068ba:	47d0      	blx	sl
 80068bc:	3001      	adds	r0, #1
 80068be:	d09d      	beq.n	80067fc <_printf_i+0x15c>
 80068c0:	3501      	adds	r5, #1
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	9903      	ldr	r1, [sp, #12]
 80068c6:	1a5b      	subs	r3, r3, r1
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dcf2      	bgt.n	80068b2 <_printf_i+0x212>
 80068cc:	e7eb      	b.n	80068a6 <_printf_i+0x206>
 80068ce:	2500      	movs	r5, #0
 80068d0:	f104 0619 	add.w	r6, r4, #25
 80068d4:	e7f5      	b.n	80068c2 <_printf_i+0x222>
 80068d6:	bf00      	nop
 80068d8:	08006c8d 	.word	0x08006c8d
 80068dc:	08006c9e 	.word	0x08006c9e

080068e0 <__sflush_r>:
 80068e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e8:	0716      	lsls	r6, r2, #28
 80068ea:	4605      	mov	r5, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	d454      	bmi.n	800699a <__sflush_r+0xba>
 80068f0:	684b      	ldr	r3, [r1, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dc02      	bgt.n	80068fc <__sflush_r+0x1c>
 80068f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dd48      	ble.n	800698e <__sflush_r+0xae>
 80068fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068fe:	2e00      	cmp	r6, #0
 8006900:	d045      	beq.n	800698e <__sflush_r+0xae>
 8006902:	2300      	movs	r3, #0
 8006904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006908:	682f      	ldr	r7, [r5, #0]
 800690a:	6a21      	ldr	r1, [r4, #32]
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	d030      	beq.n	8006972 <__sflush_r+0x92>
 8006910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	0759      	lsls	r1, r3, #29
 8006916:	d505      	bpl.n	8006924 <__sflush_r+0x44>
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800691e:	b10b      	cbz	r3, 8006924 <__sflush_r+0x44>
 8006920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	2300      	movs	r3, #0
 8006926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006928:	6a21      	ldr	r1, [r4, #32]
 800692a:	4628      	mov	r0, r5
 800692c:	47b0      	blx	r6
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	d106      	bne.n	8006942 <__sflush_r+0x62>
 8006934:	6829      	ldr	r1, [r5, #0]
 8006936:	291d      	cmp	r1, #29
 8006938:	d82b      	bhi.n	8006992 <__sflush_r+0xb2>
 800693a:	4a2a      	ldr	r2, [pc, #168]	@ (80069e4 <__sflush_r+0x104>)
 800693c:	410a      	asrs	r2, r1
 800693e:	07d6      	lsls	r6, r2, #31
 8006940:	d427      	bmi.n	8006992 <__sflush_r+0xb2>
 8006942:	2200      	movs	r2, #0
 8006944:	6062      	str	r2, [r4, #4]
 8006946:	04d9      	lsls	r1, r3, #19
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	d504      	bpl.n	8006958 <__sflush_r+0x78>
 800694e:	1c42      	adds	r2, r0, #1
 8006950:	d101      	bne.n	8006956 <__sflush_r+0x76>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b903      	cbnz	r3, 8006958 <__sflush_r+0x78>
 8006956:	6560      	str	r0, [r4, #84]	@ 0x54
 8006958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800695a:	602f      	str	r7, [r5, #0]
 800695c:	b1b9      	cbz	r1, 800698e <__sflush_r+0xae>
 800695e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006962:	4299      	cmp	r1, r3
 8006964:	d002      	beq.n	800696c <__sflush_r+0x8c>
 8006966:	4628      	mov	r0, r5
 8006968:	f7ff fbf2 	bl	8006150 <_free_r>
 800696c:	2300      	movs	r3, #0
 800696e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006970:	e00d      	b.n	800698e <__sflush_r+0xae>
 8006972:	2301      	movs	r3, #1
 8006974:	4628      	mov	r0, r5
 8006976:	47b0      	blx	r6
 8006978:	4602      	mov	r2, r0
 800697a:	1c50      	adds	r0, r2, #1
 800697c:	d1c9      	bne.n	8006912 <__sflush_r+0x32>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0c6      	beq.n	8006912 <__sflush_r+0x32>
 8006984:	2b1d      	cmp	r3, #29
 8006986:	d001      	beq.n	800698c <__sflush_r+0xac>
 8006988:	2b16      	cmp	r3, #22
 800698a:	d11e      	bne.n	80069ca <__sflush_r+0xea>
 800698c:	602f      	str	r7, [r5, #0]
 800698e:	2000      	movs	r0, #0
 8006990:	e022      	b.n	80069d8 <__sflush_r+0xf8>
 8006992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006996:	b21b      	sxth	r3, r3
 8006998:	e01b      	b.n	80069d2 <__sflush_r+0xf2>
 800699a:	690f      	ldr	r7, [r1, #16]
 800699c:	2f00      	cmp	r7, #0
 800699e:	d0f6      	beq.n	800698e <__sflush_r+0xae>
 80069a0:	0793      	lsls	r3, r2, #30
 80069a2:	680e      	ldr	r6, [r1, #0]
 80069a4:	bf08      	it	eq
 80069a6:	694b      	ldreq	r3, [r1, #20]
 80069a8:	600f      	str	r7, [r1, #0]
 80069aa:	bf18      	it	ne
 80069ac:	2300      	movne	r3, #0
 80069ae:	eba6 0807 	sub.w	r8, r6, r7
 80069b2:	608b      	str	r3, [r1, #8]
 80069b4:	f1b8 0f00 	cmp.w	r8, #0
 80069b8:	dde9      	ble.n	800698e <__sflush_r+0xae>
 80069ba:	6a21      	ldr	r1, [r4, #32]
 80069bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069be:	4643      	mov	r3, r8
 80069c0:	463a      	mov	r2, r7
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b0      	blx	r6
 80069c6:	2800      	cmp	r0, #0
 80069c8:	dc08      	bgt.n	80069dc <__sflush_r+0xfc>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069dc:	4407      	add	r7, r0
 80069de:	eba8 0800 	sub.w	r8, r8, r0
 80069e2:	e7e7      	b.n	80069b4 <__sflush_r+0xd4>
 80069e4:	dfbffffe 	.word	0xdfbffffe

080069e8 <_fflush_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b913      	cbnz	r3, 80069f8 <_fflush_r+0x10>
 80069f2:	2500      	movs	r5, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	b118      	cbz	r0, 8006a02 <_fflush_r+0x1a>
 80069fa:	6a03      	ldr	r3, [r0, #32]
 80069fc:	b90b      	cbnz	r3, 8006a02 <_fflush_r+0x1a>
 80069fe:	f7ff f9ad 	bl	8005d5c <__sinit>
 8006a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f3      	beq.n	80069f2 <_fflush_r+0xa>
 8006a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a0c:	07d0      	lsls	r0, r2, #31
 8006a0e:	d404      	bmi.n	8006a1a <_fflush_r+0x32>
 8006a10:	0599      	lsls	r1, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_fflush_r+0x32>
 8006a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a16:	f7ff fb98 	bl	800614a <__retarget_lock_acquire_recursive>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f7ff ff5f 	bl	80068e0 <__sflush_r>
 8006a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	4605      	mov	r5, r0
 8006a28:	d4e4      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	d4e1      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a32:	f7ff fb8b 	bl	800614c <__retarget_lock_release_recursive>
 8006a36:	e7dd      	b.n	80069f4 <_fflush_r+0xc>

08006a38 <__swhatbuf_r>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a40:	2900      	cmp	r1, #0
 8006a42:	b096      	sub	sp, #88	@ 0x58
 8006a44:	4615      	mov	r5, r2
 8006a46:	461e      	mov	r6, r3
 8006a48:	da0d      	bge.n	8006a66 <__swhatbuf_r+0x2e>
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2340      	movne	r3, #64	@ 0x40
 8006a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	6031      	str	r1, [r6, #0]
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	b016      	add	sp, #88	@ 0x58
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	466a      	mov	r2, sp
 8006a68:	f000 f848 	bl	8006afc <_fstat_r>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dbec      	blt.n	8006a4a <__swhatbuf_r+0x12>
 8006a70:	9901      	ldr	r1, [sp, #4]
 8006a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a7a:	4259      	negs	r1, r3
 8006a7c:	4159      	adcs	r1, r3
 8006a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a82:	e7eb      	b.n	8006a5c <__swhatbuf_r+0x24>

08006a84 <__smakebuf_r>:
 8006a84:	898b      	ldrh	r3, [r1, #12]
 8006a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a88:	079d      	lsls	r5, r3, #30
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	d507      	bpl.n	8006aa0 <__smakebuf_r+0x1c>
 8006a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	6163      	str	r3, [r4, #20]
 8006a9c:	b003      	add	sp, #12
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	ab01      	add	r3, sp, #4
 8006aa2:	466a      	mov	r2, sp
 8006aa4:	f7ff ffc8 	bl	8006a38 <__swhatbuf_r>
 8006aa8:	9f00      	ldr	r7, [sp, #0]
 8006aaa:	4605      	mov	r5, r0
 8006aac:	4639      	mov	r1, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7ff fbba 	bl	8006228 <_malloc_r>
 8006ab4:	b948      	cbnz	r0, 8006aca <__smakebuf_r+0x46>
 8006ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aba:	059a      	lsls	r2, r3, #22
 8006abc:	d4ee      	bmi.n	8006a9c <__smakebuf_r+0x18>
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	f043 0302 	orr.w	r3, r3, #2
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	e7e2      	b.n	8006a90 <__smakebuf_r+0xc>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	6020      	str	r0, [r4, #0]
 8006ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ada:	b15b      	cbz	r3, 8006af4 <__smakebuf_r+0x70>
 8006adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f81d 	bl	8006b20 <_isatty_r>
 8006ae6:	b128      	cbz	r0, 8006af4 <__smakebuf_r+0x70>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	431d      	orrs	r5, r3
 8006af8:	81a5      	strh	r5, [r4, #12]
 8006afa:	e7cf      	b.n	8006a9c <__smakebuf_r+0x18>

08006afc <_fstat_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d07      	ldr	r5, [pc, #28]	@ (8006b1c <_fstat_r+0x20>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	f7fa fe8e 	bl	800182a <_fstat>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	d102      	bne.n	8006b18 <_fstat_r+0x1c>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	b103      	cbz	r3, 8006b18 <_fstat_r+0x1c>
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000464 	.word	0x20000464

08006b20 <_isatty_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	@ (8006b3c <_isatty_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fa fe8d 	bl	800184a <_isatty>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_isatty_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_isatty_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000464 	.word	0x20000464

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	@ (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fe96 	bl	800187c <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000464 	.word	0x20000464

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
