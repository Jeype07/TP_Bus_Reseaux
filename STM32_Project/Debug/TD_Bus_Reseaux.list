
TD_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000068  08004ea8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08004ea8  0000641c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001105b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b0  00000000  00000000  000170f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000196a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c10  00000000  00000000  0001a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233f2  00000000  00000000  0001b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012675  00000000  00000000  0003e622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d61c6  00000000  00000000  00050c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b4  00000000  00000000  00126ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0012b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004d8c 	.word	0x08004d8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004d8c 	.word	0x08004d8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd0f 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f859 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9cb 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f99f 	bl	8000848 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800050a:	f000 f8c5 	bl	8000698 <MX_CAN1_Init>
  MX_UART4_Init();
 800050e:	f000 f947 	bl	80007a0 <MX_UART4_Init>
  MX_UART5_Init();
 8000512:	f000 f96f 	bl	80007f4 <MX_UART5_Init>
  MX_TIM2_Init();
 8000516:	f000 f8f5 	bl	8000704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_RegisterCallback(&huart4, HAL_UART_RX_COMPLETE_CB_ID, User_UartCompleteCallback);
 800051a:	4a1f      	ldr	r2, [pc, #124]	@ (8000598 <main+0xa4>)
 800051c:	2103      	movs	r1, #3
 800051e:	481f      	ldr	r0, [pc, #124]	@ (800059c <main+0xa8>)
 8000520:	f002 feca 	bl	80032b8 <HAL_UART_RegisterCallback>
	HAL_TIM_Base_Start_IT(&htim2);
 8000524:	481e      	ldr	r0, [pc, #120]	@ (80005a0 <main+0xac>)
 8000526:	f002 f985 	bl	8002834 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("==== TP BUS & NETWORK ====\r\n");
 800052a:	481e      	ldr	r0, [pc, #120]	@ (80005a4 <main+0xb0>)
 800052c:	f004 f89a 	bl	8004664 <puts>
	CAN_TxHeaderTypeDef   TxHeader;
	uint8_t               TxData[3];
	uint32_t              TxMailbox;

	// Motor pilot : +90 degree
	TxHeader.IDE = CAN_ID_STD;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
	TxHeader.StdId = 0x61;
 8000534:	2361      	movs	r3, #97	@ 0x61
 8000536:	60bb      	str	r3, [r7, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 2;
 800053c:	2302      	movs	r3, #2
 800053e:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	773b      	strb	r3, [r7, #28]

	TxData[0] = 90; 	//angle
 8000544:	235a      	movs	r3, #90	@ 0x5a
 8000546:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x00;	//positive
 8000548:	2300      	movs	r3, #0
 800054a:	717b      	strb	r3, [r7, #5]
	//TxData[2] = 0xA0;	//speed


	HAL_CAN_Start(&hcan1);
 800054c:	4816      	ldr	r0, [pc, #88]	@ (80005a8 <main+0xb4>)
 800054e:	f000 fe76 	bl	800123e <HAL_CAN_Start>
		//HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, &reg, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, raw_data, BMP_TEMP_PRESS_DATA_LENGTH, HAL_MAX_DELAY);
		//*press = (int32_t)(((raw_data[0] << 16) | (raw_data[1] << 8) | raw_data[2]) >> 4);
		//*temp = (int32_t)(((raw_data[3] << 16) | (raw_data[4] << 8) | raw_data[5]) >> 4);

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)!= HAL_OK){
 8000552:	463b      	mov	r3, r7
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	f107 0108 	add.w	r1, r7, #8
 800055a:	4813      	ldr	r0, [pc, #76]	@ (80005a8 <main+0xb4>)
 800055c:	f000 feb3 	bl	80012c6 <HAL_CAN_AddTxMessage>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d004      	beq.n	8000570 <main+0x7c>
			printf("Erreur de communication sur le bus CAN\r\n");
 8000566:	4811      	ldr	r0, [pc, #68]	@ (80005ac <main+0xb8>)
 8000568:	f004 f87c 	bl	8004664 <puts>
			return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	e00f      	b.n	8000590 <main+0x9c>
		}
		else{
			printf("Commnication établie\r\n");
 8000570:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <main+0xbc>)
 8000572:	f004 f877 	bl	8004664 <puts>
		}
		if(TxData[1]==1){
 8000576:	797b      	ldrb	r3, [r7, #5]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d102      	bne.n	8000582 <main+0x8e>
				TxData[1] = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	717b      	strb	r3, [r7, #5]
 8000580:	e001      	b.n	8000586 <main+0x92>
		}
		else{
			TxData[1]=1;
 8000582:	2301      	movs	r3, #1
 8000584:	717b      	strb	r3, [r7, #5]
		}
		HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058a:	f000 fd39 	bl	8001000 <HAL_Delay>
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)!= HAL_OK){
 800058e:	e7e0      	b.n	8000552 <main+0x5e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8000590:	4618      	mov	r0, r3
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08000995 	.word	0x08000995
 800059c:	20000160 	.word	0x20000160
 80005a0:	200000ac 	.word	0x200000ac
 80005a4:	08004da4 	.word	0x08004da4
 80005a8:	20000084 	.word	0x20000084
 80005ac:	08004dc0 	.word	0x08004dc0
 80005b0:	08004de8 	.word	0x08004de8

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	@ 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f92e 	bl	8004824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000690 <SystemClock_Config+0xdc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000690 <SystemClock_Config+0xdc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <SystemClock_Config+0xdc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a25      	ldr	r2, [pc, #148]	@ (8000694 <SystemClock_Config+0xe0>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <SystemClock_Config+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000628:	23b4      	movs	r3, #180	@ 0xb4
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fdff 	bl	8002240 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 f9b2 	bl	80009b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800064c:	f001 fa5e 	bl	8001b0c <HAL_PWREx_EnableOverDrive>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000656:	f000 f9ab 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fa97 	bl	8001bac <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000684:	f000 f994 	bl	80009b0 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_CAN1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_CAN1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006b6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_CAN1_Init+0x64>)
 80006ea:	f000 fcad 	bl	8001048 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f95c 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000084 	.word	0x20000084
 8000700:	40006400 	.word	0x40006400

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000722:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000726:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_TIM2_Init+0x94>)
 800072a:	22b3      	movs	r2, #179	@ 0xb3
 800072c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_TIM2_Init+0x98>)
 8000738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_TIM2_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000742:	2280      	movs	r2, #128	@ 0x80
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000746:	4814      	ldr	r0, [pc, #80]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000748:	f002 f818 	bl	800277c <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f92d 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000764:	f002 f9e6 	bl	8002b34 <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f91f 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_TIM2_Init+0x94>)
 8000780:	f002 fca2 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800078a:	f000 f911 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000ac 	.word	0x200000ac
 800079c:	000f423f 	.word	0x000f423f

080007a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_UART4_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007d8:	f002 fd10 	bl	80031fc <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8e5 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000160 	.word	0x20000160
 80007f0:	40004c00 	.word	0x40004c00

080007f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_UART5_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_UART5_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_UART5_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_UART5_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_UART5_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_UART5_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_UART5_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_UART5_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_UART5_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_UART5_Init+0x4c>)
 800082c:	f002 fce6 	bl	80031fc <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f8bb 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001d8 	.word	0x200001d8
 8000844:	40005000 	.word	0x40005000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f002 fcbc 	bl	80031fc <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f891 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000250 	.word	0x20000250
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a33      	ldr	r2, [pc, #204]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xec>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a1e      	ldr	r2, [pc, #120]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <MX_GPIO_Init+0xec>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_GPIO_Init+0xf0>)
 8000944:	f001 f8c8 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_GPIO_Init+0xf4>)
 8000960:	f000 ff26 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_GPIO_Init+0xf0>)
 800097c:	f000 ff18 	bl	80017b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020800 	.word	0x40020800

08000994 <User_UartCompleteCallback>:

/* USER CODE BEGIN 4 */
void User_UartCompleteCallback(UART_HandleTypeDef *huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	printf("j'ai reçu des datas\r\n");
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <User_UartCompleteCallback+0x18>)
 800099e:	f003 fe61 	bl	8004664 <puts>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08004e00 	.word	0x08004e00

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fe04 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_CAN_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12c      	bne.n	8000a88 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_CAN_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <HAL_CAN_MspInit+0x8c>)
 8000a84:	f000 fe94 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40006400 	.word	0x40006400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aac:	d115      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x48>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	201c      	movs	r0, #28
 8000ad0:	f000 fda5 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ad4:	201c      	movs	r0, #28
 8000ad6:	f000 fdbe 	bl	8001656 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a5e      	ldr	r2, [pc, #376]	@ (8000c80 <HAL_UART_MspInit+0x198>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d134      	bne.n	8000b74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a5c      	ldr	r2, [pc, #368]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a55      	ldr	r2, [pc, #340]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b53      	ldr	r3, [pc, #332]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b42:	2303      	movs	r3, #3
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b52:	2308      	movs	r3, #8
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	484a      	ldr	r0, [pc, #296]	@ (8000c88 <HAL_UART_MspInit+0x1a0>)
 8000b5e:	f000 fe27 	bl	80017b0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2034      	movs	r0, #52	@ 0x34
 8000b68:	f000 fd59 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b6c:	2034      	movs	r0, #52	@ 0x34
 8000b6e:	f000 fd72 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b72:	e081      	b.n	8000c78 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==UART5)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a44      	ldr	r2, [pc, #272]	@ (8000c8c <HAL_UART_MspInit+0x1a4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d14b      	bne.n	8000c16 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	4b40      	ldr	r3, [pc, #256]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a3f      	ldr	r2, [pc, #252]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	4b39      	ldr	r3, [pc, #228]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a38      	ldr	r2, [pc, #224]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a31      	ldr	r2, [pc, #196]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000be4:	2308      	movs	r3, #8
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4828      	ldr	r0, [pc, #160]	@ (8000c90 <HAL_UART_MspInit+0x1a8>)
 8000bf0:	f000 fdde 	bl	80017b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c04:	2308      	movs	r3, #8
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <HAL_UART_MspInit+0x1ac>)
 8000c10:	f000 fdce 	bl	80017b0 <HAL_GPIO_Init>
}
 8000c14:	e030      	b.n	8000c78 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <HAL_UART_MspInit+0x1b0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d12b      	bne.n	8000c78 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_UART_MspInit+0x19c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_UART_MspInit+0x1a0>)
 8000c74:	f000 fd9c 	bl	80017b0 <HAL_GPIO_Init>
}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	@ 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40004c00 	.word	0x40004c00
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40005000 	.word	0x40005000
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	40004400 	.word	0x40004400

08000c9c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ca4:	1d39      	adds	r1, r7, #4
 8000ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000caa:	2201      	movs	r2, #1
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <__io_putchar+0x30>)
 8000cae:	f002 fb9b 	bl	80033e8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb2:	1d39      	adds	r1, r7, #4
 8000cb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <__io_putchar+0x34>)
 8000cbc:	f002 fb94 	bl	80033e8 <HAL_UART_Transmit>

  return ch;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000250 	.word	0x20000250
 8000cd0:	20000160 	.word	0x20000160

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f949 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <TIM2_IRQHandler+0x10>)
 8000d3a:	f001 fdeb 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000ac 	.word	0x200000ac

08000d48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <UART4_IRQHandler+0x10>)
 8000d4e:	f002 fbd7 	bl	8003500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000160 	.word	0x20000160

08000d5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00a      	b.n	8000d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6e:	f3af 8000 	nop.w
 8000d72:	4601      	mov	r1, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf0      	blt.n	8000d6e <_read+0x12>
  }

  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e009      	b.n	8000dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff73 	bl	8000c9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <_write+0x12>
  }
  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_close>:

int _close(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df6:	605a      	str	r2, [r3, #4]
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_isatty>:

int _isatty(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f003 fd2a 	bl	80048c0 <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	20000420 	.word	0x20000420

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f003 fce9 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fafb 	bl	80004f4 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f0c:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 8000f10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f14:	2000041c 	.word	0x2000041c

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fb5f 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd34 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fb77 	bl	8001672 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 fb3f 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200002cc 	.word	0x200002cc

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200002cc 	.word	0x200002cc

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0ed      	b.n	8001236 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fcd0 	bl	8000a0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ffb4 	bl	8000fe8 <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ffb0 	bl	8000fe8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0c5      	b.n	8001236 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0e5      	beq.n	8001084 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0202 	bic.w	r2, r2, #2
 80010c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff ff8e 	bl	8000fe8 <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ce:	e012      	b.n	80010f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d0:	f7ff ff8a 	bl	8000fe8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d90b      	bls.n	80010f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e09f      	b.n	8001236 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e5      	bne.n	80010d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7e1b      	ldrb	r3, [r3, #24]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d108      	bne.n	800111e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e007      	b.n	800112e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e007      	b.n	8001158 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e9b      	ldrb	r3, [r3, #26]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0220 	orr.w	r2, r2, #32
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e007      	b.n	8001182 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0220 	bic.w	r2, r2, #32
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7edb      	ldrb	r3, [r3, #27]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0210 	bic.w	r2, r2, #16
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e007      	b.n	80011ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0210 	orr.w	r2, r2, #16
 80011aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7f1b      	ldrb	r3, [r3, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0208 	orr.w	r2, r2, #8
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e007      	b.n	80011d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0208 	bic.w	r2, r2, #8
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7f5b      	ldrb	r3, [r3, #29]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e007      	b.n	8001200 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	ea42 0103 	orr.w	r1, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d12e      	bne.n	80012b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800126a:	f7ff febd 	bl	8000fe8 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001270:	e012      	b.n	8001298 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001272:	f7ff feb9 	bl	8000fe8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b0a      	cmp	r3, #10
 800127e:	d90b      	bls.n	8001298 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2205      	movs	r2, #5
 8001290:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e012      	b.n	80012be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e5      	bne.n	8001272 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e006      	b.n	80012be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
  }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b089      	sub	sp, #36	@ 0x24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e4:	7ffb      	ldrb	r3, [r7, #31]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d003      	beq.n	80012f2 <HAL_CAN_AddTxMessage+0x2c>
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	f040 80ad 	bne.w	800144c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10a      	bne.n	8001312 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8095 	beq.w	800143c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	0e1b      	lsrs	r3, r3, #24
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800131c:	2201      	movs	r2, #1
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	409a      	lsls	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10d      	bne.n	800134a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	6809      	ldr	r1, [r1, #0]
 800133c:	431a      	orrs	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3318      	adds	r3, #24
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	440b      	add	r3, r1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e00f      	b.n	800136a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001354:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800135e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3318      	adds	r3, #24
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	440b      	add	r3, r1
 8001368:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6819      	ldr	r1, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3318      	adds	r3, #24
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	440b      	add	r3, r1
 800137a:	3304      	adds	r3, #4
 800137c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	7d1b      	ldrb	r3, [r3, #20]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d111      	bne.n	80013aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3318      	adds	r3, #24
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	6811      	ldr	r1, [r2, #0]
 800139a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3318      	adds	r3, #24
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	440b      	add	r3, r1
 80013a6:	3304      	adds	r3, #4
 80013a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3307      	adds	r3, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	061a      	lsls	r2, r3, #24
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3306      	adds	r3, #6
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3305      	adds	r3, #5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4313      	orrs	r3, r2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	3204      	adds	r2, #4
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	4610      	mov	r0, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	ea43 0200 	orr.w	r2, r3, r0
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	440b      	add	r3, r1
 80013dc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	061a      	lsls	r2, r3, #24
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3302      	adds	r3, #2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4313      	orrs	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	4610      	mov	r0, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	6811      	ldr	r1, [r2, #0]
 8001408:	ea43 0200 	orr.w	r2, r3, r0
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	440b      	add	r3, r1
 8001412:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001416:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3318      	adds	r3, #24
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3318      	adds	r3, #24
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	440b      	add	r3, r1
 8001436:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e00e      	b.n	800145a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e006      	b.n	800145a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001450:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
  }
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff fca6 	bl	8000fe8 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d008      	beq.n	80016bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e052      	b.n	8001762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0216 	bic.w	r2, r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_DMA_Abort+0x62>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170c:	e013      	b.n	8001736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170e:	f7ff fc6b 	bl	8000fe8 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b05      	cmp	r3, #5
 800171a:	d90c      	bls.n	8001736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e015      	b.n	8001762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e4      	bne.n	800170e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e165      	b.n	8001a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8154 	bne.w	8001a92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80ae 	beq.w	8001a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <HAL_GPIO_Init+0x308>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4e      	ldr	r2, [pc, #312]	@ (8001abc <HAL_GPIO_Init+0x30c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac0 <HAL_GPIO_Init+0x310>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac4 <HAL_GPIO_Init+0x314>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac8 <HAL_GPIO_Init+0x318>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x20a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4a      	ldr	r2, [pc, #296]	@ (8001acc <HAL_GPIO_Init+0x31c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x206>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	@ (8001ad0 <HAL_GPIO_Init+0x320>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x202>
 80019ae:	2306      	movs	r3, #6
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a31      	ldr	r2, [pc, #196]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae96 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b38:	f7ff fa56 	bl	8000fe8 <HAL_GetTick>
 8001b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b3e:	e009      	b.n	8001b54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b40:	f7ff fa52 	bl	8000fe8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b4e:	d901      	bls.n	8001b54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e01f      	b.n	8001b94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b60:	d1ee      	bne.n	8001b40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff fa3e 	bl	8000fe8 <HAL_GetTick>
 8001b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6e:	e009      	b.n	8001b84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b70:	f7ff fa3a 	bl	8000fe8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b7e:	d901      	bls.n	8001b84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e007      	b.n	8001b94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b90:	d1ee      	bne.n	8001b70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	420e0040 	.word	0x420e0040
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	420e0044 	.word	0x420e0044

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cc      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b68      	ldr	r3, [pc, #416]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90c      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a58      	ldr	r2, [pc, #352]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d044      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e067      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4934      	ldr	r1, [pc, #208]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f9a4 	bl	8000fe8 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f9a0 	bl	8000fe8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f855 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f904 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	08004e18 	.word	0x08004e18
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08004e28 	.word	0x08004e28

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08004e28 	.word	0x08004e28

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b0ae      	sub	sp, #184	@ 0xb8
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e06:	4bcb      	ldr	r3, [pc, #812]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	f200 8206 	bhi.w	8002220 <HAL_RCC_GetSysClockFreq+0x440>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e51 	.word	0x08001e51
 8001e20:	08002221 	.word	0x08002221
 8001e24:	08002221 	.word	0x08002221
 8001e28:	08002221 	.word	0x08002221
 8001e2c:	08001e59 	.word	0x08001e59
 8001e30:	08002221 	.word	0x08002221
 8001e34:	08002221 	.word	0x08002221
 8001e38:	08002221 	.word	0x08002221
 8001e3c:	08001e61 	.word	0x08001e61
 8001e40:	08002221 	.word	0x08002221
 8001e44:	08002221 	.word	0x08002221
 8001e48:	08002221 	.word	0x08002221
 8001e4c:	08002051 	.word	0x08002051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4bb9      	ldr	r3, [pc, #740]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e56:	e1e7      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e58:	4bb8      	ldr	r3, [pc, #736]	@ (800213c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e5e:	e1e3      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e60:	4bb4      	ldr	r3, [pc, #720]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6c:	4bb1      	ldr	r3, [pc, #708]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d071      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e78:	4bae      	ldr	r3, [pc, #696]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ed0:	4649      	mov	r1, r9
 8001ed2:	018b      	lsls	r3, r1, #6
 8001ed4:	4641      	mov	r1, r8
 8001ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eda:	4641      	mov	r1, r8
 8001edc:	018a      	lsls	r2, r1, #6
 8001ede:	4641      	mov	r1, r8
 8001ee0:	1a51      	subs	r1, r2, r1
 8001ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ef8:	4649      	mov	r1, r9
 8001efa:	00cb      	lsls	r3, r1, #3
 8001efc:	4641      	mov	r1, r8
 8001efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f02:	4641      	mov	r1, r8
 8001f04:	00ca      	lsls	r2, r1, #3
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f12:	462b      	mov	r3, r5
 8001f14:	460a      	mov	r2, r1
 8001f16:	eb42 0303 	adc.w	r3, r2, r3
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f28:	4629      	mov	r1, r5
 8001f2a:	024b      	lsls	r3, r1, #9
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f32:	4621      	mov	r1, r4
 8001f34:	024a      	lsls	r2, r1, #9
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f4c:	f7fe f95a 	bl	8000204 <__aeabi_uldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4613      	mov	r3, r2
 8001f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f5a:	e067      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	2200      	movs	r2, #0
 8001f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f76:	2300      	movs	r3, #0
 8001f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f7e:	4622      	mov	r2, r4
 8001f80:	462b      	mov	r3, r5
 8001f82:	f04f 0000 	mov.w	r0, #0
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	0159      	lsls	r1, r3, #5
 8001f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f90:	0150      	lsls	r0, r2, #5
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4621      	mov	r1, r4
 8001f98:	1a51      	subs	r1, r2, r1
 8001f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	018b      	lsls	r3, r1, #6
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fba:	4641      	mov	r1, r8
 8001fbc:	018a      	lsls	r2, r1, #6
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fde:	4692      	mov	sl, r2
 8001fe0:	469b      	mov	fp, r3
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	462b      	mov	r3, r5
 8001fec:	eb4b 0303 	adc.w	r3, fp, r3
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ffe:	4629      	mov	r1, r5
 8002000:	028b      	lsls	r3, r1, #10
 8002002:	4621      	mov	r1, r4
 8002004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002008:	4621      	mov	r1, r4
 800200a:	028a      	lsls	r2, r1, #10
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002014:	2200      	movs	r2, #0
 8002016:	673b      	str	r3, [r7, #112]	@ 0x70
 8002018:	677a      	str	r2, [r7, #116]	@ 0x74
 800201a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800201e:	f7fe f8f1 	bl	8000204 <__aeabi_uldivmod>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4613      	mov	r3, r2
 8002028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800202c:	4b41      	ldr	r3, [pc, #260]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800203e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800204e:	e0eb      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	4b38      	ldr	r3, [pc, #224]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205c:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d06b      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002068:	4b32      	ldr	r3, [pc, #200]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x354>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	2200      	movs	r2, #0
 8002070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002074:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207a:	663b      	str	r3, [r7, #96]	@ 0x60
 800207c:	2300      	movs	r3, #0
 800207e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002084:	4622      	mov	r2, r4
 8002086:	462b      	mov	r3, r5
 8002088:	f04f 0000 	mov.w	r0, #0
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	0159      	lsls	r1, r3, #5
 8002092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002096:	0150      	lsls	r0, r2, #5
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4621      	mov	r1, r4
 800209e:	1a51      	subs	r1, r2, r1
 80020a0:	61b9      	str	r1, [r7, #24]
 80020a2:	4629      	mov	r1, r5
 80020a4:	eb63 0301 	sbc.w	r3, r3, r1
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020b6:	4659      	mov	r1, fp
 80020b8:	018b      	lsls	r3, r1, #6
 80020ba:	4651      	mov	r1, sl
 80020bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c0:	4651      	mov	r1, sl
 80020c2:	018a      	lsls	r2, r1, #6
 80020c4:	4651      	mov	r1, sl
 80020c6:	ebb2 0801 	subs.w	r8, r2, r1
 80020ca:	4659      	mov	r1, fp
 80020cc:	eb63 0901 	sbc.w	r9, r3, r1
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e4:	4690      	mov	r8, r2
 80020e6:	4699      	mov	r9, r3
 80020e8:	4623      	mov	r3, r4
 80020ea:	eb18 0303 	adds.w	r3, r8, r3
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	462b      	mov	r3, r5
 80020f2:	eb49 0303 	adc.w	r3, r9, r3
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002104:	4629      	mov	r1, r5
 8002106:	024b      	lsls	r3, r1, #9
 8002108:	4621      	mov	r1, r4
 800210a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800210e:	4621      	mov	r1, r4
 8002110:	024a      	lsls	r2, r1, #9
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800211a:	2200      	movs	r2, #0
 800211c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800211e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002124:	f7fe f86e 	bl	8000204 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002132:	e065      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x420>
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002140:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x458>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	2200      	movs	r2, #0
 8002148:	4618      	mov	r0, r3
 800214a:	4611      	mov	r1, r2
 800214c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002150:	653b      	str	r3, [r7, #80]	@ 0x50
 8002152:	2300      	movs	r3, #0
 8002154:	657b      	str	r3, [r7, #84]	@ 0x54
 8002156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800215a:	4642      	mov	r2, r8
 800215c:	464b      	mov	r3, r9
 800215e:	f04f 0000 	mov.w	r0, #0
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	0159      	lsls	r1, r3, #5
 8002168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800216c:	0150      	lsls	r0, r2, #5
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4641      	mov	r1, r8
 8002174:	1a51      	subs	r1, r2, r1
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	4649      	mov	r1, r9
 800217a:	eb63 0301 	sbc.w	r3, r3, r1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800218c:	4659      	mov	r1, fp
 800218e:	018b      	lsls	r3, r1, #6
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002196:	4651      	mov	r1, sl
 8002198:	018a      	lsls	r2, r1, #6
 800219a:	4651      	mov	r1, sl
 800219c:	1a54      	subs	r4, r2, r1
 800219e:	4659      	mov	r1, fp
 80021a0:	eb63 0501 	sbc.w	r5, r3, r1
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b2:	00e2      	lsls	r2, r4, #3
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	18e3      	adds	r3, r4, r3
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	464b      	mov	r3, r9
 80021c0:	eb45 0303 	adc.w	r3, r5, r3
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d2:	4629      	mov	r1, r5
 80021d4:	028b      	lsls	r3, r1, #10
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021dc:	4621      	mov	r1, r4
 80021de:	028a      	lsls	r2, r1, #10
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021e8:	2200      	movs	r2, #0
 80021ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021f2:	f7fe f807 	bl	8000204 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4613      	mov	r3, r2
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x458>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0f1b      	lsrs	r3, r3, #28
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800220e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800221e:	e003      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800222c:	4618      	mov	r0, r3
 800222e:	37b8      	adds	r7, #184	@ 0xb8
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400

08002240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e28d      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8083 	beq.w	8002366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002260:	4b94      	ldr	r3, [pc, #592]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b04      	cmp	r3, #4
 800226a:	d019      	beq.n	80022a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800226c:	4b91      	ldr	r3, [pc, #580]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
        || \
 8002274:	2b08      	cmp	r3, #8
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002278:	4b8e      	ldr	r3, [pc, #568]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002284:	d00c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002286:	4b8b      	ldr	r3, [pc, #556]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d112      	bne.n	80022b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b84      	ldr	r3, [pc, #528]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0x124>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d157      	bne.n	8002364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e25a      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x90>
 80022c2:	4b7c      	ldr	r3, [pc, #496]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7b      	ldr	r2, [pc, #492]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xcc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0xb4>
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a72      	ldr	r2, [pc, #456]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xcc>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6b      	ldr	r2, [pc, #428]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fe68 	bl	8000fe8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe fe64 	bl	8000fe8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e21f      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xdc>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe54 	bl	8000fe8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fe50 	bl	8000fe8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e20b      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b57      	ldr	r3, [pc, #348]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x104>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06f      	beq.n	8002452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002372:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b00      	cmp	r3, #0
 800237c:	d017      	beq.n	80023ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800237e:	4b4d      	ldr	r3, [pc, #308]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
        || \
 8002386:	2b08      	cmp	r3, #8
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x186>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1d3      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4937      	ldr	r1, [pc, #220]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e03a      	b.n	8002452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_RCC_OscConfig+0x278>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fdfd 	bl	8000fe8 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fdf9 	bl	8000fe8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1b4      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4925      	ldr	r1, [pc, #148]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x278>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fddc 	bl	8000fe8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7fe fdd8 	bl	8000fe8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e193      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d036      	beq.n	80024cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fdbc 	bl	8000fe8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7fe fdb8 	bl	8000fe8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e173      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x234>
 8002492:	e01b      	b.n	80024cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe fda5 	bl	8000fe8 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	e00e      	b.n	80024c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a2:	f7fe fda1 	bl	8000fe8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d907      	bls.n	80024c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e15c      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	42470000 	.word	0x42470000
 80024bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b8a      	ldr	r3, [pc, #552]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ea      	bne.n	80024a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8097 	beq.w	8002608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b83      	ldr	r3, [pc, #524]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b7f      	ldr	r3, [pc, #508]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a7e      	ldr	r2, [pc, #504]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b7c      	ldr	r3, [pc, #496]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b79      	ldr	r3, [pc, #484]	@ (80026f0 <HAL_RCC_OscConfig+0x4b0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x4b0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x4b0>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7fe fd61 	bl	8000fe8 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7fe fd5d 	bl	8000fe8 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e118      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b6c      	ldr	r3, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x4b0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x31e>
 8002550:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	@ 0x70
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0x358>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x340>
 8002566:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a60      	ldr	r2, [pc, #384]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
 8002572:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	@ 0x70
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x358>
 8002580:	4b5a      	ldr	r3, [pc, #360]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	4a59      	ldr	r2, [pc, #356]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	@ 0x70
 800258c:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd22 	bl	8000fe8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fd1e 	bl	8000fe8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0d7      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	4b4b      	ldr	r3, [pc, #300]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ee      	beq.n	80025a8 <HAL_RCC_OscConfig+0x368>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fd0c 	bl	8000fe8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe fd08 	bl	8000fe8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0c1      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ea:	4b40      	ldr	r3, [pc, #256]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ee      	bne.n	80025d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b3b      	ldr	r3, [pc, #236]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	4a3a      	ldr	r2, [pc, #232]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80ad 	beq.w	800276c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002612:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b08      	cmp	r3, #8
 800261c:	d060      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d145      	bne.n	80026b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_RCC_OscConfig+0x4b4>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fcdc 	bl	8000fe8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fcd8 	bl	8000fe8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e093      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	071b      	lsls	r3, r3, #28
 800267e:	491b      	ldr	r1, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_RCC_OscConfig+0x4b4>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fcad 	bl	8000fe8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fca9 	bl	8000fe8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e064      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x452>
 80026b0:	e05c      	b.n	800276c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_OscConfig+0x4b4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fc96 	bl	8000fe8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fc92 	bl	8000fe8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04d      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x480>
 80026de:	e045      	b.n	800276c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e040      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <HAL_RCC_OscConfig+0x538>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d030      	beq.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d129      	bne.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d122      	bne.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800272e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	4293      	cmp	r3, r2
 8002732:	d119      	bne.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d10f      	bne.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e04c      	b.n	8002828 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d111      	bne.n	80027be <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc38 	bl	8003018 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002830 <HAL_TIM_Base_Init+0xb4>)
 80027b4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f000 fadb 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	08000a9d 	.word	0x08000a9d

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e04e      	b.n	80028ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a23      	ldr	r2, [pc, #140]	@ (80028f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002876:	d01d      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1f      	ldr	r2, [pc, #124]	@ (80028fc <HAL_TIM_Base_Start_IT+0xc8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1e      	ldr	r2, [pc, #120]	@ (8002900 <HAL_TIM_Base_Start_IT+0xcc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_TIM_Base_Start_IT+0xd0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1b      	ldr	r2, [pc, #108]	@ (8002908 <HAL_TIM_Base_Start_IT+0xd4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a19      	ldr	r2, [pc, #100]	@ (800290c <HAL_TIM_Base_Start_IT+0xd8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x80>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a18      	ldr	r2, [pc, #96]	@ (8002910 <HAL_TIM_Base_Start_IT+0xdc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d010      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40000c00 	.word	0x40000c00
 8002908:	40010400 	.word	0x40010400
 800290c:	40014000 	.word	0x40014000
 8002910:	40001800 	.word	0x40001800

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d026      	beq.n	8002984 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0202 	mvn.w	r2, #2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
 8002968:	e009      	b.n	800297e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d026      	beq.n	80029dc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e009      	b.n	80029d6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d026      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d021      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0208 	mvn.w	r2, #8
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e009      	b.n	8002a2e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d026      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d021      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e009      	b.n	8002a86 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0201 	mvn.w	r2, #1
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00e      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0220 	mvn.w	r2, #32
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x1c>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0b4      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x186>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b88:	d03e      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0xd4>
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8e:	f200 8087 	bhi.w	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b96:	f000 8086 	beq.w	8002ca6 <HAL_TIM_ConfigClockSource+0x172>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b9e:	d87f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b70      	cmp	r3, #112	@ 0x70
 8002ba2:	d01a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xa6>
 8002ba4:	2b70      	cmp	r3, #112	@ 0x70
 8002ba6:	d87b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b60      	cmp	r3, #96	@ 0x60
 8002baa:	d050      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x11a>
 8002bac:	2b60      	cmp	r3, #96	@ 0x60
 8002bae:	d877      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b50      	cmp	r3, #80	@ 0x50
 8002bb2:	d03c      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xfa>
 8002bb4:	2b50      	cmp	r3, #80	@ 0x50
 8002bb6:	d873      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b40      	cmp	r3, #64	@ 0x40
 8002bba:	d058      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x13a>
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	d86f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b30      	cmp	r3, #48	@ 0x30
 8002bc2:	d064      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x15a>
 8002bc4:	2b30      	cmp	r3, #48	@ 0x30
 8002bc6:	d86b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d060      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d867      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d05a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x15a>
 8002bd8:	e062      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	f000 f9f5 	bl	8002fd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]
      break;
 8002c06:	e04f      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	f000 f9de 	bl	8002fd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c2a:	609a      	str	r2, [r3, #8]
      break;
 8002c2c:	e03c      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 f952 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2150      	movs	r1, #80	@ 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f9ab 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e02c      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f971 	bl	8002f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2160      	movs	r1, #96	@ 0x60
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f99b 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e01c      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f932 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f98b 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e00c      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f000 f982 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002c9e:	e003      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e000      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a46      	ldr	r2, [pc, #280]	@ (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002daa:	d00f      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a43      	ldr	r2, [pc, #268]	@ (8002ebc <TIM_Base_SetConfig+0x130>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a42      	ldr	r2, [pc, #264]	@ (8002ec0 <TIM_Base_SetConfig+0x134>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a41      	ldr	r2, [pc, #260]	@ (8002ec4 <TIM_Base_SetConfig+0x138>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	@ (8002ec8 <TIM_Base_SetConfig+0x13c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a35      	ldr	r2, [pc, #212]	@ (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dec:	d027      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a32      	ldr	r2, [pc, #200]	@ (8002ebc <TIM_Base_SetConfig+0x130>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d023      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a31      	ldr	r2, [pc, #196]	@ (8002ec0 <TIM_Base_SetConfig+0x134>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a30      	ldr	r2, [pc, #192]	@ (8002ec4 <TIM_Base_SetConfig+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01b      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec8 <TIM_Base_SetConfig+0x13c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d017      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2e      	ldr	r2, [pc, #184]	@ (8002ecc <TIM_Base_SetConfig+0x140>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed0 <TIM_Base_SetConfig+0x144>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <TIM_Base_SetConfig+0x148>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <TIM_Base_SetConfig+0x14c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	@ (8002edc <TIM_Base_SetConfig+0x150>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a29      	ldr	r2, [pc, #164]	@ (8002ee0 <TIM_Base_SetConfig+0x154>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a10      	ldr	r2, [pc, #64]	@ (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <TIM_Base_SetConfig+0x13c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800
 8002ec4:	40000c00 	.word	0x40000c00
 8002ec8:	40010400 	.word	0x40010400
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800
 8002ed8:	40001800 	.word	0x40001800
 8002edc:	40001c00 	.word	0x40001c00
 8002ee0:	40002000 	.word	0x40002000

08002ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 0210 	bic.w	r2, r3, #16
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	031b      	lsls	r3, r3, #12
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <TIM_ResetCallback+0x7c>)
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <TIM_ResetCallback+0x80>)
 800302c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <TIM_ResetCallback+0x84>)
 8003034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a19      	ldr	r2, [pc, #100]	@ (80030a0 <TIM_ResetCallback+0x88>)
 800303c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a18      	ldr	r2, [pc, #96]	@ (80030a4 <TIM_ResetCallback+0x8c>)
 8003044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <TIM_ResetCallback+0x90>)
 800304c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <TIM_ResetCallback+0x94>)
 8003054:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <TIM_ResetCallback+0x98>)
 800305c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <TIM_ResetCallback+0x9c>)
 8003064:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a13      	ldr	r2, [pc, #76]	@ (80030b8 <TIM_ResetCallback+0xa0>)
 800306c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a12      	ldr	r2, [pc, #72]	@ (80030bc <TIM_ResetCallback+0xa4>)
 8003074:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <TIM_ResetCallback+0xa8>)
 800307c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a10      	ldr	r2, [pc, #64]	@ (80030c4 <TIM_ResetCallback+0xac>)
 8003084:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	08002cc3 	.word	0x08002cc3
 8003098:	08002cd7 	.word	0x08002cd7
 800309c:	08002d4f 	.word	0x08002d4f
 80030a0:	08002d63 	.word	0x08002d63
 80030a4:	08002cff 	.word	0x08002cff
 80030a8:	08002d13 	.word	0x08002d13
 80030ac:	08002ceb 	.word	0x08002ceb
 80030b0:	08002d27 	.word	0x08002d27
 80030b4:	08002d3b 	.word	0x08002d3b
 80030b8:	08002d77 	.word	0x08002d77
 80030bc:	080031c1 	.word	0x080031c1
 80030c0:	080031d5 	.word	0x080031d5
 80030c4:	080031e9 	.word	0x080031e9

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e05a      	b.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312c:	d01d      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1b      	ldr	r2, [pc, #108]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1a      	ldr	r2, [pc, #104]	@ (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10c      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40010400 	.word	0x40010400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40001800 	.word	0x40001800

080031c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e04d      	b.n	80032aa <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d111      	bne.n	800323e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fc60 	bl	8003ae8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a20      	ldr	r2, [pc, #128]	@ (80032b4 <HAL_UART_Init+0xb8>)
 8003234:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	@ 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fe78 	bl	8003f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800326a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800327a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	08000ae9 	.word	0x08000ae9

080032b8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	460b      	mov	r3, r1
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e07c      	b.n	80033da <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d150      	bne.n	800338e <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d844      	bhi.n	800337c <HAL_UART_RegisterCallback+0xc4>
 80032f2:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <HAL_UART_RegisterCallback+0x40>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	08003335 	.word	0x08003335
 8003300:	0800333d 	.word	0x0800333d
 8003304:	08003345 	.word	0x08003345
 8003308:	0800334d 	.word	0x0800334d
 800330c:	08003355 	.word	0x08003355
 8003310:	0800335d 	.word	0x0800335d
 8003314:	08003365 	.word	0x08003365
 8003318:	0800337d 	.word	0x0800337d
 800331c:	0800337d 	.word	0x0800337d
 8003320:	0800337d 	.word	0x0800337d
 8003324:	0800336d 	.word	0x0800336d
 8003328:	08003375 	.word	0x08003375
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8003332:	e051      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800333a:	e04d      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003342:	e049      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800334a:	e045      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003352:	e041      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800335a:	e03d      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003362:	e039      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800336a:	e035      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003372:	e031      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800337a:	e02d      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
        break;
 800338c:	e024      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d116      	bne.n	80033c8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800339a:	7afb      	ldrb	r3, [r7, #11]
 800339c:	2b0b      	cmp	r3, #11
 800339e:	d002      	beq.n	80033a6 <HAL_UART_RegisterCallback+0xee>
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d004      	beq.n	80033ae <HAL_UART_RegisterCallback+0xf6>
 80033a4:	e007      	b.n	80033b6 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80033ac:	e014      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80033b4:	e010      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
        break;
 80033c6:	e007      	b.n	80033d8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	d175      	bne.n	80034f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_UART_Transmit+0x2c>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e06e      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	@ 0x21
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fd fddf 	bl	8000fe8 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800345c:	e02e      	b.n	80034bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fb75 	bl	8003b58 <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03a      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cb      	bne.n	800345e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	@ 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fb41 	bl	8003b58 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0ba      	sub	sp, #232	@ 0xe8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800353e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_UART_IRQHandler+0x66>
 8003552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fc34 	bl	8003dcc <UART_Receive_IT>
      return;
 8003564:	e260      	b.n	8003a28 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80e1 	beq.w	8003732 <HAL_UART_IRQHandler+0x232>
 8003570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80d4 	beq.w	8003732 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xae>
 8003596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xd2>
 80035ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_UART_IRQHandler+0xf6>
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0204 	orr.w	r2, r3, #4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d011      	beq.n	8003626 <HAL_UART_IRQHandler+0x126>
 8003602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800360e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 81f7 	beq.w	8003a1e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_UART_IRQHandler+0x14e>
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fbbf 	bl	8003dcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b40      	cmp	r3, #64	@ 0x40
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_UART_IRQHandler+0x17a>
 8003672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d051      	beq.n	800371e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fac5 	bl	8003c0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d142      	bne.n	8003714 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1d9      	bne.n	800368e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d013      	beq.n	800370a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	4a80      	ldr	r2, [pc, #512]	@ (80038e8 <HAL_UART_IRQHandler+0x3e8>)
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f83b 	bl	800176a <HAL_DMA_Abort_IT>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	e011      	b.n	800372e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	e00c      	b.n	800372e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	e007      	b.n	800372e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800372c:	e177      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372e:	bf00      	nop
    return;
 8003730:	e175      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 8151 	bne.w	80039de <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 814a 	beq.w	80039de <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8143 	beq.w	80039de <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b40      	cmp	r3, #64	@ 0x40
 800377a:	f040 80b7 	bne.w	80038ec <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800378a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8147 	beq.w	8003a22 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800379c:	429a      	cmp	r2, r3
 800379e:	f080 8140 	bcs.w	8003a22 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b4:	f000 8088 	beq.w	80038c8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1d9      	bne.n	80037b8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003828:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800382c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003830:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800383a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e1      	bne.n	8003804 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003864:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003866:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800386a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e3      	bne.n	8003840 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003898:	f023 0310 	bic.w	r3, r3, #16
 800389c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e3      	bne.n	8003886 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fee1 	bl	800168a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80038da:	b292      	uxth	r2, r2
 80038dc:	1a8a      	subs	r2, r1, r2
 80038de:	b292      	uxth	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038e6:	e09c      	b.n	8003a22 <HAL_UART_IRQHandler+0x522>
 80038e8:	08003cd1 	.word	0x08003cd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 808f 	beq.w	8003a26 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 808a 	beq.w	8003a26 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003936:	647a      	str	r2, [r7, #68]	@ 0x44
 8003938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800393c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e3      	bne.n	8003912 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	623b      	str	r3, [r7, #32]
   return(result);
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800396e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039b4:	61fa      	str	r2, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	617b      	str	r3, [r7, #20]
   return(result);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80039d6:	4611      	mov	r1, r2
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039dc:	e023      	b.n	8003a26 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_UART_IRQHandler+0x4fe>
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f97f 	bl	8003cfa <UART_Transmit_IT>
    return;
 80039fc:	e014      	b.n	8003a28 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00e      	beq.n	8003a28 <HAL_UART_IRQHandler+0x528>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f9bf 	bl	8003d9a <UART_EndTransmit_IT>
    return;
 8003a1c:	e004      	b.n	8003a28 <HAL_UART_IRQHandler+0x528>
    return;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <HAL_UART_IRQHandler+0x528>
      return;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_UART_IRQHandler+0x528>
      return;
 8003a26:	bf00      	nop
  }
}
 8003a28:	37e8      	adds	r7, #232	@ 0xe8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop

08003a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <UART_InitCallbacksToDefault+0x4c>)
 8003af4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a0f      	ldr	r2, [pc, #60]	@ (8003b38 <UART_InitCallbacksToDefault+0x50>)
 8003afa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0f      	ldr	r2, [pc, #60]	@ (8003b3c <UART_InitCallbacksToDefault+0x54>)
 8003b00:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <UART_InitCallbacksToDefault+0x58>)
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b44 <UART_InitCallbacksToDefault+0x5c>)
 8003b0c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <UART_InitCallbacksToDefault+0x60>)
 8003b12:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <UART_InitCallbacksToDefault+0x64>)
 8003b18:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b50 <UART_InitCallbacksToDefault+0x68>)
 8003b1e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a0c      	ldr	r2, [pc, #48]	@ (8003b54 <UART_InitCallbacksToDefault+0x6c>)
 8003b24:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	08003a45 	.word	0x08003a45
 8003b38:	08003a31 	.word	0x08003a31
 8003b3c:	08003a6d 	.word	0x08003a6d
 8003b40:	08003a59 	.word	0x08003a59
 8003b44:	08003a81 	.word	0x08003a81
 8003b48:	08003a95 	.word	0x08003a95
 8003b4c:	08003aa9 	.word	0x08003aa9
 8003b50:	08003abd 	.word	0x08003abd
 8003b54:	08003ad1 	.word	0x08003ad1

08003b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	e03b      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d037      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fd fa39 	bl	8000fe8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e03a      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d023      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b80      	cmp	r3, #128	@ 0x80
 8003b9e:	d020      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b40      	cmp	r3, #64	@ 0x40
 8003ba4:	d01d      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d116      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f81d 	bl	8003c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00f      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d0b4      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b095      	sub	sp, #84	@ 0x54
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c32:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d119      	bne.n	8003cb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ca2:	61ba      	str	r2, [r7, #24]
 8003ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cc4:	bf00      	nop
 8003cc6:	3754      	adds	r7, #84	@ 0x54
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b21      	cmp	r3, #33	@ 0x21
 8003d0c:	d13e      	bne.n	8003d8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d16:	d114      	bne.n	8003d42 <UART_Transmit_IT+0x48>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d110      	bne.n	8003d42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]
 8003d40:	e008      	b.n	8003d54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6211      	str	r1, [r2, #32]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08c      	sub	sp, #48	@ 0x30
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b22      	cmp	r3, #34	@ 0x22
 8003dde:	f040 80b0 	bne.w	8003f42 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dea:	d117      	bne.n	8003e1c <UART_Receive_IT+0x50>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d113      	bne.n	8003e1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e1a:	e026      	b.n	8003e6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2e:	d007      	beq.n	8003e40 <UART_Receive_IT+0x74>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <UART_Receive_IT+0x82>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e008      	b.n	8003e60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4619      	mov	r1, r3
 8003e78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d15f      	bne.n	8003f3e <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0220 	bic.w	r2, r2, #32
 8003e8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d136      	bne.n	8003f32 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f023 0310 	bic.w	r3, r3, #16
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eea:	623a      	str	r2, [r7, #32]
 8003eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	69f9      	ldr	r1, [r7, #28]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d10a      	bne.n	8003f22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e003      	b.n	8003f3a <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e002      	b.n	8003f44 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3730      	adds	r7, #48	@ 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0c0      	sub	sp, #256	@ 0x100
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	ea40 0301 	orr.w	r3, r0, r1
 8003f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fa4:	f021 010c 	bic.w	r1, r1, #12
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	6999      	ldr	r1, [r3, #24]
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	ea40 0301 	orr.w	r3, r0, r1
 8003fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b8f      	ldr	r3, [pc, #572]	@ (8004218 <UART_SetConfig+0x2cc>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d005      	beq.n	8003fec <UART_SetConfig+0xa0>
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800421c <UART_SetConfig+0x2d0>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d104      	bne.n	8003ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fd fee4 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ff4:	e003      	b.n	8003ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff6:	f7fd fecb 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004008:	f040 810c 	bne.w	8004224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800400c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004010:	2200      	movs	r2, #0
 8004012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004016:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800401a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	1891      	adds	r1, r2, r2
 8004024:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004026:	415b      	adcs	r3, r3
 8004028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800402a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800402e:	4621      	mov	r1, r4
 8004030:	eb12 0801 	adds.w	r8, r2, r1
 8004034:	4629      	mov	r1, r5
 8004036:	eb43 0901 	adc.w	r9, r3, r1
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800404e:	4690      	mov	r8, r2
 8004050:	4699      	mov	r9, r3
 8004052:	4623      	mov	r3, r4
 8004054:	eb18 0303 	adds.w	r3, r8, r3
 8004058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800405c:	462b      	mov	r3, r5
 800405e:	eb49 0303 	adc.w	r3, r9, r3
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004072:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800407a:	460b      	mov	r3, r1
 800407c:	18db      	adds	r3, r3, r3
 800407e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004080:	4613      	mov	r3, r2
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	657b      	str	r3, [r7, #84]	@ 0x54
 8004088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800408c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004090:	f7fc f8b8 	bl	8000204 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b61      	ldr	r3, [pc, #388]	@ (8004220 <UART_SetConfig+0x2d4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040bc:	415b      	adcs	r3, r3
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040c4:	4641      	mov	r1, r8
 80040c6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0b01 	adc.w	fp, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e4:	4692      	mov	sl, r2
 80040e6:	469b      	mov	fp, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	eb1a 0303 	adds.w	r3, sl, r3
 80040ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb4b 0303 	adc.w	r3, fp, r3
 80040f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004108:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800410c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004110:	460b      	mov	r3, r1
 8004112:	18db      	adds	r3, r3, r3
 8004114:	643b      	str	r3, [r7, #64]	@ 0x40
 8004116:	4613      	mov	r3, r2
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004126:	f7fc f86d 	bl	8000204 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4611      	mov	r1, r2
 8004130:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2301 	umull	r2, r3, r3, r1
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2264      	movs	r2, #100	@ 0x64
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	1acb      	subs	r3, r1, r3
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004146:	4b36      	ldr	r3, [pc, #216]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004148:	fba3 2302 	umull	r2, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004154:	441c      	add	r4, r3
 8004156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004160:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004170:	415b      	adcs	r3, r3
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6339      	str	r1, [r7, #48]	@ 0x30
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041ac:	464b      	mov	r3, r9
 80041ae:	460a      	mov	r2, r1
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041cc:	460b      	mov	r3, r1
 80041ce:	18db      	adds	r3, r3, r3
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d2:	4613      	mov	r3, r2
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041e2:	f7fc f80f 	bl	8000204 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <UART_SetConfig+0x2d4>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	@ 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	@ 0x32
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <UART_SetConfig+0x2d4>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 0207 	and.w	r2, r3, #7
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4422      	add	r2, r4
 8004212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004214:	e106      	b.n	8004424 <UART_SetConfig+0x4d8>
 8004216:	bf00      	nop
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400
 8004220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004228:	2200      	movs	r2, #0
 800422a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800422e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004236:	4642      	mov	r2, r8
 8004238:	464b      	mov	r3, r9
 800423a:	1891      	adds	r1, r2, r2
 800423c:	6239      	str	r1, [r7, #32]
 800423e:	415b      	adcs	r3, r3
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
 8004242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004246:	4641      	mov	r1, r8
 8004248:	1854      	adds	r4, r2, r1
 800424a:	4649      	mov	r1, r9
 800424c:	eb43 0501 	adc.w	r5, r3, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800426c:	464b      	mov	r3, r9
 800426e:	eb45 0303 	adc.w	r3, r5, r3
 8004272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004282:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004292:	4629      	mov	r1, r5
 8004294:	008b      	lsls	r3, r1, #2
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429c:	4621      	mov	r1, r4
 800429e:	008a      	lsls	r2, r1, #2
 80042a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042a4:	f7fb ffae 	bl	8000204 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b60      	ldr	r3, [pc, #384]	@ (8004430 <UART_SetConfig+0x4e4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	011c      	lsls	r4, r3, #4
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	61b9      	str	r1, [r7, #24]
 80042d0:	415b      	adcs	r3, r3
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d8:	4641      	mov	r1, r8
 80042da:	1851      	adds	r1, r2, r1
 80042dc:	6139      	str	r1, [r7, #16]
 80042de:	4649      	mov	r1, r9
 80042e0:	414b      	adcs	r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fa:	4651      	mov	r1, sl
 80042fc:	00ca      	lsls	r2, r1, #3
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4603      	mov	r3, r0
 8004304:	4642      	mov	r2, r8
 8004306:	189b      	adds	r3, r3, r2
 8004308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800430c:	464b      	mov	r3, r9
 800430e:	460a      	mov	r2, r1
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004322:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004330:	4649      	mov	r1, r9
 8004332:	008b      	lsls	r3, r1, #2
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433a:	4641      	mov	r1, r8
 800433c:	008a      	lsls	r2, r1, #2
 800433e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004342:	f7fb ff5f 	bl	8000204 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <UART_SetConfig+0x4e4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	@ 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	@ 0x32
 8004360:	4a33      	ldr	r2, [pc, #204]	@ (8004430 <UART_SetConfig+0x4e4>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800436c:	441c      	add	r4, r3
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	673b      	str	r3, [r7, #112]	@ 0x70
 8004376:	677a      	str	r2, [r7, #116]	@ 0x74
 8004378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	415b      	adcs	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438c:	4641      	mov	r1, r8
 800438e:	1851      	adds	r1, r2, r1
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	4649      	mov	r1, r9
 8004394:	414b      	adcs	r3, r1
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a4:	4659      	mov	r1, fp
 80043a6:	00cb      	lsls	r3, r1, #3
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ae:	4651      	mov	r1, sl
 80043b0:	00ca      	lsls	r2, r1, #3
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	4642      	mov	r2, r8
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043be:	464b      	mov	r3, r9
 80043c0:	460a      	mov	r2, r1
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043e0:	4649      	mov	r1, r9
 80043e2:	008b      	lsls	r3, r1, #2
 80043e4:	4641      	mov	r1, r8
 80043e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ea:	4641      	mov	r1, r8
 80043ec:	008a      	lsls	r2, r1, #2
 80043ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043f2:	f7fb ff07 	bl	8000204 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <UART_SetConfig+0x4e4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	@ 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	@ 0x32
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <UART_SetConfig+0x4e4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4422      	add	r2, r4
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800442a:	46bd      	mov	sp, r7
 800442c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004430:	51eb851f 	.word	0x51eb851f

08004434 <std>:
 8004434:	2300      	movs	r3, #0
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
 800443a:	e9c0 3300 	strd	r3, r3, [r0]
 800443e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004442:	6083      	str	r3, [r0, #8]
 8004444:	8181      	strh	r1, [r0, #12]
 8004446:	6643      	str	r3, [r0, #100]	@ 0x64
 8004448:	81c2      	strh	r2, [r0, #14]
 800444a:	6183      	str	r3, [r0, #24]
 800444c:	4619      	mov	r1, r3
 800444e:	2208      	movs	r2, #8
 8004450:	305c      	adds	r0, #92	@ 0x5c
 8004452:	f000 f9e7 	bl	8004824 <memset>
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <std+0x58>)
 8004458:	6263      	str	r3, [r4, #36]	@ 0x24
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <std+0x5c>)
 800445c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <std+0x60>)
 8004460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <std+0x64>)
 8004464:	6323      	str	r3, [r4, #48]	@ 0x30
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <std+0x68>)
 8004468:	6224      	str	r4, [r4, #32]
 800446a:	429c      	cmp	r4, r3
 800446c:	d006      	beq.n	800447c <std+0x48>
 800446e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004472:	4294      	cmp	r4, r2
 8004474:	d002      	beq.n	800447c <std+0x48>
 8004476:	33d0      	adds	r3, #208	@ 0xd0
 8004478:	429c      	cmp	r4, r3
 800447a:	d105      	bne.n	8004488 <std+0x54>
 800447c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004484:	f000 ba46 	b.w	8004914 <__retarget_lock_init_recursive>
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	08004675 	.word	0x08004675
 8004490:	08004697 	.word	0x08004697
 8004494:	080046cf 	.word	0x080046cf
 8004498:	080046f3 	.word	0x080046f3
 800449c:	200002d0 	.word	0x200002d0

080044a0 <stdio_exit_handler>:
 80044a0:	4a02      	ldr	r2, [pc, #8]	@ (80044ac <stdio_exit_handler+0xc>)
 80044a2:	4903      	ldr	r1, [pc, #12]	@ (80044b0 <stdio_exit_handler+0x10>)
 80044a4:	4803      	ldr	r0, [pc, #12]	@ (80044b4 <stdio_exit_handler+0x14>)
 80044a6:	f000 b869 	b.w	800457c <_fwalk_sglue>
 80044aa:	bf00      	nop
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	08004c15 	.word	0x08004c15
 80044b4:	2000001c 	.word	0x2000001c

080044b8 <cleanup_stdio>:
 80044b8:	6841      	ldr	r1, [r0, #4]
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <cleanup_stdio+0x34>)
 80044bc:	4299      	cmp	r1, r3
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
 80044c2:	d001      	beq.n	80044c8 <cleanup_stdio+0x10>
 80044c4:	f000 fba6 	bl	8004c14 <_fflush_r>
 80044c8:	68a1      	ldr	r1, [r4, #8]
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <cleanup_stdio+0x38>)
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d002      	beq.n	80044d6 <cleanup_stdio+0x1e>
 80044d0:	4620      	mov	r0, r4
 80044d2:	f000 fb9f 	bl	8004c14 <_fflush_r>
 80044d6:	68e1      	ldr	r1, [r4, #12]
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <cleanup_stdio+0x3c>)
 80044da:	4299      	cmp	r1, r3
 80044dc:	d004      	beq.n	80044e8 <cleanup_stdio+0x30>
 80044de:	4620      	mov	r0, r4
 80044e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e4:	f000 bb96 	b.w	8004c14 <_fflush_r>
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	bf00      	nop
 80044ec:	200002d0 	.word	0x200002d0
 80044f0:	20000338 	.word	0x20000338
 80044f4:	200003a0 	.word	0x200003a0

080044f8 <global_stdio_init.part.0>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <global_stdio_init.part.0+0x30>)
 80044fc:	4c0b      	ldr	r4, [pc, #44]	@ (800452c <global_stdio_init.part.0+0x34>)
 80044fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004530 <global_stdio_init.part.0+0x38>)
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	4620      	mov	r0, r4
 8004504:	2200      	movs	r2, #0
 8004506:	2104      	movs	r1, #4
 8004508:	f7ff ff94 	bl	8004434 <std>
 800450c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004510:	2201      	movs	r2, #1
 8004512:	2109      	movs	r1, #9
 8004514:	f7ff ff8e 	bl	8004434 <std>
 8004518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800451c:	2202      	movs	r2, #2
 800451e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004522:	2112      	movs	r1, #18
 8004524:	f7ff bf86 	b.w	8004434 <std>
 8004528:	20000408 	.word	0x20000408
 800452c:	200002d0 	.word	0x200002d0
 8004530:	080044a1 	.word	0x080044a1

08004534 <__sfp_lock_acquire>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__sfp_lock_acquire+0x8>)
 8004536:	f000 b9ee 	b.w	8004916 <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	20000411 	.word	0x20000411

08004540 <__sfp_lock_release>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__sfp_lock_release+0x8>)
 8004542:	f000 b9e9 	b.w	8004918 <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	20000411 	.word	0x20000411

0800454c <__sinit>:
 800454c:	b510      	push	{r4, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	f7ff fff0 	bl	8004534 <__sfp_lock_acquire>
 8004554:	6a23      	ldr	r3, [r4, #32]
 8004556:	b11b      	cbz	r3, 8004560 <__sinit+0x14>
 8004558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800455c:	f7ff bff0 	b.w	8004540 <__sfp_lock_release>
 8004560:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__sinit+0x28>)
 8004562:	6223      	str	r3, [r4, #32]
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__sinit+0x2c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f5      	bne.n	8004558 <__sinit+0xc>
 800456c:	f7ff ffc4 	bl	80044f8 <global_stdio_init.part.0>
 8004570:	e7f2      	b.n	8004558 <__sinit+0xc>
 8004572:	bf00      	nop
 8004574:	080044b9 	.word	0x080044b9
 8004578:	20000408 	.word	0x20000408

0800457c <_fwalk_sglue>:
 800457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004580:	4607      	mov	r7, r0
 8004582:	4688      	mov	r8, r1
 8004584:	4614      	mov	r4, r2
 8004586:	2600      	movs	r6, #0
 8004588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800458c:	f1b9 0901 	subs.w	r9, r9, #1
 8004590:	d505      	bpl.n	800459e <_fwalk_sglue+0x22>
 8004592:	6824      	ldr	r4, [r4, #0]
 8004594:	2c00      	cmp	r4, #0
 8004596:	d1f7      	bne.n	8004588 <_fwalk_sglue+0xc>
 8004598:	4630      	mov	r0, r6
 800459a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d907      	bls.n	80045b4 <_fwalk_sglue+0x38>
 80045a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045a8:	3301      	adds	r3, #1
 80045aa:	d003      	beq.n	80045b4 <_fwalk_sglue+0x38>
 80045ac:	4629      	mov	r1, r5
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	4306      	orrs	r6, r0
 80045b4:	3568      	adds	r5, #104	@ 0x68
 80045b6:	e7e9      	b.n	800458c <_fwalk_sglue+0x10>

080045b8 <_puts_r>:
 80045b8:	6a03      	ldr	r3, [r0, #32]
 80045ba:	b570      	push	{r4, r5, r6, lr}
 80045bc:	6884      	ldr	r4, [r0, #8]
 80045be:	4605      	mov	r5, r0
 80045c0:	460e      	mov	r6, r1
 80045c2:	b90b      	cbnz	r3, 80045c8 <_puts_r+0x10>
 80045c4:	f7ff ffc2 	bl	800454c <__sinit>
 80045c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045ca:	07db      	lsls	r3, r3, #31
 80045cc:	d405      	bmi.n	80045da <_puts_r+0x22>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	0598      	lsls	r0, r3, #22
 80045d2:	d402      	bmi.n	80045da <_puts_r+0x22>
 80045d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045d6:	f000 f99e 	bl	8004916 <__retarget_lock_acquire_recursive>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	0719      	lsls	r1, r3, #28
 80045de:	d502      	bpl.n	80045e6 <_puts_r+0x2e>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d135      	bne.n	8004652 <_puts_r+0x9a>
 80045e6:	4621      	mov	r1, r4
 80045e8:	4628      	mov	r0, r5
 80045ea:	f000 f8c5 	bl	8004778 <__swsetup_r>
 80045ee:	b380      	cbz	r0, 8004652 <_puts_r+0x9a>
 80045f0:	f04f 35ff 	mov.w	r5, #4294967295
 80045f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045f6:	07da      	lsls	r2, r3, #31
 80045f8:	d405      	bmi.n	8004606 <_puts_r+0x4e>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	059b      	lsls	r3, r3, #22
 80045fe:	d402      	bmi.n	8004606 <_puts_r+0x4e>
 8004600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004602:	f000 f989 	bl	8004918 <__retarget_lock_release_recursive>
 8004606:	4628      	mov	r0, r5
 8004608:	bd70      	pop	{r4, r5, r6, pc}
 800460a:	2b00      	cmp	r3, #0
 800460c:	da04      	bge.n	8004618 <_puts_r+0x60>
 800460e:	69a2      	ldr	r2, [r4, #24]
 8004610:	429a      	cmp	r2, r3
 8004612:	dc17      	bgt.n	8004644 <_puts_r+0x8c>
 8004614:	290a      	cmp	r1, #10
 8004616:	d015      	beq.n	8004644 <_puts_r+0x8c>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	6022      	str	r2, [r4, #0]
 800461e:	7019      	strb	r1, [r3, #0]
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004626:	3b01      	subs	r3, #1
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	2900      	cmp	r1, #0
 800462c:	d1ed      	bne.n	800460a <_puts_r+0x52>
 800462e:	2b00      	cmp	r3, #0
 8004630:	da11      	bge.n	8004656 <_puts_r+0x9e>
 8004632:	4622      	mov	r2, r4
 8004634:	210a      	movs	r1, #10
 8004636:	4628      	mov	r0, r5
 8004638:	f000 f85f 	bl	80046fa <__swbuf_r>
 800463c:	3001      	adds	r0, #1
 800463e:	d0d7      	beq.n	80045f0 <_puts_r+0x38>
 8004640:	250a      	movs	r5, #10
 8004642:	e7d7      	b.n	80045f4 <_puts_r+0x3c>
 8004644:	4622      	mov	r2, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f857 	bl	80046fa <__swbuf_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d1e7      	bne.n	8004620 <_puts_r+0x68>
 8004650:	e7ce      	b.n	80045f0 <_puts_r+0x38>
 8004652:	3e01      	subs	r6, #1
 8004654:	e7e4      	b.n	8004620 <_puts_r+0x68>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	220a      	movs	r2, #10
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e7ee      	b.n	8004640 <_puts_r+0x88>
	...

08004664 <puts>:
 8004664:	4b02      	ldr	r3, [pc, #8]	@ (8004670 <puts+0xc>)
 8004666:	4601      	mov	r1, r0
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7ff bfa5 	b.w	80045b8 <_puts_r>
 800466e:	bf00      	nop
 8004670:	20000018 	.word	0x20000018

08004674 <__sread>:
 8004674:	b510      	push	{r4, lr}
 8004676:	460c      	mov	r4, r1
 8004678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467c:	f000 f8fc 	bl	8004878 <_read_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	bfab      	itete	ge
 8004684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004686:	89a3      	ldrhlt	r3, [r4, #12]
 8004688:	181b      	addge	r3, r3, r0
 800468a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800468e:	bfac      	ite	ge
 8004690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004692:	81a3      	strhlt	r3, [r4, #12]
 8004694:	bd10      	pop	{r4, pc}

08004696 <__swrite>:
 8004696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	461f      	mov	r7, r3
 800469c:	898b      	ldrh	r3, [r1, #12]
 800469e:	05db      	lsls	r3, r3, #23
 80046a0:	4605      	mov	r5, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	4616      	mov	r6, r2
 80046a6:	d505      	bpl.n	80046b4 <__swrite+0x1e>
 80046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ac:	2302      	movs	r3, #2
 80046ae:	2200      	movs	r2, #0
 80046b0:	f000 f8d0 	bl	8004854 <_lseek_r>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	4632      	mov	r2, r6
 80046c2:	463b      	mov	r3, r7
 80046c4:	4628      	mov	r0, r5
 80046c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ca:	f000 b8e7 	b.w	800489c <_write_r>

080046ce <__sseek>:
 80046ce:	b510      	push	{r4, lr}
 80046d0:	460c      	mov	r4, r1
 80046d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d6:	f000 f8bd 	bl	8004854 <_lseek_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	bf15      	itete	ne
 80046e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046ea:	81a3      	strheq	r3, [r4, #12]
 80046ec:	bf18      	it	ne
 80046ee:	81a3      	strhne	r3, [r4, #12]
 80046f0:	bd10      	pop	{r4, pc}

080046f2 <__sclose>:
 80046f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f6:	f000 b89d 	b.w	8004834 <_close_r>

080046fa <__swbuf_r>:
 80046fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fc:	460e      	mov	r6, r1
 80046fe:	4614      	mov	r4, r2
 8004700:	4605      	mov	r5, r0
 8004702:	b118      	cbz	r0, 800470c <__swbuf_r+0x12>
 8004704:	6a03      	ldr	r3, [r0, #32]
 8004706:	b90b      	cbnz	r3, 800470c <__swbuf_r+0x12>
 8004708:	f7ff ff20 	bl	800454c <__sinit>
 800470c:	69a3      	ldr	r3, [r4, #24]
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	071a      	lsls	r2, r3, #28
 8004714:	d501      	bpl.n	800471a <__swbuf_r+0x20>
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	b943      	cbnz	r3, 800472c <__swbuf_r+0x32>
 800471a:	4621      	mov	r1, r4
 800471c:	4628      	mov	r0, r5
 800471e:	f000 f82b 	bl	8004778 <__swsetup_r>
 8004722:	b118      	cbz	r0, 800472c <__swbuf_r+0x32>
 8004724:	f04f 37ff 	mov.w	r7, #4294967295
 8004728:	4638      	mov	r0, r7
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	6922      	ldr	r2, [r4, #16]
 8004730:	1a98      	subs	r0, r3, r2
 8004732:	6963      	ldr	r3, [r4, #20]
 8004734:	b2f6      	uxtb	r6, r6
 8004736:	4283      	cmp	r3, r0
 8004738:	4637      	mov	r7, r6
 800473a:	dc05      	bgt.n	8004748 <__swbuf_r+0x4e>
 800473c:	4621      	mov	r1, r4
 800473e:	4628      	mov	r0, r5
 8004740:	f000 fa68 	bl	8004c14 <_fflush_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	d1ed      	bne.n	8004724 <__swbuf_r+0x2a>
 8004748:	68a3      	ldr	r3, [r4, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	701e      	strb	r6, [r3, #0]
 8004756:	6962      	ldr	r2, [r4, #20]
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	429a      	cmp	r2, r3
 800475c:	d004      	beq.n	8004768 <__swbuf_r+0x6e>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	07db      	lsls	r3, r3, #31
 8004762:	d5e1      	bpl.n	8004728 <__swbuf_r+0x2e>
 8004764:	2e0a      	cmp	r6, #10
 8004766:	d1df      	bne.n	8004728 <__swbuf_r+0x2e>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 fa52 	bl	8004c14 <_fflush_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0d9      	beq.n	8004728 <__swbuf_r+0x2e>
 8004774:	e7d6      	b.n	8004724 <__swbuf_r+0x2a>
	...

08004778 <__swsetup_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4b29      	ldr	r3, [pc, #164]	@ (8004820 <__swsetup_r+0xa8>)
 800477c:	4605      	mov	r5, r0
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	460c      	mov	r4, r1
 8004782:	b118      	cbz	r0, 800478c <__swsetup_r+0x14>
 8004784:	6a03      	ldr	r3, [r0, #32]
 8004786:	b90b      	cbnz	r3, 800478c <__swsetup_r+0x14>
 8004788:	f7ff fee0 	bl	800454c <__sinit>
 800478c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004790:	0719      	lsls	r1, r3, #28
 8004792:	d422      	bmi.n	80047da <__swsetup_r+0x62>
 8004794:	06da      	lsls	r2, r3, #27
 8004796:	d407      	bmi.n	80047a8 <__swsetup_r+0x30>
 8004798:	2209      	movs	r2, #9
 800479a:	602a      	str	r2, [r5, #0]
 800479c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	f04f 30ff 	mov.w	r0, #4294967295
 80047a6:	e033      	b.n	8004810 <__swsetup_r+0x98>
 80047a8:	0758      	lsls	r0, r3, #29
 80047aa:	d512      	bpl.n	80047d2 <__swsetup_r+0x5a>
 80047ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ae:	b141      	cbz	r1, 80047c2 <__swsetup_r+0x4a>
 80047b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047b4:	4299      	cmp	r1, r3
 80047b6:	d002      	beq.n	80047be <__swsetup_r+0x46>
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f8af 	bl	800491c <_free_r>
 80047be:	2300      	movs	r3, #0
 80047c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	2300      	movs	r3, #0
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	b94b      	cbnz	r3, 80047f2 <__swsetup_r+0x7a>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e8:	d003      	beq.n	80047f2 <__swsetup_r+0x7a>
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 fa5f 	bl	8004cb0 <__smakebuf_r>
 80047f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f6:	f013 0201 	ands.w	r2, r3, #1
 80047fa:	d00a      	beq.n	8004812 <__swsetup_r+0x9a>
 80047fc:	2200      	movs	r2, #0
 80047fe:	60a2      	str	r2, [r4, #8]
 8004800:	6962      	ldr	r2, [r4, #20]
 8004802:	4252      	negs	r2, r2
 8004804:	61a2      	str	r2, [r4, #24]
 8004806:	6922      	ldr	r2, [r4, #16]
 8004808:	b942      	cbnz	r2, 800481c <__swsetup_r+0xa4>
 800480a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800480e:	d1c5      	bne.n	800479c <__swsetup_r+0x24>
 8004810:	bd38      	pop	{r3, r4, r5, pc}
 8004812:	0799      	lsls	r1, r3, #30
 8004814:	bf58      	it	pl
 8004816:	6962      	ldrpl	r2, [r4, #20]
 8004818:	60a2      	str	r2, [r4, #8]
 800481a:	e7f4      	b.n	8004806 <__swsetup_r+0x8e>
 800481c:	2000      	movs	r0, #0
 800481e:	e7f7      	b.n	8004810 <__swsetup_r+0x98>
 8004820:	20000018 	.word	0x20000018

08004824 <memset>:
 8004824:	4402      	add	r2, r0
 8004826:	4603      	mov	r3, r0
 8004828:	4293      	cmp	r3, r2
 800482a:	d100      	bne.n	800482e <memset+0xa>
 800482c:	4770      	bx	lr
 800482e:	f803 1b01 	strb.w	r1, [r3], #1
 8004832:	e7f9      	b.n	8004828 <memset+0x4>

08004834 <_close_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4d06      	ldr	r5, [pc, #24]	@ (8004850 <_close_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc fac5 	bl	8000dce <_close>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_close_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_close_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	2000040c 	.word	0x2000040c

08004854 <_lseek_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d07      	ldr	r5, [pc, #28]	@ (8004874 <_lseek_r+0x20>)
 8004858:	4604      	mov	r4, r0
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	2200      	movs	r2, #0
 8004860:	602a      	str	r2, [r5, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f7fc fada 	bl	8000e1c <_lseek>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_lseek_r+0x1e>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b103      	cbz	r3, 8004872 <_lseek_r+0x1e>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	2000040c 	.word	0x2000040c

08004878 <_read_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d07      	ldr	r5, [pc, #28]	@ (8004898 <_read_r+0x20>)
 800487c:	4604      	mov	r4, r0
 800487e:	4608      	mov	r0, r1
 8004880:	4611      	mov	r1, r2
 8004882:	2200      	movs	r2, #0
 8004884:	602a      	str	r2, [r5, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f7fc fa68 	bl	8000d5c <_read>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_read_r+0x1e>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_read_r+0x1e>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	2000040c 	.word	0x2000040c

0800489c <_write_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d07      	ldr	r5, [pc, #28]	@ (80048bc <_write_r+0x20>)
 80048a0:	4604      	mov	r4, r0
 80048a2:	4608      	mov	r0, r1
 80048a4:	4611      	mov	r1, r2
 80048a6:	2200      	movs	r2, #0
 80048a8:	602a      	str	r2, [r5, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7fc fa73 	bl	8000d96 <_write>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_write_r+0x1e>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_write_r+0x1e>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	2000040c 	.word	0x2000040c

080048c0 <__errno>:
 80048c0:	4b01      	ldr	r3, [pc, #4]	@ (80048c8 <__errno+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000018 	.word	0x20000018

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004904 <__libc_init_array+0x38>)
 80048d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004908 <__libc_init_array+0x3c>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	2600      	movs	r6, #0
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	4d0b      	ldr	r5, [pc, #44]	@ (800490c <__libc_init_array+0x40>)
 80048de:	4c0c      	ldr	r4, [pc, #48]	@ (8004910 <__libc_init_array+0x44>)
 80048e0:	f000 fa54 	bl	8004d8c <_init>
 80048e4:	1b64      	subs	r4, r4, r5
 80048e6:	10a4      	asrs	r4, r4, #2
 80048e8:	2600      	movs	r6, #0
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	08004e38 	.word	0x08004e38
 8004908:	08004e38 	.word	0x08004e38
 800490c:	08004e38 	.word	0x08004e38
 8004910:	08004e3c 	.word	0x08004e3c

08004914 <__retarget_lock_init_recursive>:
 8004914:	4770      	bx	lr

08004916 <__retarget_lock_acquire_recursive>:
 8004916:	4770      	bx	lr

08004918 <__retarget_lock_release_recursive>:
 8004918:	4770      	bx	lr
	...

0800491c <_free_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4605      	mov	r5, r0
 8004920:	2900      	cmp	r1, #0
 8004922:	d041      	beq.n	80049a8 <_free_r+0x8c>
 8004924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004928:	1f0c      	subs	r4, r1, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfb8      	it	lt
 800492e:	18e4      	addlt	r4, r4, r3
 8004930:	f000 f8e0 	bl	8004af4 <__malloc_lock>
 8004934:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <_free_r+0x90>)
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	b933      	cbnz	r3, 8004948 <_free_r+0x2c>
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6014      	str	r4, [r2, #0]
 800493e:	4628      	mov	r0, r5
 8004940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004944:	f000 b8dc 	b.w	8004b00 <__malloc_unlock>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d908      	bls.n	800495e <_free_r+0x42>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	e7ed      	b.n	800493a <_free_r+0x1e>
 800495e:	461a      	mov	r2, r3
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b10b      	cbz	r3, 8004968 <_free_r+0x4c>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d9fa      	bls.n	800495e <_free_r+0x42>
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	1850      	adds	r0, r2, r1
 800496c:	42a0      	cmp	r0, r4
 800496e:	d10b      	bne.n	8004988 <_free_r+0x6c>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	4401      	add	r1, r0
 8004974:	1850      	adds	r0, r2, r1
 8004976:	4283      	cmp	r3, r0
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	d1e0      	bne.n	800493e <_free_r+0x22>
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	6053      	str	r3, [r2, #4]
 8004982:	4408      	add	r0, r1
 8004984:	6010      	str	r0, [r2, #0]
 8004986:	e7da      	b.n	800493e <_free_r+0x22>
 8004988:	d902      	bls.n	8004990 <_free_r+0x74>
 800498a:	230c      	movs	r3, #12
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	e7d6      	b.n	800493e <_free_r+0x22>
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	1821      	adds	r1, r4, r0
 8004994:	428b      	cmp	r3, r1
 8004996:	bf04      	itt	eq
 8004998:	6819      	ldreq	r1, [r3, #0]
 800499a:	685b      	ldreq	r3, [r3, #4]
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	bf04      	itt	eq
 80049a0:	1809      	addeq	r1, r1, r0
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	6054      	str	r4, [r2, #4]
 80049a6:	e7ca      	b.n	800493e <_free_r+0x22>
 80049a8:	bd38      	pop	{r3, r4, r5, pc}
 80049aa:	bf00      	nop
 80049ac:	20000418 	.word	0x20000418

080049b0 <sbrk_aligned>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4e0f      	ldr	r6, [pc, #60]	@ (80049f0 <sbrk_aligned+0x40>)
 80049b4:	460c      	mov	r4, r1
 80049b6:	6831      	ldr	r1, [r6, #0]
 80049b8:	4605      	mov	r5, r0
 80049ba:	b911      	cbnz	r1, 80049c2 <sbrk_aligned+0x12>
 80049bc:	f000 f9d6 	bl	8004d6c <_sbrk_r>
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f9d1 	bl	8004d6c <_sbrk_r>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d103      	bne.n	80049d6 <sbrk_aligned+0x26>
 80049ce:	f04f 34ff 	mov.w	r4, #4294967295
 80049d2:	4620      	mov	r0, r4
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	1cc4      	adds	r4, r0, #3
 80049d8:	f024 0403 	bic.w	r4, r4, #3
 80049dc:	42a0      	cmp	r0, r4
 80049de:	d0f8      	beq.n	80049d2 <sbrk_aligned+0x22>
 80049e0:	1a21      	subs	r1, r4, r0
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f9c2 	bl	8004d6c <_sbrk_r>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d1f2      	bne.n	80049d2 <sbrk_aligned+0x22>
 80049ec:	e7ef      	b.n	80049ce <sbrk_aligned+0x1e>
 80049ee:	bf00      	nop
 80049f0:	20000414 	.word	0x20000414

080049f4 <_malloc_r>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	1ccd      	adds	r5, r1, #3
 80049fa:	f025 0503 	bic.w	r5, r5, #3
 80049fe:	3508      	adds	r5, #8
 8004a00:	2d0c      	cmp	r5, #12
 8004a02:	bf38      	it	cc
 8004a04:	250c      	movcc	r5, #12
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	4606      	mov	r6, r0
 8004a0a:	db01      	blt.n	8004a10 <_malloc_r+0x1c>
 8004a0c:	42a9      	cmp	r1, r5
 8004a0e:	d904      	bls.n	8004a1a <_malloc_r+0x26>
 8004a10:	230c      	movs	r3, #12
 8004a12:	6033      	str	r3, [r6, #0]
 8004a14:	2000      	movs	r0, #0
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004af0 <_malloc_r+0xfc>
 8004a1e:	f000 f869 	bl	8004af4 <__malloc_lock>
 8004a22:	f8d8 3000 	ldr.w	r3, [r8]
 8004a26:	461c      	mov	r4, r3
 8004a28:	bb44      	cbnz	r4, 8004a7c <_malloc_r+0x88>
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f7ff ffbf 	bl	80049b0 <sbrk_aligned>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	4604      	mov	r4, r0
 8004a36:	d158      	bne.n	8004aea <_malloc_r+0xf6>
 8004a38:	f8d8 4000 	ldr.w	r4, [r8]
 8004a3c:	4627      	mov	r7, r4
 8004a3e:	2f00      	cmp	r7, #0
 8004a40:	d143      	bne.n	8004aca <_malloc_r+0xd6>
 8004a42:	2c00      	cmp	r4, #0
 8004a44:	d04b      	beq.n	8004ade <_malloc_r+0xea>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	4639      	mov	r1, r7
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	eb04 0903 	add.w	r9, r4, r3
 8004a50:	f000 f98c 	bl	8004d6c <_sbrk_r>
 8004a54:	4581      	cmp	r9, r0
 8004a56:	d142      	bne.n	8004ade <_malloc_r+0xea>
 8004a58:	6821      	ldr	r1, [r4, #0]
 8004a5a:	1a6d      	subs	r5, r5, r1
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff ffa6 	bl	80049b0 <sbrk_aligned>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d03a      	beq.n	8004ade <_malloc_r+0xea>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	442b      	add	r3, r5
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	bb62      	cbnz	r2, 8004ad0 <_malloc_r+0xdc>
 8004a76:	f8c8 7000 	str.w	r7, [r8]
 8004a7a:	e00f      	b.n	8004a9c <_malloc_r+0xa8>
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	1b52      	subs	r2, r2, r5
 8004a80:	d420      	bmi.n	8004ac4 <_malloc_r+0xd0>
 8004a82:	2a0b      	cmp	r2, #11
 8004a84:	d917      	bls.n	8004ab6 <_malloc_r+0xc2>
 8004a86:	1961      	adds	r1, r4, r5
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	6025      	str	r5, [r4, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	6059      	strne	r1, [r3, #4]
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	bf08      	it	eq
 8004a94:	f8c8 1000 	streq.w	r1, [r8]
 8004a98:	5162      	str	r2, [r4, r5]
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 f82f 	bl	8004b00 <__malloc_unlock>
 8004aa2:	f104 000b 	add.w	r0, r4, #11
 8004aa6:	1d23      	adds	r3, r4, #4
 8004aa8:	f020 0007 	bic.w	r0, r0, #7
 8004aac:	1ac2      	subs	r2, r0, r3
 8004aae:	bf1c      	itt	ne
 8004ab0:	1a1b      	subne	r3, r3, r0
 8004ab2:	50a3      	strne	r3, [r4, r2]
 8004ab4:	e7af      	b.n	8004a16 <_malloc_r+0x22>
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	bf0c      	ite	eq
 8004abc:	f8c8 2000 	streq.w	r2, [r8]
 8004ac0:	605a      	strne	r2, [r3, #4]
 8004ac2:	e7eb      	b.n	8004a9c <_malloc_r+0xa8>
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	6864      	ldr	r4, [r4, #4]
 8004ac8:	e7ae      	b.n	8004a28 <_malloc_r+0x34>
 8004aca:	463c      	mov	r4, r7
 8004acc:	687f      	ldr	r7, [r7, #4]
 8004ace:	e7b6      	b.n	8004a3e <_malloc_r+0x4a>
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d1fb      	bne.n	8004ad0 <_malloc_r+0xdc>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6053      	str	r3, [r2, #4]
 8004adc:	e7de      	b.n	8004a9c <_malloc_r+0xa8>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f80c 	bl	8004b00 <__malloc_unlock>
 8004ae8:	e794      	b.n	8004a14 <_malloc_r+0x20>
 8004aea:	6005      	str	r5, [r0, #0]
 8004aec:	e7d6      	b.n	8004a9c <_malloc_r+0xa8>
 8004aee:	bf00      	nop
 8004af0:	20000418 	.word	0x20000418

08004af4 <__malloc_lock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	@ (8004afc <__malloc_lock+0x8>)
 8004af6:	f7ff bf0e 	b.w	8004916 <__retarget_lock_acquire_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000410 	.word	0x20000410

08004b00 <__malloc_unlock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	@ (8004b08 <__malloc_unlock+0x8>)
 8004b02:	f7ff bf09 	b.w	8004918 <__retarget_lock_release_recursive>
 8004b06:	bf00      	nop
 8004b08:	20000410 	.word	0x20000410

08004b0c <__sflush_r>:
 8004b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b14:	0716      	lsls	r6, r2, #28
 8004b16:	4605      	mov	r5, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	d454      	bmi.n	8004bc6 <__sflush_r+0xba>
 8004b1c:	684b      	ldr	r3, [r1, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	dc02      	bgt.n	8004b28 <__sflush_r+0x1c>
 8004b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	dd48      	ble.n	8004bba <__sflush_r+0xae>
 8004b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	d045      	beq.n	8004bba <__sflush_r+0xae>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b34:	682f      	ldr	r7, [r5, #0]
 8004b36:	6a21      	ldr	r1, [r4, #32]
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	d030      	beq.n	8004b9e <__sflush_r+0x92>
 8004b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	0759      	lsls	r1, r3, #29
 8004b42:	d505      	bpl.n	8004b50 <__sflush_r+0x44>
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b4a:	b10b      	cbz	r3, 8004b50 <__sflush_r+0x44>
 8004b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b54:	6a21      	ldr	r1, [r4, #32]
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b0      	blx	r6
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	d106      	bne.n	8004b6e <__sflush_r+0x62>
 8004b60:	6829      	ldr	r1, [r5, #0]
 8004b62:	291d      	cmp	r1, #29
 8004b64:	d82b      	bhi.n	8004bbe <__sflush_r+0xb2>
 8004b66:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <__sflush_r+0x104>)
 8004b68:	410a      	asrs	r2, r1
 8004b6a:	07d6      	lsls	r6, r2, #31
 8004b6c:	d427      	bmi.n	8004bbe <__sflush_r+0xb2>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	6062      	str	r2, [r4, #4]
 8004b72:	04d9      	lsls	r1, r3, #19
 8004b74:	6922      	ldr	r2, [r4, #16]
 8004b76:	6022      	str	r2, [r4, #0]
 8004b78:	d504      	bpl.n	8004b84 <__sflush_r+0x78>
 8004b7a:	1c42      	adds	r2, r0, #1
 8004b7c:	d101      	bne.n	8004b82 <__sflush_r+0x76>
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	b903      	cbnz	r3, 8004b84 <__sflush_r+0x78>
 8004b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b86:	602f      	str	r7, [r5, #0]
 8004b88:	b1b9      	cbz	r1, 8004bba <__sflush_r+0xae>
 8004b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	d002      	beq.n	8004b98 <__sflush_r+0x8c>
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7ff fec2 	bl	800491c <_free_r>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b9c:	e00d      	b.n	8004bba <__sflush_r+0xae>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b0      	blx	r6
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	1c50      	adds	r0, r2, #1
 8004ba8:	d1c9      	bne.n	8004b3e <__sflush_r+0x32>
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0c6      	beq.n	8004b3e <__sflush_r+0x32>
 8004bb0:	2b1d      	cmp	r3, #29
 8004bb2:	d001      	beq.n	8004bb8 <__sflush_r+0xac>
 8004bb4:	2b16      	cmp	r3, #22
 8004bb6:	d11e      	bne.n	8004bf6 <__sflush_r+0xea>
 8004bb8:	602f      	str	r7, [r5, #0]
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e022      	b.n	8004c04 <__sflush_r+0xf8>
 8004bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	e01b      	b.n	8004bfe <__sflush_r+0xf2>
 8004bc6:	690f      	ldr	r7, [r1, #16]
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	d0f6      	beq.n	8004bba <__sflush_r+0xae>
 8004bcc:	0793      	lsls	r3, r2, #30
 8004bce:	680e      	ldr	r6, [r1, #0]
 8004bd0:	bf08      	it	eq
 8004bd2:	694b      	ldreq	r3, [r1, #20]
 8004bd4:	600f      	str	r7, [r1, #0]
 8004bd6:	bf18      	it	ne
 8004bd8:	2300      	movne	r3, #0
 8004bda:	eba6 0807 	sub.w	r8, r6, r7
 8004bde:	608b      	str	r3, [r1, #8]
 8004be0:	f1b8 0f00 	cmp.w	r8, #0
 8004be4:	dde9      	ble.n	8004bba <__sflush_r+0xae>
 8004be6:	6a21      	ldr	r1, [r4, #32]
 8004be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bea:	4643      	mov	r3, r8
 8004bec:	463a      	mov	r2, r7
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b0      	blx	r6
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	dc08      	bgt.n	8004c08 <__sflush_r+0xfc>
 8004bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c08:	4407      	add	r7, r0
 8004c0a:	eba8 0800 	sub.w	r8, r8, r0
 8004c0e:	e7e7      	b.n	8004be0 <__sflush_r+0xd4>
 8004c10:	dfbffffe 	.word	0xdfbffffe

08004c14 <_fflush_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b913      	cbnz	r3, 8004c24 <_fflush_r+0x10>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	4628      	mov	r0, r5
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	b118      	cbz	r0, 8004c2e <_fflush_r+0x1a>
 8004c26:	6a03      	ldr	r3, [r0, #32]
 8004c28:	b90b      	cbnz	r3, 8004c2e <_fflush_r+0x1a>
 8004c2a:	f7ff fc8f 	bl	800454c <__sinit>
 8004c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f3      	beq.n	8004c1e <_fflush_r+0xa>
 8004c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c38:	07d0      	lsls	r0, r2, #31
 8004c3a:	d404      	bmi.n	8004c46 <_fflush_r+0x32>
 8004c3c:	0599      	lsls	r1, r3, #22
 8004c3e:	d402      	bmi.n	8004c46 <_fflush_r+0x32>
 8004c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c42:	f7ff fe68 	bl	8004916 <__retarget_lock_acquire_recursive>
 8004c46:	4628      	mov	r0, r5
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f7ff ff5f 	bl	8004b0c <__sflush_r>
 8004c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c50:	07da      	lsls	r2, r3, #31
 8004c52:	4605      	mov	r5, r0
 8004c54:	d4e4      	bmi.n	8004c20 <_fflush_r+0xc>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	059b      	lsls	r3, r3, #22
 8004c5a:	d4e1      	bmi.n	8004c20 <_fflush_r+0xc>
 8004c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5e:	f7ff fe5b 	bl	8004918 <__retarget_lock_release_recursive>
 8004c62:	e7dd      	b.n	8004c20 <_fflush_r+0xc>

08004c64 <__swhatbuf_r>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	460c      	mov	r4, r1
 8004c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	b096      	sub	sp, #88	@ 0x58
 8004c70:	4615      	mov	r5, r2
 8004c72:	461e      	mov	r6, r3
 8004c74:	da0d      	bge.n	8004c92 <__swhatbuf_r+0x2e>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2340      	movne	r3, #64	@ 0x40
 8004c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c88:	2000      	movs	r0, #0
 8004c8a:	6031      	str	r1, [r6, #0]
 8004c8c:	602b      	str	r3, [r5, #0]
 8004c8e:	b016      	add	sp, #88	@ 0x58
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	466a      	mov	r2, sp
 8004c94:	f000 f848 	bl	8004d28 <_fstat_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	dbec      	blt.n	8004c76 <__swhatbuf_r+0x12>
 8004c9c:	9901      	ldr	r1, [sp, #4]
 8004c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ca6:	4259      	negs	r1, r3
 8004ca8:	4159      	adcs	r1, r3
 8004caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cae:	e7eb      	b.n	8004c88 <__swhatbuf_r+0x24>

08004cb0 <__smakebuf_r>:
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cb4:	079d      	lsls	r5, r3, #30
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	d507      	bpl.n	8004ccc <__smakebuf_r+0x1c>
 8004cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	6123      	str	r3, [r4, #16]
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	6163      	str	r3, [r4, #20]
 8004cc8:	b003      	add	sp, #12
 8004cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ccc:	ab01      	add	r3, sp, #4
 8004cce:	466a      	mov	r2, sp
 8004cd0:	f7ff ffc8 	bl	8004c64 <__swhatbuf_r>
 8004cd4:	9f00      	ldr	r7, [sp, #0]
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4639      	mov	r1, r7
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff fe8a 	bl	80049f4 <_malloc_r>
 8004ce0:	b948      	cbnz	r0, 8004cf6 <__smakebuf_r+0x46>
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	059a      	lsls	r2, r3, #22
 8004ce8:	d4ee      	bmi.n	8004cc8 <__smakebuf_r+0x18>
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	f043 0302 	orr.w	r3, r3, #2
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	e7e2      	b.n	8004cbc <__smakebuf_r+0xc>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	6020      	str	r0, [r4, #0]
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	9b01      	ldr	r3, [sp, #4]
 8004d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d06:	b15b      	cbz	r3, 8004d20 <__smakebuf_r+0x70>
 8004d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f000 f81d 	bl	8004d4c <_isatty_r>
 8004d12:	b128      	cbz	r0, 8004d20 <__smakebuf_r+0x70>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	431d      	orrs	r5, r3
 8004d24:	81a5      	strh	r5, [r4, #12]
 8004d26:	e7cf      	b.n	8004cc8 <__smakebuf_r+0x18>

08004d28 <_fstat_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	@ (8004d48 <_fstat_r+0x20>)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	602b      	str	r3, [r5, #0]
 8004d36:	f7fc f856 	bl	8000de6 <_fstat>
 8004d3a:	1c43      	adds	r3, r0, #1
 8004d3c:	d102      	bne.n	8004d44 <_fstat_r+0x1c>
 8004d3e:	682b      	ldr	r3, [r5, #0]
 8004d40:	b103      	cbz	r3, 8004d44 <_fstat_r+0x1c>
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	bd38      	pop	{r3, r4, r5, pc}
 8004d46:	bf00      	nop
 8004d48:	2000040c 	.word	0x2000040c

08004d4c <_isatty_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	@ (8004d68 <_isatty_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc f855 	bl	8000e06 <_isatty>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_isatty_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_isatty_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	2000040c 	.word	0x2000040c

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	@ (8004d88 <_sbrk_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fc f85e 	bl	8000e38 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	2000040c 	.word	0x2000040c

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
