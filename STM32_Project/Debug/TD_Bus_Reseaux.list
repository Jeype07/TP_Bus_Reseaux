
TD_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080055dc  080055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00006768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005770  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  080057d8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080057d8  00007404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d1f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ff  00000000  00000000  0001adb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0001d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e89  00000000  00000000  0001e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a61  00000000  00000000  0001f7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016755  00000000  00000000  00043212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a1f  00000000  00000000  00059967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005700  00000000  00000000  001323cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00137acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055c4 	.word	0x080055c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080055c4 	.word	0x080055c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:
		printf("Erreur de communication sur le bus bus I2C\r\n");
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT (&huart4, (uint8_t*)UART4_rxBuffer, SIZE_OF_USART4_BUF);
 80005a8:	2207      	movs	r2, #7
 80005aa:	4906      	ldr	r1, [pc, #24]	@ (80005c4 <HAL_UART_RxCpltCallback+0x24>)
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <HAL_UART_RxCpltCallback+0x28>)
 80005ae:	f003 f88b 	bl	80036c8 <HAL_UART_Receive_IT>
	printf("%s\r\n",UART4_rxBuffer);
 80005b2:	4904      	ldr	r1, [pc, #16]	@ (80005c4 <HAL_UART_RxCpltCallback+0x24>)
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <HAL_UART_RxCpltCallback+0x2c>)
 80005b6:	f004 f939 	bl	800482c <iprintf>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200002a8 	.word	0x200002a8
 80005c8:	200001b4 	.word	0x200001b4
 80005cc:	0800565c 	.word	0x0800565c

080005d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d4:	f000 fce4 	bl	8000fa0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d8:	f000 f846 	bl	8000668 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005dc:	f000 f9bc 	bl	8000958 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005e0:	f000 f990 	bl	8000904 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 80005e4:	f000 f8b2 	bl	800074c <MX_CAN1_Init>
	MX_UART4_Init();
 80005e8:	f000 f962 	bl	80008b0 <MX_UART4_Init>
	MX_TIM2_Init();
 80005ec:	f000 f912 	bl	8000814 <MX_TIM2_Init>
	MX_I2C1_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_RegisterCallback(&huart4, HAL_UART_RX_COMPLETE_CB_ID, User_UartCompleteCallback);
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <main+0x74>)
 80005f6:	2103      	movs	r1, #3
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <main+0x78>)
 80005fa:	f002 feab 	bl	8003354 <HAL_UART_RegisterCallback>
	HAL_TIM_Base_Start_IT(&htim2);
 80005fe:	4813      	ldr	r0, [pc, #76]	@ (800064c <main+0x7c>)
 8000600:	f002 f966 	bl	80028d0 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("==== TP BUS & NETWORK ====\r\n");
 8000604:	4812      	ldr	r0, [pc, #72]	@ (8000650 <main+0x80>)
 8000606:	f004 f979 	bl	80048fc <puts>

	HAL_UART_Receive_IT (&huart4, (uint8_t *) UART4_rxBuffer, SIZE_OF_USART4_BUF); //usart rasp pi
 800060a:	2207      	movs	r2, #7
 800060c:	4911      	ldr	r1, [pc, #68]	@ (8000654 <main+0x84>)
 800060e:	480e      	ldr	r0, [pc, #56]	@ (8000648 <main+0x78>)
 8000610:	f003 f85a 	bl	80036c8 <HAL_UART_Receive_IT>

	while (1)
	{

		//code bloquant pour écho
		HAL_UART_Receive( &huart2, &data, 1, HAL_MAX_DELAY );
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2201      	movs	r2, #1
 800061a:	490f      	ldr	r1, [pc, #60]	@ (8000658 <main+0x88>)
 800061c:	480f      	ldr	r0, [pc, #60]	@ (800065c <main+0x8c>)
 800061e:	f002 ffbc 	bl	800359a <HAL_UART_Receive>
		printf("\r\n");
 8000622:	480f      	ldr	r0, [pc, #60]	@ (8000660 <main+0x90>)
 8000624:	f004 f96a 	bl	80048fc <puts>
		printf("%s\r\n",&data);
 8000628:	490b      	ldr	r1, [pc, #44]	@ (8000658 <main+0x88>)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <main+0x94>)
 800062c:	f004 f8fe 	bl	800482c <iprintf>
		HAL_UART_Transmit( &huart2, &data, 1, HAL_MAX_DELAY );
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <main+0x88>)
 8000638:	4808      	ldr	r0, [pc, #32]	@ (800065c <main+0x8c>)
 800063a:	f002 ff23 	bl	8003484 <HAL_UART_Transmit>
		HAL_UART_Receive( &huart2, &data, 1, HAL_MAX_DELAY );
 800063e:	bf00      	nop
 8000640:	e7e8      	b.n	8000614 <main+0x44>
 8000642:	bf00      	nop
 8000644:	08000a35 	.word	0x08000a35
 8000648:	200001b4 	.word	0x200001b4
 800064c:	20000100 	.word	0x20000100
 8000650:	080056dc 	.word	0x080056dc
 8000654:	200002a8 	.word	0x200002a8
 8000658:	200002a4 	.word	0x200002a4
 800065c:	2000022c 	.word	0x2000022c
 8000660:	080056f8 	.word	0x080056f8
 8000664:	0800565c 	.word	0x0800565c

08000668 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	@ 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fa20 	bl	8004abc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b2c      	ldr	r3, [pc, #176]	@ (8000744 <SystemClock_Config+0xdc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemClock_Config+0xdc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <SystemClock_Config+0xdc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <SystemClock_Config+0xe0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemClock_Config+0xe0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <SystemClock_Config+0xe0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80006dc:	23b4      	movs	r3, #180	@ 0xb4
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fdf3 	bl	80022dc <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80006fc:	f000 f9a8 	bl	8000a50 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000700:	f001 fa52 	bl	8001ba8 <HAL_PWREx_EnableOverDrive>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800070a:	f000 f9a1 	bl	8000a50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2105      	movs	r1, #5
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fa8b 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000738:	f000 f98a 	bl	8000a50 <Error_Handler>
	}
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	@ 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <MX_CAN1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000758:	2205      	movs	r2, #5
 800075a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800076a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800076e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000772:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000776:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800079e:	f000 fc71 	bl	8001084 <HAL_CAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80007a8:	f000 f952 	bl	8000a50 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40006400 	.word	0x40006400

080007b8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	@ (800080c <MX_I2C1_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_I2C1_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007da:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007f6:	f001 f893 	bl	8001920 <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000800:	f000 f926 	bl	8000a50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000ac 	.word	0x200000ac
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 180-1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_TIM2_Init+0x94>)
 800083a:	22b3      	movs	r2, #179	@ 0xb3
 800083c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000000-1;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <MX_TIM2_Init+0x98>)
 8000848:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_TIM2_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000856:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000858:	f001 ffde 	bl	8002818 <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x52>
	{
		Error_Handler();
 8000862:	f000 f8f5 	bl	8000a50 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000874:	f002 f9ac 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x6e>
	{
		Error_Handler();
 800087e:	f000 f8e7 	bl	8000a50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <MX_TIM2_Init+0x94>)
 8000890:	f002 fc68 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 800089a:	f000 f8d9 	bl	8000a50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000100 	.word	0x20000100
 80008ac:	000f423f 	.word	0x000f423f

080008b0 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_UART4_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_UART4_Init+0x4c>)
 80008e8:	f002 fcd6 	bl	8003298 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80008f2:	f000 f8ad 	bl	8000a50 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001b4 	.word	0x200001b4
 8000900:	40004c00 	.word	0x40004c00

08000904 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f002 fcac 	bl	8003298 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000946:	f000 f883 	bl	8000a50 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000022c 	.word	0x2000022c
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a2c      	ldr	r2, [pc, #176]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a25      	ldr	r2, [pc, #148]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <MX_GPIO_Init+0xd4>)
 80009e4:	f000 ff82 	bl	80018ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <MX_GPIO_Init+0xd8>)
 8000a00:	f000 fde0 	bl	80015c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fdd2 	bl	80015c4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	@ 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020800 	.word	0x40020800

08000a34 <User_UartCompleteCallback>:

/* USER CODE BEGIN 4 */
void User_UartCompleteCallback(UART_HandleTypeDef *huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	printf("j'ai reçu des datas\r\n");
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <User_UartCompleteCallback+0x18>)
 8000a3e:	f003 ff5d 	bl	80048fc <puts>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	080056fc 	.word	0x080056fc

08000a50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fcbe 	bl	800141c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_CAN_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000ad8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_CAN_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b18:	2309      	movs	r3, #9
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <HAL_CAN_MspInit+0x8c>)
 8000b24:	f000 fd4e 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40006400 	.word	0x40006400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_I2C_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7a:	23c0      	movs	r3, #192	@ 0xc0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <HAL_I2C_MspInit+0x8c>)
 8000b96:	f000 fd15 	bl	80015c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bdc:	d115      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f000 fc17 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f000 fc30 	bl	800146a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	@ 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a36      	ldr	r2, [pc, #216]	@ (8000d10 <HAL_UART_MspInit+0xf8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d134      	bne.n	8000ca4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b35      	ldr	r3, [pc, #212]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a34      	ldr	r2, [pc, #208]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b32      	ldr	r3, [pc, #200]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c82:	2308      	movs	r3, #8
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4822      	ldr	r0, [pc, #136]	@ (8000d18 <HAL_UART_MspInit+0x100>)
 8000c8e:	f000 fc99 	bl	80015c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2034      	movs	r0, #52	@ 0x34
 8000c98:	f000 fbcb 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c9c:	2034      	movs	r0, #52	@ 0x34
 8000c9e:	f000 fbe4 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca2:	e030      	b.n	8000d06 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_UART_MspInit+0x104>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x100>)
 8000d02:	f000 fc5f 	bl	80015c4 <HAL_GPIO_Init>
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	@ 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004c00 	.word	0x40004c00
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40004400 	.word	0x40004400

08000d20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d28:	1d39      	adds	r1, r7, #4
 8000d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <__io_putchar+0x30>)
 8000d32:	f002 fba7 	bl	8003484 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000d36:	1d39      	adds	r1, r7, #4
 8000d38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <__io_putchar+0x34>)
 8000d40:	f002 fba0 	bl	8003484 <HAL_UART_Transmit>

  return ch;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000022c 	.word	0x2000022c
 8000d54:	200001b4 	.word	0x200001b4

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f949 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM2_IRQHandler+0x10>)
 8000dbe:	f001 fdf7 	bl	80029b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000100 	.word	0x20000100

08000dcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <UART4_IRQHandler+0x10>)
 8000dd2:	f002 fc9f 	bl	8003714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001b4 	.word	0x200001b4

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff73 	bl	8000d20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fe34 	bl	8004b58 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200002b0 	.word	0x200002b0
 8000f24:	20000408 	.word	0x20000408

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fdf3 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb27 	bl	80005d0 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	20000404 	.word	0x20000404

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 fa27 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fd42 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fa3f 	bl	8001486 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 fa07 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200002b4 	.word	0x200002b4

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200002b4 	.word	0x200002b4

08001084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0ed      	b.n	8001272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fd02 	bl	8000aac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffd8 	bl	800106c <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffd4 	bl	800106c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0c5      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e5      	beq.n	80010c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0202 	bic.w	r2, r2, #2
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb2 	bl	800106c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffae 	bl	800106c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e09f      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e5b      	ldrb	r3, [r3, #25]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0220 	bic.w	r2, r2, #32
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7edb      	ldrb	r3, [r3, #27]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0210 	orr.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7f5b      	ldrb	r3, [r3, #29]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	ea42 0103 	orr.w	r1, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fdde 	bl	800106c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d008      	beq.n	80014d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e052      	b.n	8001576 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0216 	bic.w	r2, r2, #22
 80014de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <HAL_DMA_Abort+0x62>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0208 	bic.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001520:	e013      	b.n	800154a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001522:	f7ff fda3 	bl	800106c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b05      	cmp	r3, #5
 800152e:	d90c      	bls.n	800154a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e015      	b.n	8001576 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e4      	bne.n	8001522 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	223f      	movs	r2, #63	@ 0x3f
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d004      	beq.n	800159c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2280      	movs	r2, #128	@ 0x80
 8001596:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e00c      	b.n	80015b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2205      	movs	r2, #5
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e165      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8154 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	2b02      	cmp	r3, #2
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d017      	beq.n	80016b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80ae 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b5d      	ldr	r3, [pc, #372]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	4a5c      	ldr	r2, [pc, #368]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6453      	str	r3, [r2, #68]	@ 0x44
 800175a:	4b5a      	ldr	r3, [pc, #360]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <HAL_GPIO_Init+0x304>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	@ (80018cc <HAL_GPIO_Init+0x308>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x21a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	@ (80018d0 <HAL_GPIO_Init+0x30c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x216>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4d      	ldr	r2, [pc, #308]	@ (80018d4 <HAL_GPIO_Init+0x310>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x212>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	@ (80018d8 <HAL_GPIO_Init+0x314>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <HAL_GPIO_Init+0x318>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x20a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	@ (80018e0 <HAL_GPIO_Init+0x31c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x206>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a49      	ldr	r2, [pc, #292]	@ (80018e4 <HAL_GPIO_Init+0x320>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x202>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	@ (80018c8 <HAL_GPIO_Init+0x304>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001822:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001828:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800184c:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a0:	4a11      	ldr	r2, [pc, #68]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae96 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e12b      	b.n	8001b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff f8f8 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2224      	movs	r2, #36	@ 0x24
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001984:	f000 fa52 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8001988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4a81      	ldr	r2, [pc, #516]	@ (8001b94 <HAL_I2C_Init+0x274>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d807      	bhi.n	80019a4 <HAL_I2C_Init+0x84>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4a80      	ldr	r2, [pc, #512]	@ (8001b98 <HAL_I2C_Init+0x278>)
 8001998:	4293      	cmp	r3, r2
 800199a:	bf94      	ite	ls
 800199c:	2301      	movls	r3, #1
 800199e:	2300      	movhi	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e006      	b.n	80019b2 <HAL_I2C_Init+0x92>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a7d      	ldr	r2, [pc, #500]	@ (8001b9c <HAL_I2C_Init+0x27c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bf94      	ite	ls
 80019ac:	2301      	movls	r3, #1
 80019ae:	2300      	movhi	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0e7      	b.n	8001b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a78      	ldr	r2, [pc, #480]	@ (8001ba0 <HAL_I2C_Init+0x280>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b94 <HAL_I2C_Init+0x274>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d802      	bhi.n	80019f4 <HAL_I2C_Init+0xd4>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	e009      	b.n	8001a08 <HAL_I2C_Init+0xe8>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a69      	ldr	r2, [pc, #420]	@ (8001ba4 <HAL_I2C_Init+0x284>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	3301      	adds	r3, #1
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	495c      	ldr	r1, [pc, #368]	@ (8001b94 <HAL_I2C_Init+0x274>)
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d819      	bhi.n	8001a5c <HAL_I2C_Init+0x13c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1e59      	subs	r1, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a36:	1c59      	adds	r1, r3, #1
 8001a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_I2C_Init+0x138>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e59      	subs	r1, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a56:	e051      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e04f      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_I2C_Init+0x168>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e58      	subs	r0, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e012      	b.n	8001aae <HAL_I2C_Init+0x18e>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e58      	subs	r0, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	0099      	lsls	r1, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x196>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e022      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10e      	bne.n	8001adc <HAL_I2C_Init+0x1bc>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e58      	subs	r0, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ada:	e00f      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e58      	subs	r0, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	0099      	lsls	r1, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6911      	ldr	r1, [r2, #16]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	000186a0 	.word	0x000186a0
 8001b98:	001e847f 	.word	0x001e847f
 8001b9c:	003d08ff 	.word	0x003d08ff
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_PWREx_EnableOverDrive+0x94>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff fa4a 	bl	800106c <HAL_GetTick>
 8001bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	e009      	b.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bdc:	f7ff fa46 	bl	800106c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bea:	d901      	bls.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e01f      	b.n	8001c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff fa32 	bl	800106c <HAL_GetTick>
 8001c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa2e 	bl	800106c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e007      	b.n	8001c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	420e0040 	.word	0x420e0040
 8001c40:	40007000 	.word	0x40007000
 8001c44:	420e0044 	.word	0x420e0044

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f998 	bl	800106c <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f994 	bl	800106c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f855 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f8f8 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08005714 	.word	0x08005714
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08005724 	.word	0x08005724

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	@ (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08005724 	.word	0x08005724

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b0ae      	sub	sp, #184	@ 0xb8
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea2:	4bcb      	ldr	r3, [pc, #812]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	f200 8206 	bhi.w	80022bc <HAL_RCC_GetSysClockFreq+0x440>
 8001eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001eed 	.word	0x08001eed
 8001ebc:	080022bd 	.word	0x080022bd
 8001ec0:	080022bd 	.word	0x080022bd
 8001ec4:	080022bd 	.word	0x080022bd
 8001ec8:	08001ef5 	.word	0x08001ef5
 8001ecc:	080022bd 	.word	0x080022bd
 8001ed0:	080022bd 	.word	0x080022bd
 8001ed4:	080022bd 	.word	0x080022bd
 8001ed8:	08001efd 	.word	0x08001efd
 8001edc:	080022bd 	.word	0x080022bd
 8001ee0:	080022bd 	.word	0x080022bd
 8001ee4:	080022bd 	.word	0x080022bd
 8001ee8:	080020ed 	.word	0x080020ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4bb9      	ldr	r3, [pc, #740]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ef2:	e1e7      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ef4:	4bb8      	ldr	r3, [pc, #736]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001efa:	e1e3      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efc:	4bb4      	ldr	r3, [pc, #720]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f08:	4bb1      	ldr	r3, [pc, #708]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d071      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f14:	4bae      	ldr	r3, [pc, #696]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f20:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	0159      	lsls	r1, r3, #5
 8001f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4c:	0150      	lsls	r0, r2, #5
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4621      	mov	r1, r4
 8001f54:	1a51      	subs	r1, r2, r1
 8001f56:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f58:	4629      	mov	r1, r5
 8001f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	018b      	lsls	r3, r1, #6
 8001f70:	4641      	mov	r1, r8
 8001f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f76:	4641      	mov	r1, r8
 8001f78:	018a      	lsls	r2, r1, #6
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	1a51      	subs	r1, r2, r1
 8001f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f80:	4649      	mov	r1, r9
 8001f82:	eb63 0301 	sbc.w	r3, r3, r1
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f94:	4649      	mov	r1, r9
 8001f96:	00cb      	lsls	r3, r1, #3
 8001f98:	4641      	mov	r1, r8
 8001f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f9e:	4641      	mov	r1, r8
 8001fa0:	00ca      	lsls	r2, r1, #3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4622      	mov	r2, r4
 8001faa:	189b      	adds	r3, r3, r2
 8001fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fae:	462b      	mov	r3, r5
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	eb42 0303 	adc.w	r3, r2, r3
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	024b      	lsls	r3, r1, #9
 8001fc8:	4621      	mov	r1, r4
 8001fca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fce:	4621      	mov	r1, r4
 8001fd0:	024a      	lsls	r2, r1, #9
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fe0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fe4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fe8:	f7fe f962 	bl	80002b0 <__aeabi_uldivmod>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ff6:	e067      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff8:	4b75      	ldr	r3, [pc, #468]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002004:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002008:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800200c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002010:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002012:	2300      	movs	r3, #0
 8002014:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002016:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4621      	mov	r1, r4
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002038:	4629      	mov	r1, r5
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800204c:	4649      	mov	r1, r9
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002056:	4641      	mov	r1, r8
 8002058:	018a      	lsls	r2, r1, #6
 800205a:	4641      	mov	r1, r8
 800205c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002060:	4649      	mov	r1, r9
 8002062:	eb63 0b01 	sbc.w	fp, r3, r1
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002072:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800207a:	4692      	mov	sl, r2
 800207c:	469b      	mov	fp, r3
 800207e:	4623      	mov	r3, r4
 8002080:	eb1a 0303 	adds.w	r3, sl, r3
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	462b      	mov	r3, r5
 8002088:	eb4b 0303 	adc.w	r3, fp, r3
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020b0:	2200      	movs	r2, #0
 80020b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80020b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80020b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020ba:	f7fe f8f9 	bl	80002b0 <__aeabi_uldivmod>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4613      	mov	r3, r2
 80020c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020c8:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80020da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ea:	e0eb      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ec:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d06b      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	2200      	movs	r2, #0
 800210c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800210e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002116:	663b      	str	r3, [r7, #96]	@ 0x60
 8002118:	2300      	movs	r3, #0
 800211a:	667b      	str	r3, [r7, #100]	@ 0x64
 800211c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002120:	4622      	mov	r2, r4
 8002122:	462b      	mov	r3, r5
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	0159      	lsls	r1, r3, #5
 800212e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002132:	0150      	lsls	r0, r2, #5
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4621      	mov	r1, r4
 800213a:	1a51      	subs	r1, r2, r1
 800213c:	61b9      	str	r1, [r7, #24]
 800213e:	4629      	mov	r1, r5
 8002140:	eb63 0301 	sbc.w	r3, r3, r1
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002152:	4659      	mov	r1, fp
 8002154:	018b      	lsls	r3, r1, #6
 8002156:	4651      	mov	r1, sl
 8002158:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215c:	4651      	mov	r1, sl
 800215e:	018a      	lsls	r2, r1, #6
 8002160:	4651      	mov	r1, sl
 8002162:	ebb2 0801 	subs.w	r8, r2, r1
 8002166:	4659      	mov	r1, fp
 8002168:	eb63 0901 	sbc.w	r9, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002178:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800217c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002180:	4690      	mov	r8, r2
 8002182:	4699      	mov	r9, r3
 8002184:	4623      	mov	r3, r4
 8002186:	eb18 0303 	adds.w	r3, r8, r3
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	462b      	mov	r3, r5
 800218e:	eb49 0303 	adc.w	r3, r9, r3
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021a0:	4629      	mov	r1, r5
 80021a2:	024b      	lsls	r3, r1, #9
 80021a4:	4621      	mov	r1, r4
 80021a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021aa:	4621      	mov	r1, r4
 80021ac:	024a      	lsls	r2, r1, #9
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021b6:	2200      	movs	r2, #0
 80021b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021c0:	f7fe f876 	bl	80002b0 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021ce:	e065      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x420>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021dc:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	2200      	movs	r2, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	4611      	mov	r1, r2
 80021e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80021ee:	2300      	movs	r3, #0
 80021f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80021f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021f6:	4642      	mov	r2, r8
 80021f8:	464b      	mov	r3, r9
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4641      	mov	r1, r8
 8002210:	1a51      	subs	r1, r2, r1
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	4649      	mov	r1, r9
 8002216:	eb63 0301 	sbc.w	r3, r3, r1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002228:	4659      	mov	r1, fp
 800222a:	018b      	lsls	r3, r1, #6
 800222c:	4651      	mov	r1, sl
 800222e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002232:	4651      	mov	r1, sl
 8002234:	018a      	lsls	r2, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	1a54      	subs	r4, r2, r1
 800223a:	4659      	mov	r1, fp
 800223c:	eb63 0501 	sbc.w	r5, r3, r1
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	00eb      	lsls	r3, r5, #3
 800224a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224e:	00e2      	lsls	r2, r4, #3
 8002250:	4614      	mov	r4, r2
 8002252:	461d      	mov	r5, r3
 8002254:	4643      	mov	r3, r8
 8002256:	18e3      	adds	r3, r4, r3
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	464b      	mov	r3, r9
 800225c:	eb45 0303 	adc.w	r3, r5, r3
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002284:	2200      	movs	r2, #0
 8002286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002288:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800228a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800228e:	f7fe f80f 	bl	80002b0 <__aeabi_uldivmod>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4613      	mov	r3, r2
 8002298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800229c:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0f1b      	lsrs	r3, r3, #28
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80022aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ba:	e003      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	37b8      	adds	r7, #184	@ 0xb8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	00f42400 	.word	0x00f42400

080022dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e28d      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8083 	beq.w	8002402 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022fc:	4b94      	ldr	r3, [pc, #592]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b04      	cmp	r3, #4
 8002306:	d019      	beq.n	800233c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002308:	4b91      	ldr	r3, [pc, #580]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002310:	2b08      	cmp	r3, #8
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002314:	4b8e      	ldr	r3, [pc, #568]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002320:	d00c      	beq.n	800233c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b8b      	ldr	r3, [pc, #556]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b84      	ldr	r3, [pc, #528]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05b      	beq.n	8002400 <HAL_RCC_OscConfig+0x124>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d157      	bne.n	8002400 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e25a      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x90>
 800235e:	4b7c      	ldr	r3, [pc, #496]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7b      	ldr	r2, [pc, #492]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xcc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xb4>
 8002376:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b73      	ldr	r3, [pc, #460]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a72      	ldr	r2, [pc, #456]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xcc>
 8002390:	4b6f      	ldr	r3, [pc, #444]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6e      	ldr	r2, [pc, #440]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b6c      	ldr	r3, [pc, #432]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fe5c 	bl	800106c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe fe58 	bl	800106c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e21f      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b61      	ldr	r3, [pc, #388]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xdc>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fe48 	bl	800106c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe fe44 	bl	800106c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e20b      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x104>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06f      	beq.n	80024ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800240e:	4b50      	ldr	r3, [pc, #320]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d017      	beq.n	800244a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800241a:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002422:	2b08      	cmp	r3, #8
 8002424:	d105      	bne.n	8002432 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x186>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1d3      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4937      	ldr	r1, [pc, #220]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <HAL_RCC_OscConfig+0x278>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fdf1 	bl	800106c <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe fded 	bl	800106c <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1b4      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4925      	ldr	r1, [pc, #148]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_RCC_OscConfig+0x278>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fdd0 	bl	800106c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fdcc 	bl	800106c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e193      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_RCC_OscConfig+0x27c>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fdb0 	bl	800106c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe fdac 	bl	800106c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e173      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_RCC_OscConfig+0x274>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x234>
 800252e:	e01b      	b.n	8002568 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_OscConfig+0x27c>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe fd99 	bl	800106c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00e      	b.n	800255c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fd95 	bl	800106c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d907      	bls.n	800255c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e15c      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ea      	bne.n	800253e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b83      	ldr	r3, [pc, #524]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b7f      	ldr	r3, [pc, #508]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	4a7e      	ldr	r2, [pc, #504]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	@ 0x40
 8002596:	4b7c      	ldr	r3, [pc, #496]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b79      	ldr	r3, [pc, #484]	@ (800278c <HAL_RCC_OscConfig+0x4b0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x4b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x4b0>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7fe fd55 	bl	800106c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe fd51 	bl	800106c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e118      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b6c      	ldr	r3, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x4b0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x31e>
 80025ec:	4b66      	ldr	r3, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a65      	ldr	r2, [pc, #404]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x358>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x340>
 8002602:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	4a60      	ldr	r2, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	@ 0x70
 800260e:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x358>
 800261c:	4b5a      	ldr	r3, [pc, #360]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002620:	4a59      	ldr	r2, [pc, #356]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	@ 0x70
 8002628:	4b57      	ldr	r3, [pc, #348]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fd16 	bl	800106c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fd12 	bl	800106c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0d7      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x368>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fd00 	bl	800106c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fcfc 	bl	800106c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0c1      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	4b40      	ldr	r3, [pc, #256]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	4a3a      	ldr	r2, [pc, #232]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80ad 	beq.w	8002808 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ae:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d060      	beq.n	800277c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d145      	bne.n	800274e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <HAL_RCC_OscConfig+0x4b4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fcd0 	bl	800106c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fccc 	bl	800106c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e093      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	491b      	ldr	r1, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4b4>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fca1 	bl	800106c <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fc9d 	bl	800106c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e064      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x452>
 800274c:	e05c      	b.n	8002808 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x4b4>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fc8a 	bl	800106c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fc86 	bl	800106c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04d      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_OscConfig+0x4ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x480>
 800277a:	e045      	b.n	8002808 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e040      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
 8002790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_RCC_OscConfig+0x538>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d030      	beq.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d129      	bne.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d122      	bne.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d119      	bne.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d10f      	bne.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04c      	b.n	80028c4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d111      	bne.n	800285a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fc38 	bl	80030b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1f      	ldr	r2, [pc, #124]	@ (80028cc <HAL_TIM_Base_Init+0xb4>)
 8002850:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f000 fadb 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	08000bcd 	.word	0x08000bcd

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04e      	b.n	8002986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <HAL_TIM_Base_Start_IT+0xc4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002912:	d01d      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <HAL_TIM_Base_Start_IT+0xc8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1e      	ldr	r2, [pc, #120]	@ (800299c <HAL_TIM_Base_Start_IT+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <HAL_TIM_Base_Start_IT+0xdc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40001800 	.word	0x40001800

080029b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d026      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d021      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0202 	mvn.w	r2, #2
 80029e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e009      	b.n	8002a1a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d026      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d021      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0204 	mvn.w	r2, #4
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e009      	b.n	8002a72 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d026      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d021      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0208 	mvn.w	r2, #8
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e009      	b.n	8002aca <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d026      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d021      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0210 	mvn.w	r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2208      	movs	r2, #8
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e009      	b.n	8002b22 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00e      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00e      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0220 	mvn.w	r2, #32
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIM_ConfigClockSource+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e0b4      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x186>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c24:	d03e      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8002c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2a:	f200 8087 	bhi.w	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x172>
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3a:	d87f      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b70      	cmp	r3, #112	@ 0x70
 8002c3e:	d01a      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xa6>
 8002c40:	2b70      	cmp	r3, #112	@ 0x70
 8002c42:	d87b      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b60      	cmp	r3, #96	@ 0x60
 8002c46:	d050      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x11a>
 8002c48:	2b60      	cmp	r3, #96	@ 0x60
 8002c4a:	d877      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b50      	cmp	r3, #80	@ 0x50
 8002c4e:	d03c      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0xfa>
 8002c50:	2b50      	cmp	r3, #80	@ 0x50
 8002c52:	d873      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d058      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x13a>
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d86f      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b30      	cmp	r3, #48	@ 0x30
 8002c5e:	d064      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b30      	cmp	r3, #48	@ 0x30
 8002c62:	d86b      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d060      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d867      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d05a      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	e062      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c86:	f000 f9f5 	bl	8003074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]
      break;
 8002ca2:	e04f      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb4:	f000 f9de 	bl	8003074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc6:	609a      	str	r2, [r3, #8]
      break;
 8002cc8:	e03c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 f952 	bl	8002f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2150      	movs	r1, #80	@ 0x50
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f9ab 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e02c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 f971 	bl	8002fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2160      	movs	r1, #96	@ 0x60
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f99b 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002d08:	e01c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	461a      	mov	r2, r3
 8002d18:	f000 f932 	bl	8002f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f98b 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002d28:	e00c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f000 f982 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002d3a:	e003      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e000      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a46      	ldr	r2, [pc, #280]	@ (8002f54 <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e46:	d00f      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a43      	ldr	r2, [pc, #268]	@ (8002f58 <TIM_Base_SetConfig+0x130>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a42      	ldr	r2, [pc, #264]	@ (8002f5c <TIM_Base_SetConfig+0x134>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d007      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a41      	ldr	r2, [pc, #260]	@ (8002f60 <TIM_Base_SetConfig+0x138>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d003      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	@ (8002f64 <TIM_Base_SetConfig+0x13c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d108      	bne.n	8002e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a35      	ldr	r2, [pc, #212]	@ (8002f54 <TIM_Base_SetConfig+0x12c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02b      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e88:	d027      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <TIM_Base_SetConfig+0x130>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d023      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a31      	ldr	r2, [pc, #196]	@ (8002f5c <TIM_Base_SetConfig+0x134>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a30      	ldr	r2, [pc, #192]	@ (8002f60 <TIM_Base_SetConfig+0x138>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01b      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8002f64 <TIM_Base_SetConfig+0x13c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d017      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2e      	ldr	r2, [pc, #184]	@ (8002f68 <TIM_Base_SetConfig+0x140>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f6c <TIM_Base_SetConfig+0x144>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00f      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f70 <TIM_Base_SetConfig+0x148>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <TIM_Base_SetConfig+0x14c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f78 <TIM_Base_SetConfig+0x150>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <TIM_Base_SetConfig+0x154>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a10      	ldr	r2, [pc, #64]	@ (8002f54 <TIM_Base_SetConfig+0x12c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0xf8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <TIM_Base_SetConfig+0x13c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f023 0201 	bic.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]
  }
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800
 8002f74:	40001800 	.word	0x40001800
 8002f78:	40001c00 	.word	0x40001c00
 8002f7c:	40002000 	.word	0x40002000

08002f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 030a 	bic.w	r3, r3, #10
 8002fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	621a      	str	r2, [r3, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f023 0210 	bic.w	r2, r3, #16
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800301a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	621a      	str	r2, [r3, #32]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	f043 0307 	orr.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800308e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	431a      	orrs	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	609a      	str	r2, [r3, #8]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <TIM_ResetCallback+0x7c>)
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <TIM_ResetCallback+0x80>)
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <TIM_ResetCallback+0x84>)
 80030d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a19      	ldr	r2, [pc, #100]	@ (800313c <TIM_ResetCallback+0x88>)
 80030d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <TIM_ResetCallback+0x8c>)
 80030e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <TIM_ResetCallback+0x90>)
 80030e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <TIM_ResetCallback+0x94>)
 80030f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a15      	ldr	r2, [pc, #84]	@ (800314c <TIM_ResetCallback+0x98>)
 80030f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a14      	ldr	r2, [pc, #80]	@ (8003150 <TIM_ResetCallback+0x9c>)
 8003100:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a13      	ldr	r2, [pc, #76]	@ (8003154 <TIM_ResetCallback+0xa0>)
 8003108:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <TIM_ResetCallback+0xa4>)
 8003110:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a11      	ldr	r2, [pc, #68]	@ (800315c <TIM_ResetCallback+0xa8>)
 8003118:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <TIM_ResetCallback+0xac>)
 8003120:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	08002d5f 	.word	0x08002d5f
 8003134:	08002d73 	.word	0x08002d73
 8003138:	08002deb 	.word	0x08002deb
 800313c:	08002dff 	.word	0x08002dff
 8003140:	08002d9b 	.word	0x08002d9b
 8003144:	08002daf 	.word	0x08002daf
 8003148:	08002d87 	.word	0x08002d87
 800314c:	08002dc3 	.word	0x08002dc3
 8003150:	08002dd7 	.word	0x08002dd7
 8003154:	08002e13 	.word	0x08002e13
 8003158:	0800325d 	.word	0x0800325d
 800315c:	08003271 	.word	0x08003271
 8003160:	08003285 	.word	0x08003285

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e05a      	b.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c8:	d01d      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d018      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00e      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10c      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800320c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40001800 	.word	0x40001800

0800325c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e04d      	b.n	8003346 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d111      	bne.n	80032da <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd12 	bl	8003ce8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a20      	ldr	r2, [pc, #128]	@ (8003350 <HAL_UART_Init+0xb8>)
 80032d0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	@ 0x24
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 ff64 	bl	80041c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003316:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003326:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	08000c19 	.word	0x08000c19

08003354 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	460b      	mov	r3, r1
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e07c      	b.n	8003476 <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d150      	bne.n	800342a <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d844      	bhi.n	8003418 <HAL_UART_RegisterCallback+0xc4>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <HAL_UART_RegisterCallback+0x40>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080033d1 	.word	0x080033d1
 800339c:	080033d9 	.word	0x080033d9
 80033a0:	080033e1 	.word	0x080033e1
 80033a4:	080033e9 	.word	0x080033e9
 80033a8:	080033f1 	.word	0x080033f1
 80033ac:	080033f9 	.word	0x080033f9
 80033b0:	08003401 	.word	0x08003401
 80033b4:	08003419 	.word	0x08003419
 80033b8:	08003419 	.word	0x08003419
 80033bc:	08003419 	.word	0x08003419
 80033c0:	08003409 	.word	0x08003409
 80033c4:	08003411 	.word	0x08003411
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80033ce:	e051      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80033d6:	e04d      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80033de:	e049      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80033e6:	e045      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80033ee:	e041      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80033f6:	e03d      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80033fe:	e039      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003406:	e035      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800340e:	e031      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003416:	e02d      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
        break;
 8003428:	e024      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	2b0b      	cmp	r3, #11
 800343a:	d002      	beq.n	8003442 <HAL_UART_RegisterCallback+0xee>
 800343c:	2b0c      	cmp	r3, #12
 800343e:	d004      	beq.n	800344a <HAL_UART_RegisterCallback+0xf6>
 8003440:	e007      	b.n	8003452 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003448:	e014      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003450:	e010      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
        break;
 8003462:	e007      	b.n	8003474 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
}
 8003476:	4618      	mov	r0, r3
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop

08003484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d175      	bne.n	8003590 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Transmit+0x2c>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e06e      	b.n	8003592 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2221      	movs	r2, #33	@ 0x21
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c2:	f7fd fdd3 	bl	800106c <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034dc:	d108      	bne.n	80034f0 <HAL_UART_Transmit+0x6c>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e003      	b.n	80034f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f8:	e02e      	b.n	8003558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fc27 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e03a      	b.n	8003592 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	3302      	adds	r3, #2
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	e007      	b.n	800354a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3301      	adds	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1cb      	bne.n	80034fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fbf3 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e006      	b.n	8003592 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08a      	sub	sp, #40	@ 0x28
 800359e:	af02      	add	r7, sp, #8
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	f040 8081 	bne.w	80036be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_Receive+0x2e>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e079      	b.n	80036c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2222      	movs	r2, #34	@ 0x22
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035e0:	f7fd fd44 	bl	800106c <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	d108      	bne.n	800360e <HAL_UART_Receive+0x74>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	e003      	b.n	8003616 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003616:	e047      	b.n	80036a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	2120      	movs	r1, #32
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fb98 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e042      	b.n	80036c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	b29a      	uxth	r2, r3
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3302      	adds	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e01f      	b.n	800369a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003662:	d007      	beq.n	8003674 <HAL_UART_Receive+0xda>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_UART_Receive+0xe8>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e008      	b.n	8003694 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800368e:	b2da      	uxtb	r2, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1b2      	bne.n	8003618 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d112      	bne.n	8003708 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Receive_IT+0x26>
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00b      	b.n	800370a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb83 	bl	8003e0a <UART_Start_Receive_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	e000      	b.n	800370a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b0ba      	sub	sp, #232	@ 0xe8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_UART_IRQHandler+0x66>
 8003766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fc64 	bl	8004040 <UART_Receive_IT>
      return;
 8003778:	e260      	b.n	8003c3c <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800377a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80e1 	beq.w	8003946 <HAL_UART_IRQHandler+0x232>
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003794:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80d4 	beq.w	8003946 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xae>
 80037aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xd2>
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0202 	orr.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_UART_IRQHandler+0xf6>
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <HAL_UART_IRQHandler+0x126>
 8003816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f043 0208 	orr.w	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 81f7 	beq.w	8003c32 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x14e>
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fbef 	bl	8004040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <HAL_UART_IRQHandler+0x17a>
 8003886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d051      	beq.n	8003932 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 faf5 	bl	8003e7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b40      	cmp	r3, #64	@ 0x40
 80038a0:	d142      	bne.n	8003928 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1d9      	bne.n	80038a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	4a80      	ldr	r2, [pc, #512]	@ (8003afc <HAL_UART_IRQHandler+0x3e8>)
 80038fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fe3b 	bl	800157e <HAL_DMA_Abort_IT>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e011      	b.n	8003942 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003926:	e00c      	b.n	8003942 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e007      	b.n	8003942 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003940:	e177      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003942:	bf00      	nop
    return;
 8003944:	e175      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	2b01      	cmp	r3, #1
 800394c:	f040 8151 	bne.w	8003bf2 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 814a 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800395e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8143 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	f040 80b7 	bne.w	8003b00 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8147 	beq.w	8003c36 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f080 8140 	bcs.w	8003c36 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c8:	f000 8088 	beq.w	8003adc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1d9      	bne.n	80039cc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e1      	bne.n	8003a18 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3314      	adds	r3, #20
 8003a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003abe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ac0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fce1 	bl	800149e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8003aee:	b292      	uxth	r2, r2
 8003af0:	1a8a      	subs	r2, r1, r2
 8003af2:	b292      	uxth	r2, r2
 8003af4:	4611      	mov	r1, r2
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003afa:	e09c      	b.n	8003c36 <HAL_UART_IRQHandler+0x522>
 8003afc:	08003f45 	.word	0x08003f45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 808f 	beq.w	8003c3a <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 808a 	beq.w	8003c3a <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bc8:	61fa      	str	r2, [r7, #28]
 8003bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e3      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8003bea:	4611      	mov	r1, r2
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf0:	e023      	b.n	8003c3a <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_UART_IRQHandler+0x4fe>
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9af 	bl	8003f6e <UART_Transmit_IT>
    return;
 8003c10:	e014      	b.n	8003c3c <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <HAL_UART_IRQHandler+0x528>
 8003c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9ef 	bl	800400e <UART_EndTransmit_IT>
    return;
 8003c30:	e004      	b.n	8003c3c <HAL_UART_IRQHandler+0x528>
    return;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <HAL_UART_IRQHandler+0x528>
      return;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_UART_IRQHandler+0x528>
      return;
 8003c3a:	bf00      	nop
  }
}
 8003c3c:	37e8      	adds	r7, #232	@ 0xe8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop

08003c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	@ (8003d34 <UART_InitCallbacksToDefault+0x4c>)
 8003cf4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8003d38 <UART_InitCallbacksToDefault+0x50>)
 8003cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8003d3c <UART_InitCallbacksToDefault+0x54>)
 8003d00:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a0e      	ldr	r2, [pc, #56]	@ (8003d40 <UART_InitCallbacksToDefault+0x58>)
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d44 <UART_InitCallbacksToDefault+0x5c>)
 8003d0c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <UART_InitCallbacksToDefault+0x60>)
 8003d12:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <UART_InitCallbacksToDefault+0x64>)
 8003d18:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d50 <UART_InitCallbacksToDefault+0x68>)
 8003d1e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <UART_InitCallbacksToDefault+0x6c>)
 8003d24:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	08003c59 	.word	0x08003c59
 8003d38:	08003c45 	.word	0x08003c45
 8003d3c:	08003c6d 	.word	0x08003c6d
 8003d40:	080005a1 	.word	0x080005a1
 8003d44:	08003c81 	.word	0x08003c81
 8003d48:	08003c95 	.word	0x08003c95
 8003d4c:	08003ca9 	.word	0x08003ca9
 8003d50:	08003cbd 	.word	0x08003cbd
 8003d54:	08003cd1 	.word	0x08003cd1

08003d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	e03b      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d037      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fd f97b 	bl	800106c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e03a      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d023      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b80      	cmp	r3, #128	@ 0x80
 8003d9e:	d020      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d01d      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d116      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f857 	bl	8003e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d0b4      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2222      	movs	r2, #34	@ 0x22
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b095      	sub	sp, #84	@ 0x54
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d119      	bne.n	8003f2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0310 	bic.w	r3, r3, #16
 8003f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f16:	61ba      	str	r2, [r7, #24]
 8003f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6979      	ldr	r1, [r7, #20]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	613b      	str	r3, [r7, #16]
   return(result);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f38:	bf00      	nop
 8003f3a:	3754      	adds	r7, #84	@ 0x54
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b21      	cmp	r3, #33	@ 0x21
 8003f80:	d13e      	bne.n	8004000 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8a:	d114      	bne.n	8003fb6 <UART_Transmit_IT+0x48>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d110      	bne.n	8003fb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]
 8003fb4:	e008      	b.n	8003fc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6211      	str	r1, [r2, #32]
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10f      	bne.n	8003ffc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ffa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004024:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08c      	sub	sp, #48	@ 0x30
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b22      	cmp	r3, #34	@ 0x22
 8004052:	f040 80b0 	bne.w	80041b6 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405e:	d117      	bne.n	8004090 <UART_Receive_IT+0x50>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d113      	bne.n	8004090 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	b29a      	uxth	r2, r3
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	629a      	str	r2, [r3, #40]	@ 0x28
 800408e:	e026      	b.n	80040de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a2:	d007      	beq.n	80040b4 <UART_Receive_IT+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <UART_Receive_IT+0x82>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e008      	b.n	80040d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d15f      	bne.n	80041b2 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0220 	bic.w	r2, r2, #32
 8004100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d136      	bne.n	80041a6 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	613b      	str	r3, [r7, #16]
   return(result);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 0310 	bic.w	r3, r3, #16
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	623a      	str	r2, [r7, #32]
 8004160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	61bb      	str	r3, [r7, #24]
   return(result);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d10a      	bne.n	8004196 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800419e:	4611      	mov	r1, r2
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
 80041a4:	e003      	b.n	80041ae <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e002      	b.n	80041b8 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e000      	b.n	80041b8 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3730      	adds	r7, #48	@ 0x30
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c4:	b0c0      	sub	sp, #256	@ 0x100
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	68d9      	ldr	r1, [r3, #12]
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	ea40 0301 	orr.w	r3, r0, r1
 80041e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	431a      	orrs	r2, r3
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004218:	f021 010c 	bic.w	r1, r1, #12
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004226:	430b      	orrs	r3, r1
 8004228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423a:	6999      	ldr	r1, [r3, #24]
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	ea40 0301 	orr.w	r3, r0, r1
 8004246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b8f      	ldr	r3, [pc, #572]	@ (800448c <UART_SetConfig+0x2cc>)
 8004250:	429a      	cmp	r2, r3
 8004252:	d005      	beq.n	8004260 <UART_SetConfig+0xa0>
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b8d      	ldr	r3, [pc, #564]	@ (8004490 <UART_SetConfig+0x2d0>)
 800425c:	429a      	cmp	r2, r3
 800425e:	d104      	bne.n	800426a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fd fdf8 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8004264:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004268:	e003      	b.n	8004272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800426a:	f7fd fddf 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 800426e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800427c:	f040 810c 	bne.w	8004498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800428a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800428e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004292:	4622      	mov	r2, r4
 8004294:	462b      	mov	r3, r5
 8004296:	1891      	adds	r1, r2, r2
 8004298:	65b9      	str	r1, [r7, #88]	@ 0x58
 800429a:	415b      	adcs	r3, r3
 800429c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800429e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042a2:	4621      	mov	r1, r4
 80042a4:	eb12 0801 	adds.w	r8, r2, r1
 80042a8:	4629      	mov	r1, r5
 80042aa:	eb43 0901 	adc.w	r9, r3, r1
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c2:	4690      	mov	r8, r2
 80042c4:	4699      	mov	r9, r3
 80042c6:	4623      	mov	r3, r4
 80042c8:	eb18 0303 	adds.w	r3, r8, r3
 80042cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042d0:	462b      	mov	r3, r5
 80042d2:	eb49 0303 	adc.w	r3, r9, r3
 80042d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ee:	460b      	mov	r3, r1
 80042f0:	18db      	adds	r3, r3, r3
 80042f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f4:	4613      	mov	r3, r2
 80042f6:	eb42 0303 	adc.w	r3, r2, r3
 80042fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80042fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004304:	f7fb ffd4 	bl	80002b0 <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4b61      	ldr	r3, [pc, #388]	@ (8004494 <UART_SetConfig+0x2d4>)
 800430e:	fba3 2302 	umull	r2, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	011c      	lsls	r4, r3, #4
 8004316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431a:	2200      	movs	r2, #0
 800431c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004320:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004328:	4642      	mov	r2, r8
 800432a:	464b      	mov	r3, r9
 800432c:	1891      	adds	r1, r2, r2
 800432e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004330:	415b      	adcs	r3, r3
 8004332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004338:	4641      	mov	r1, r8
 800433a:	eb12 0a01 	adds.w	sl, r2, r1
 800433e:	4649      	mov	r1, r9
 8004340:	eb43 0b01 	adc.w	fp, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004358:	4692      	mov	sl, r2
 800435a:	469b      	mov	fp, r3
 800435c:	4643      	mov	r3, r8
 800435e:	eb1a 0303 	adds.w	r3, sl, r3
 8004362:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004366:	464b      	mov	r3, r9
 8004368:	eb4b 0303 	adc.w	r3, fp, r3
 800436c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800437c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004384:	460b      	mov	r3, r1
 8004386:	18db      	adds	r3, r3, r3
 8004388:	643b      	str	r3, [r7, #64]	@ 0x40
 800438a:	4613      	mov	r3, r2
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	647b      	str	r3, [r7, #68]	@ 0x44
 8004392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800439a:	f7fb ff89 	bl	80002b0 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004494 <UART_SetConfig+0x2d4>)
 80043a6:	fba3 2301 	umull	r2, r3, r3, r1
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2264      	movs	r2, #100	@ 0x64
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	1acb      	subs	r3, r1, r3
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043ba:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <UART_SetConfig+0x2d4>)
 80043bc:	fba3 2302 	umull	r2, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043c8:	441c      	add	r4, r3
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043e4:	415b      	adcs	r3, r3
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043ec:	4641      	mov	r1, r8
 80043ee:	1851      	adds	r1, r2, r1
 80043f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80043f2:	4649      	mov	r1, r9
 80043f4:	414b      	adcs	r3, r1
 80043f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004404:	4659      	mov	r1, fp
 8004406:	00cb      	lsls	r3, r1, #3
 8004408:	4651      	mov	r1, sl
 800440a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440e:	4651      	mov	r1, sl
 8004410:	00ca      	lsls	r2, r1, #3
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	4603      	mov	r3, r0
 8004418:	4642      	mov	r2, r8
 800441a:	189b      	adds	r3, r3, r2
 800441c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004420:	464b      	mov	r3, r9
 8004422:	460a      	mov	r2, r1
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004438:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800443c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004440:	460b      	mov	r3, r1
 8004442:	18db      	adds	r3, r3, r3
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004446:	4613      	mov	r3, r2
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004456:	f7fb ff2b 	bl	80002b0 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <UART_SetConfig+0x2d4>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	@ 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	3332      	adds	r3, #50	@ 0x32
 8004472:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <UART_SetConfig+0x2d4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 0207 	and.w	r2, r3, #7
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4422      	add	r2, r4
 8004486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004488:	e106      	b.n	8004698 <UART_SetConfig+0x4d8>
 800448a:	bf00      	nop
 800448c:	40011000 	.word	0x40011000
 8004490:	40011400 	.word	0x40011400
 8004494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044aa:	4642      	mov	r2, r8
 80044ac:	464b      	mov	r3, r9
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	6239      	str	r1, [r7, #32]
 80044b2:	415b      	adcs	r3, r3
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ba:	4641      	mov	r1, r8
 80044bc:	1854      	adds	r4, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb43 0501 	adc.w	r5, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	00eb      	lsls	r3, r5, #3
 80044ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044e0:	464b      	mov	r3, r9
 80044e2:	eb45 0303 	adc.w	r3, r5, r3
 80044e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004506:	4629      	mov	r1, r5
 8004508:	008b      	lsls	r3, r1, #2
 800450a:	4621      	mov	r1, r4
 800450c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004510:	4621      	mov	r1, r4
 8004512:	008a      	lsls	r2, r1, #2
 8004514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004518:	f7fb feca 	bl	80002b0 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b60      	ldr	r3, [pc, #384]	@ (80046a4 <UART_SetConfig+0x4e4>)
 8004522:	fba3 2302 	umull	r2, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	011c      	lsls	r4, r3, #4
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004534:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	1891      	adds	r1, r2, r2
 8004542:	61b9      	str	r1, [r7, #24]
 8004544:	415b      	adcs	r3, r3
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800454c:	4641      	mov	r1, r8
 800454e:	1851      	adds	r1, r2, r1
 8004550:	6139      	str	r1, [r7, #16]
 8004552:	4649      	mov	r1, r9
 8004554:	414b      	adcs	r3, r1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004564:	4659      	mov	r1, fp
 8004566:	00cb      	lsls	r3, r1, #3
 8004568:	4651      	mov	r1, sl
 800456a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456e:	4651      	mov	r1, sl
 8004570:	00ca      	lsls	r2, r1, #3
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	4603      	mov	r3, r0
 8004578:	4642      	mov	r2, r8
 800457a:	189b      	adds	r3, r3, r2
 800457c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004580:	464b      	mov	r3, r9
 8004582:	460a      	mov	r2, r1
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004596:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045a4:	4649      	mov	r1, r9
 80045a6:	008b      	lsls	r3, r1, #2
 80045a8:	4641      	mov	r1, r8
 80045aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ae:	4641      	mov	r1, r8
 80045b0:	008a      	lsls	r2, r1, #2
 80045b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045b6:	f7fb fe7b 	bl	80002b0 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	4b38      	ldr	r3, [pc, #224]	@ (80046a4 <UART_SetConfig+0x4e4>)
 80045c2:	fba3 2301 	umull	r2, r3, r3, r1
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2264      	movs	r2, #100	@ 0x64
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	1acb      	subs	r3, r1, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	@ 0x32
 80045d4:	4a33      	ldr	r2, [pc, #204]	@ (80046a4 <UART_SetConfig+0x4e4>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045e0:	441c      	add	r4, r3
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80045ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004632:	464b      	mov	r3, r9
 8004634:	460a      	mov	r2, r1
 8004636:	eb42 0303 	adc.w	r3, r2, r3
 800463a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	663b      	str	r3, [r7, #96]	@ 0x60
 8004646:	667a      	str	r2, [r7, #100]	@ 0x64
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004654:	4649      	mov	r1, r9
 8004656:	008b      	lsls	r3, r1, #2
 8004658:	4641      	mov	r1, r8
 800465a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465e:	4641      	mov	r1, r8
 8004660:	008a      	lsls	r2, r1, #2
 8004662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004666:	f7fb fe23 	bl	80002b0 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <UART_SetConfig+0x4e4>)
 8004670:	fba3 1302 	umull	r1, r3, r3, r2
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	2164      	movs	r1, #100	@ 0x64
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	3332      	adds	r3, #50	@ 0x32
 8004682:	4a08      	ldr	r2, [pc, #32]	@ (80046a4 <UART_SetConfig+0x4e4>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f003 020f 	and.w	r2, r3, #15
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4422      	add	r2, r4
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	bf00      	nop
 800469a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800469e:	46bd      	mov	sp, r7
 80046a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a4:	51eb851f 	.word	0x51eb851f

080046a8 <std>:
 80046a8:	2300      	movs	r3, #0
 80046aa:	b510      	push	{r4, lr}
 80046ac:	4604      	mov	r4, r0
 80046ae:	e9c0 3300 	strd	r3, r3, [r0]
 80046b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046b6:	6083      	str	r3, [r0, #8]
 80046b8:	8181      	strh	r1, [r0, #12]
 80046ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80046bc:	81c2      	strh	r2, [r0, #14]
 80046be:	6183      	str	r3, [r0, #24]
 80046c0:	4619      	mov	r1, r3
 80046c2:	2208      	movs	r2, #8
 80046c4:	305c      	adds	r0, #92	@ 0x5c
 80046c6:	f000 f9f9 	bl	8004abc <memset>
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <std+0x58>)
 80046cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <std+0x5c>)
 80046d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <std+0x60>)
 80046d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046d6:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <std+0x64>)
 80046d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <std+0x68>)
 80046dc:	6224      	str	r4, [r4, #32]
 80046de:	429c      	cmp	r4, r3
 80046e0:	d006      	beq.n	80046f0 <std+0x48>
 80046e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046e6:	4294      	cmp	r4, r2
 80046e8:	d002      	beq.n	80046f0 <std+0x48>
 80046ea:	33d0      	adds	r3, #208	@ 0xd0
 80046ec:	429c      	cmp	r4, r3
 80046ee:	d105      	bne.n	80046fc <std+0x54>
 80046f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f000 ba58 	b.w	8004bac <__retarget_lock_init_recursive>
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	0800490d 	.word	0x0800490d
 8004704:	0800492f 	.word	0x0800492f
 8004708:	08004967 	.word	0x08004967
 800470c:	0800498b 	.word	0x0800498b
 8004710:	200002b8 	.word	0x200002b8

08004714 <stdio_exit_handler>:
 8004714:	4a02      	ldr	r2, [pc, #8]	@ (8004720 <stdio_exit_handler+0xc>)
 8004716:	4903      	ldr	r1, [pc, #12]	@ (8004724 <stdio_exit_handler+0x10>)
 8004718:	4803      	ldr	r0, [pc, #12]	@ (8004728 <stdio_exit_handler+0x14>)
 800471a:	f000 b869 	b.w	80047f0 <_fwalk_sglue>
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c
 8004724:	0800544d 	.word	0x0800544d
 8004728:	2000001c 	.word	0x2000001c

0800472c <cleanup_stdio>:
 800472c:	6841      	ldr	r1, [r0, #4]
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <cleanup_stdio+0x34>)
 8004730:	4299      	cmp	r1, r3
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	d001      	beq.n	800473c <cleanup_stdio+0x10>
 8004738:	f000 fe88 	bl	800544c <_fflush_r>
 800473c:	68a1      	ldr	r1, [r4, #8]
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <cleanup_stdio+0x38>)
 8004740:	4299      	cmp	r1, r3
 8004742:	d002      	beq.n	800474a <cleanup_stdio+0x1e>
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fe81 	bl	800544c <_fflush_r>
 800474a:	68e1      	ldr	r1, [r4, #12]
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <cleanup_stdio+0x3c>)
 800474e:	4299      	cmp	r1, r3
 8004750:	d004      	beq.n	800475c <cleanup_stdio+0x30>
 8004752:	4620      	mov	r0, r4
 8004754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004758:	f000 be78 	b.w	800544c <_fflush_r>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	bf00      	nop
 8004760:	200002b8 	.word	0x200002b8
 8004764:	20000320 	.word	0x20000320
 8004768:	20000388 	.word	0x20000388

0800476c <global_stdio_init.part.0>:
 800476c:	b510      	push	{r4, lr}
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <global_stdio_init.part.0+0x30>)
 8004770:	4c0b      	ldr	r4, [pc, #44]	@ (80047a0 <global_stdio_init.part.0+0x34>)
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <global_stdio_init.part.0+0x38>)
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	4620      	mov	r0, r4
 8004778:	2200      	movs	r2, #0
 800477a:	2104      	movs	r1, #4
 800477c:	f7ff ff94 	bl	80046a8 <std>
 8004780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004784:	2201      	movs	r2, #1
 8004786:	2109      	movs	r1, #9
 8004788:	f7ff ff8e 	bl	80046a8 <std>
 800478c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004790:	2202      	movs	r2, #2
 8004792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004796:	2112      	movs	r1, #18
 8004798:	f7ff bf86 	b.w	80046a8 <std>
 800479c:	200003f0 	.word	0x200003f0
 80047a0:	200002b8 	.word	0x200002b8
 80047a4:	08004715 	.word	0x08004715

080047a8 <__sfp_lock_acquire>:
 80047a8:	4801      	ldr	r0, [pc, #4]	@ (80047b0 <__sfp_lock_acquire+0x8>)
 80047aa:	f000 ba00 	b.w	8004bae <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	200003f9 	.word	0x200003f9

080047b4 <__sfp_lock_release>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__sfp_lock_release+0x8>)
 80047b6:	f000 b9fb 	b.w	8004bb0 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	200003f9 	.word	0x200003f9

080047c0 <__sinit>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
 80047c4:	f7ff fff0 	bl	80047a8 <__sfp_lock_acquire>
 80047c8:	6a23      	ldr	r3, [r4, #32]
 80047ca:	b11b      	cbz	r3, 80047d4 <__sinit+0x14>
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d0:	f7ff bff0 	b.w	80047b4 <__sfp_lock_release>
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__sinit+0x28>)
 80047d6:	6223      	str	r3, [r4, #32]
 80047d8:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <__sinit+0x2c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f5      	bne.n	80047cc <__sinit+0xc>
 80047e0:	f7ff ffc4 	bl	800476c <global_stdio_init.part.0>
 80047e4:	e7f2      	b.n	80047cc <__sinit+0xc>
 80047e6:	bf00      	nop
 80047e8:	0800472d 	.word	0x0800472d
 80047ec:	200003f0 	.word	0x200003f0

080047f0 <_fwalk_sglue>:
 80047f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f4:	4607      	mov	r7, r0
 80047f6:	4688      	mov	r8, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	2600      	movs	r6, #0
 80047fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004800:	f1b9 0901 	subs.w	r9, r9, #1
 8004804:	d505      	bpl.n	8004812 <_fwalk_sglue+0x22>
 8004806:	6824      	ldr	r4, [r4, #0]
 8004808:	2c00      	cmp	r4, #0
 800480a:	d1f7      	bne.n	80047fc <_fwalk_sglue+0xc>
 800480c:	4630      	mov	r0, r6
 800480e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d907      	bls.n	8004828 <_fwalk_sglue+0x38>
 8004818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800481c:	3301      	adds	r3, #1
 800481e:	d003      	beq.n	8004828 <_fwalk_sglue+0x38>
 8004820:	4629      	mov	r1, r5
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	4306      	orrs	r6, r0
 8004828:	3568      	adds	r5, #104	@ 0x68
 800482a:	e7e9      	b.n	8004800 <_fwalk_sglue+0x10>

0800482c <iprintf>:
 800482c:	b40f      	push	{r0, r1, r2, r3}
 800482e:	b507      	push	{r0, r1, r2, lr}
 8004830:	4906      	ldr	r1, [pc, #24]	@ (800484c <iprintf+0x20>)
 8004832:	ab04      	add	r3, sp, #16
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	f853 2b04 	ldr.w	r2, [r3], #4
 800483a:	6881      	ldr	r1, [r0, #8]
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	f000 fadb 	bl	8004df8 <_vfiprintf_r>
 8004842:	b003      	add	sp, #12
 8004844:	f85d eb04 	ldr.w	lr, [sp], #4
 8004848:	b004      	add	sp, #16
 800484a:	4770      	bx	lr
 800484c:	20000018 	.word	0x20000018

08004850 <_puts_r>:
 8004850:	6a03      	ldr	r3, [r0, #32]
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	6884      	ldr	r4, [r0, #8]
 8004856:	4605      	mov	r5, r0
 8004858:	460e      	mov	r6, r1
 800485a:	b90b      	cbnz	r3, 8004860 <_puts_r+0x10>
 800485c:	f7ff ffb0 	bl	80047c0 <__sinit>
 8004860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004862:	07db      	lsls	r3, r3, #31
 8004864:	d405      	bmi.n	8004872 <_puts_r+0x22>
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	0598      	lsls	r0, r3, #22
 800486a:	d402      	bmi.n	8004872 <_puts_r+0x22>
 800486c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800486e:	f000 f99e 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	0719      	lsls	r1, r3, #28
 8004876:	d502      	bpl.n	800487e <_puts_r+0x2e>
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d135      	bne.n	80048ea <_puts_r+0x9a>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f8c5 	bl	8004a10 <__swsetup_r>
 8004886:	b380      	cbz	r0, 80048ea <_puts_r+0x9a>
 8004888:	f04f 35ff 	mov.w	r5, #4294967295
 800488c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800488e:	07da      	lsls	r2, r3, #31
 8004890:	d405      	bmi.n	800489e <_puts_r+0x4e>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	059b      	lsls	r3, r3, #22
 8004896:	d402      	bmi.n	800489e <_puts_r+0x4e>
 8004898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800489a:	f000 f989 	bl	8004bb0 <__retarget_lock_release_recursive>
 800489e:	4628      	mov	r0, r5
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da04      	bge.n	80048b0 <_puts_r+0x60>
 80048a6:	69a2      	ldr	r2, [r4, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	dc17      	bgt.n	80048dc <_puts_r+0x8c>
 80048ac:	290a      	cmp	r1, #10
 80048ae:	d015      	beq.n	80048dc <_puts_r+0x8c>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	6022      	str	r2, [r4, #0]
 80048b6:	7019      	strb	r1, [r3, #0]
 80048b8:	68a3      	ldr	r3, [r4, #8]
 80048ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048be:	3b01      	subs	r3, #1
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d1ed      	bne.n	80048a2 <_puts_r+0x52>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da11      	bge.n	80048ee <_puts_r+0x9e>
 80048ca:	4622      	mov	r2, r4
 80048cc:	210a      	movs	r1, #10
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f85f 	bl	8004992 <__swbuf_r>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d0d7      	beq.n	8004888 <_puts_r+0x38>
 80048d8:	250a      	movs	r5, #10
 80048da:	e7d7      	b.n	800488c <_puts_r+0x3c>
 80048dc:	4622      	mov	r2, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f857 	bl	8004992 <__swbuf_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d1e7      	bne.n	80048b8 <_puts_r+0x68>
 80048e8:	e7ce      	b.n	8004888 <_puts_r+0x38>
 80048ea:	3e01      	subs	r6, #1
 80048ec:	e7e4      	b.n	80048b8 <_puts_r+0x68>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	6022      	str	r2, [r4, #0]
 80048f4:	220a      	movs	r2, #10
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e7ee      	b.n	80048d8 <_puts_r+0x88>
	...

080048fc <puts>:
 80048fc:	4b02      	ldr	r3, [pc, #8]	@ (8004908 <puts+0xc>)
 80048fe:	4601      	mov	r1, r0
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f7ff bfa5 	b.w	8004850 <_puts_r>
 8004906:	bf00      	nop
 8004908:	20000018 	.word	0x20000018

0800490c <__sread>:
 800490c:	b510      	push	{r4, lr}
 800490e:	460c      	mov	r4, r1
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	f000 f8fc 	bl	8004b10 <_read_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	bfab      	itete	ge
 800491c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800491e:	89a3      	ldrhlt	r3, [r4, #12]
 8004920:	181b      	addge	r3, r3, r0
 8004922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004926:	bfac      	ite	ge
 8004928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800492a:	81a3      	strhlt	r3, [r4, #12]
 800492c:	bd10      	pop	{r4, pc}

0800492e <__swrite>:
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	461f      	mov	r7, r3
 8004934:	898b      	ldrh	r3, [r1, #12]
 8004936:	05db      	lsls	r3, r3, #23
 8004938:	4605      	mov	r5, r0
 800493a:	460c      	mov	r4, r1
 800493c:	4616      	mov	r6, r2
 800493e:	d505      	bpl.n	800494c <__swrite+0x1e>
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2302      	movs	r3, #2
 8004946:	2200      	movs	r2, #0
 8004948:	f000 f8d0 	bl	8004aec <_lseek_r>
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004956:	81a3      	strh	r3, [r4, #12]
 8004958:	4632      	mov	r2, r6
 800495a:	463b      	mov	r3, r7
 800495c:	4628      	mov	r0, r5
 800495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	f000 b8e7 	b.w	8004b34 <_write_r>

08004966 <__sseek>:
 8004966:	b510      	push	{r4, lr}
 8004968:	460c      	mov	r4, r1
 800496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496e:	f000 f8bd 	bl	8004aec <_lseek_r>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	bf15      	itete	ne
 8004978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800497a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800497e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004982:	81a3      	strheq	r3, [r4, #12]
 8004984:	bf18      	it	ne
 8004986:	81a3      	strhne	r3, [r4, #12]
 8004988:	bd10      	pop	{r4, pc}

0800498a <__sclose>:
 800498a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498e:	f000 b89d 	b.w	8004acc <_close_r>

08004992 <__swbuf_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	460e      	mov	r6, r1
 8004996:	4614      	mov	r4, r2
 8004998:	4605      	mov	r5, r0
 800499a:	b118      	cbz	r0, 80049a4 <__swbuf_r+0x12>
 800499c:	6a03      	ldr	r3, [r0, #32]
 800499e:	b90b      	cbnz	r3, 80049a4 <__swbuf_r+0x12>
 80049a0:	f7ff ff0e 	bl	80047c0 <__sinit>
 80049a4:	69a3      	ldr	r3, [r4, #24]
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	071a      	lsls	r2, r3, #28
 80049ac:	d501      	bpl.n	80049b2 <__swbuf_r+0x20>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	b943      	cbnz	r3, 80049c4 <__swbuf_r+0x32>
 80049b2:	4621      	mov	r1, r4
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 f82b 	bl	8004a10 <__swsetup_r>
 80049ba:	b118      	cbz	r0, 80049c4 <__swbuf_r+0x32>
 80049bc:	f04f 37ff 	mov.w	r7, #4294967295
 80049c0:	4638      	mov	r0, r7
 80049c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	6922      	ldr	r2, [r4, #16]
 80049c8:	1a98      	subs	r0, r3, r2
 80049ca:	6963      	ldr	r3, [r4, #20]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	4283      	cmp	r3, r0
 80049d0:	4637      	mov	r7, r6
 80049d2:	dc05      	bgt.n	80049e0 <__swbuf_r+0x4e>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fd38 	bl	800544c <_fflush_r>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d1ed      	bne.n	80049bc <__swbuf_r+0x2a>
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	6022      	str	r2, [r4, #0]
 80049ec:	701e      	strb	r6, [r3, #0]
 80049ee:	6962      	ldr	r2, [r4, #20]
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d004      	beq.n	8004a00 <__swbuf_r+0x6e>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	07db      	lsls	r3, r3, #31
 80049fa:	d5e1      	bpl.n	80049c0 <__swbuf_r+0x2e>
 80049fc:	2e0a      	cmp	r6, #10
 80049fe:	d1df      	bne.n	80049c0 <__swbuf_r+0x2e>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fd22 	bl	800544c <_fflush_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d0d9      	beq.n	80049c0 <__swbuf_r+0x2e>
 8004a0c:	e7d6      	b.n	80049bc <__swbuf_r+0x2a>
	...

08004a10 <__swsetup_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <__swsetup_r+0xa8>)
 8004a14:	4605      	mov	r5, r0
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	460c      	mov	r4, r1
 8004a1a:	b118      	cbz	r0, 8004a24 <__swsetup_r+0x14>
 8004a1c:	6a03      	ldr	r3, [r0, #32]
 8004a1e:	b90b      	cbnz	r3, 8004a24 <__swsetup_r+0x14>
 8004a20:	f7ff fece 	bl	80047c0 <__sinit>
 8004a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a28:	0719      	lsls	r1, r3, #28
 8004a2a:	d422      	bmi.n	8004a72 <__swsetup_r+0x62>
 8004a2c:	06da      	lsls	r2, r3, #27
 8004a2e:	d407      	bmi.n	8004a40 <__swsetup_r+0x30>
 8004a30:	2209      	movs	r2, #9
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3e:	e033      	b.n	8004aa8 <__swsetup_r+0x98>
 8004a40:	0758      	lsls	r0, r3, #29
 8004a42:	d512      	bpl.n	8004a6a <__swsetup_r+0x5a>
 8004a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a46:	b141      	cbz	r1, 8004a5a <__swsetup_r+0x4a>
 8004a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	d002      	beq.n	8004a56 <__swsetup_r+0x46>
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 f8af 	bl	8004bb4 <_free_r>
 8004a56:	2300      	movs	r3, #0
 8004a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	2300      	movs	r3, #0
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	b94b      	cbnz	r3, 8004a8a <__swsetup_r+0x7a>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a80:	d003      	beq.n	8004a8a <__swsetup_r+0x7a>
 8004a82:	4621      	mov	r1, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 fd2f 	bl	80054e8 <__smakebuf_r>
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	f013 0201 	ands.w	r2, r3, #1
 8004a92:	d00a      	beq.n	8004aaa <__swsetup_r+0x9a>
 8004a94:	2200      	movs	r2, #0
 8004a96:	60a2      	str	r2, [r4, #8]
 8004a98:	6962      	ldr	r2, [r4, #20]
 8004a9a:	4252      	negs	r2, r2
 8004a9c:	61a2      	str	r2, [r4, #24]
 8004a9e:	6922      	ldr	r2, [r4, #16]
 8004aa0:	b942      	cbnz	r2, 8004ab4 <__swsetup_r+0xa4>
 8004aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004aa6:	d1c5      	bne.n	8004a34 <__swsetup_r+0x24>
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	0799      	lsls	r1, r3, #30
 8004aac:	bf58      	it	pl
 8004aae:	6962      	ldrpl	r2, [r4, #20]
 8004ab0:	60a2      	str	r2, [r4, #8]
 8004ab2:	e7f4      	b.n	8004a9e <__swsetup_r+0x8e>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e7f7      	b.n	8004aa8 <__swsetup_r+0x98>
 8004ab8:	20000018 	.word	0x20000018

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d06      	ldr	r5, [pc, #24]	@ (8004ae8 <_close_r+0x1c>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	f7fc f9bb 	bl	8000e52 <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200003f4 	.word	0x200003f4

08004aec <_lseek_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d07      	ldr	r5, [pc, #28]	@ (8004b0c <_lseek_r+0x20>)
 8004af0:	4604      	mov	r4, r0
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	2200      	movs	r2, #0
 8004af8:	602a      	str	r2, [r5, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7fc f9d0 	bl	8000ea0 <_lseek>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_lseek_r+0x1e>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_lseek_r+0x1e>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	200003f4 	.word	0x200003f4

08004b10 <_read_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d07      	ldr	r5, [pc, #28]	@ (8004b30 <_read_r+0x20>)
 8004b14:	4604      	mov	r4, r0
 8004b16:	4608      	mov	r0, r1
 8004b18:	4611      	mov	r1, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fc f95e 	bl	8000de0 <_read>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_read_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_read_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	200003f4 	.word	0x200003f4

08004b34 <_write_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	@ (8004b54 <_write_r+0x20>)
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	602a      	str	r2, [r5, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fc f969 	bl	8000e1a <_write>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_write_r+0x1e>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_write_r+0x1e>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200003f4 	.word	0x200003f4

08004b58 <__errno>:
 8004b58:	4b01      	ldr	r3, [pc, #4]	@ (8004b60 <__errno+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000018 	.word	0x20000018

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4d0d      	ldr	r5, [pc, #52]	@ (8004b9c <__libc_init_array+0x38>)
 8004b68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba0 <__libc_init_array+0x3c>)
 8004b6a:	1b64      	subs	r4, r4, r5
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	2600      	movs	r6, #0
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba4 <__libc_init_array+0x40>)
 8004b76:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba8 <__libc_init_array+0x44>)
 8004b78:	f000 fd24 	bl	80055c4 <_init>
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	2600      	movs	r6, #0
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08005768 	.word	0x08005768
 8004ba0:	08005768 	.word	0x08005768
 8004ba4:	08005768 	.word	0x08005768
 8004ba8:	0800576c 	.word	0x0800576c

08004bac <__retarget_lock_init_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_acquire_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__retarget_lock_release_recursive>:
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_free_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d041      	beq.n	8004c40 <_free_r+0x8c>
 8004bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc0:	1f0c      	subs	r4, r1, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bfb8      	it	lt
 8004bc6:	18e4      	addlt	r4, r4, r3
 8004bc8:	f000 f8e0 	bl	8004d8c <__malloc_lock>
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <_free_r+0x90>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	b933      	cbnz	r3, 8004be0 <_free_r+0x2c>
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	6014      	str	r4, [r2, #0]
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bdc:	f000 b8dc 	b.w	8004d98 <__malloc_unlock>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d908      	bls.n	8004bf6 <_free_r+0x42>
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	1821      	adds	r1, r4, r0
 8004be8:	428b      	cmp	r3, r1
 8004bea:	bf01      	itttt	eq
 8004bec:	6819      	ldreq	r1, [r3, #0]
 8004bee:	685b      	ldreq	r3, [r3, #4]
 8004bf0:	1809      	addeq	r1, r1, r0
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	e7ed      	b.n	8004bd2 <_free_r+0x1e>
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	b10b      	cbz	r3, 8004c00 <_free_r+0x4c>
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d9fa      	bls.n	8004bf6 <_free_r+0x42>
 8004c00:	6811      	ldr	r1, [r2, #0]
 8004c02:	1850      	adds	r0, r2, r1
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d10b      	bne.n	8004c20 <_free_r+0x6c>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	4401      	add	r1, r0
 8004c0c:	1850      	adds	r0, r2, r1
 8004c0e:	4283      	cmp	r3, r0
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	d1e0      	bne.n	8004bd6 <_free_r+0x22>
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6053      	str	r3, [r2, #4]
 8004c1a:	4408      	add	r0, r1
 8004c1c:	6010      	str	r0, [r2, #0]
 8004c1e:	e7da      	b.n	8004bd6 <_free_r+0x22>
 8004c20:	d902      	bls.n	8004c28 <_free_r+0x74>
 8004c22:	230c      	movs	r3, #12
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	e7d6      	b.n	8004bd6 <_free_r+0x22>
 8004c28:	6820      	ldr	r0, [r4, #0]
 8004c2a:	1821      	adds	r1, r4, r0
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	bf04      	itt	eq
 8004c30:	6819      	ldreq	r1, [r3, #0]
 8004c32:	685b      	ldreq	r3, [r3, #4]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	bf04      	itt	eq
 8004c38:	1809      	addeq	r1, r1, r0
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	6054      	str	r4, [r2, #4]
 8004c3e:	e7ca      	b.n	8004bd6 <_free_r+0x22>
 8004c40:	bd38      	pop	{r3, r4, r5, pc}
 8004c42:	bf00      	nop
 8004c44:	20000400 	.word	0x20000400

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c88 <sbrk_aligned+0x40>)
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	4605      	mov	r5, r0
 8004c52:	b911      	cbnz	r1, 8004c5a <sbrk_aligned+0x12>
 8004c54:	f000 fca6 	bl	80055a4 <_sbrk_r>
 8004c58:	6030      	str	r0, [r6, #0]
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fca1 	bl	80055a4 <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d103      	bne.n	8004c6e <sbrk_aligned+0x26>
 8004c66:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d0f8      	beq.n	8004c6a <sbrk_aligned+0x22>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 fc92 	bl	80055a4 <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d1f2      	bne.n	8004c6a <sbrk_aligned+0x22>
 8004c84:	e7ef      	b.n	8004c66 <sbrk_aligned+0x1e>
 8004c86:	bf00      	nop
 8004c88:	200003fc 	.word	0x200003fc

08004c8c <_malloc_r>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	1ccd      	adds	r5, r1, #3
 8004c92:	f025 0503 	bic.w	r5, r5, #3
 8004c96:	3508      	adds	r5, #8
 8004c98:	2d0c      	cmp	r5, #12
 8004c9a:	bf38      	it	cc
 8004c9c:	250c      	movcc	r5, #12
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	db01      	blt.n	8004ca8 <_malloc_r+0x1c>
 8004ca4:	42a9      	cmp	r1, r5
 8004ca6:	d904      	bls.n	8004cb2 <_malloc_r+0x26>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	2000      	movs	r0, #0
 8004cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d88 <_malloc_r+0xfc>
 8004cb6:	f000 f869 	bl	8004d8c <__malloc_lock>
 8004cba:	f8d8 3000 	ldr.w	r3, [r8]
 8004cbe:	461c      	mov	r4, r3
 8004cc0:	bb44      	cbnz	r4, 8004d14 <_malloc_r+0x88>
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f7ff ffbf 	bl	8004c48 <sbrk_aligned>
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	4604      	mov	r4, r0
 8004cce:	d158      	bne.n	8004d82 <_malloc_r+0xf6>
 8004cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd4:	4627      	mov	r7, r4
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d143      	bne.n	8004d62 <_malloc_r+0xd6>
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	d04b      	beq.n	8004d76 <_malloc_r+0xea>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	eb04 0903 	add.w	r9, r4, r3
 8004ce8:	f000 fc5c 	bl	80055a4 <_sbrk_r>
 8004cec:	4581      	cmp	r9, r0
 8004cee:	d142      	bne.n	8004d76 <_malloc_r+0xea>
 8004cf0:	6821      	ldr	r1, [r4, #0]
 8004cf2:	1a6d      	subs	r5, r5, r1
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7ff ffa6 	bl	8004c48 <sbrk_aligned>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d03a      	beq.n	8004d76 <_malloc_r+0xea>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	442b      	add	r3, r5
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	bb62      	cbnz	r2, 8004d68 <_malloc_r+0xdc>
 8004d0e:	f8c8 7000 	str.w	r7, [r8]
 8004d12:	e00f      	b.n	8004d34 <_malloc_r+0xa8>
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	1b52      	subs	r2, r2, r5
 8004d18:	d420      	bmi.n	8004d5c <_malloc_r+0xd0>
 8004d1a:	2a0b      	cmp	r2, #11
 8004d1c:	d917      	bls.n	8004d4e <_malloc_r+0xc2>
 8004d1e:	1961      	adds	r1, r4, r5
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	6025      	str	r5, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	6059      	strne	r1, [r3, #4]
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	bf08      	it	eq
 8004d2c:	f8c8 1000 	streq.w	r1, [r8]
 8004d30:	5162      	str	r2, [r4, r5]
 8004d32:	604b      	str	r3, [r1, #4]
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f82f 	bl	8004d98 <__malloc_unlock>
 8004d3a:	f104 000b 	add.w	r0, r4, #11
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	f020 0007 	bic.w	r0, r0, #7
 8004d44:	1ac2      	subs	r2, r0, r3
 8004d46:	bf1c      	itt	ne
 8004d48:	1a1b      	subne	r3, r3, r0
 8004d4a:	50a3      	strne	r3, [r4, r2]
 8004d4c:	e7af      	b.n	8004cae <_malloc_r+0x22>
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	bf0c      	ite	eq
 8004d54:	f8c8 2000 	streq.w	r2, [r8]
 8004d58:	605a      	strne	r2, [r3, #4]
 8004d5a:	e7eb      	b.n	8004d34 <_malloc_r+0xa8>
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	6864      	ldr	r4, [r4, #4]
 8004d60:	e7ae      	b.n	8004cc0 <_malloc_r+0x34>
 8004d62:	463c      	mov	r4, r7
 8004d64:	687f      	ldr	r7, [r7, #4]
 8004d66:	e7b6      	b.n	8004cd6 <_malloc_r+0x4a>
 8004d68:	461a      	mov	r2, r3
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d1fb      	bne.n	8004d68 <_malloc_r+0xdc>
 8004d70:	2300      	movs	r3, #0
 8004d72:	6053      	str	r3, [r2, #4]
 8004d74:	e7de      	b.n	8004d34 <_malloc_r+0xa8>
 8004d76:	230c      	movs	r3, #12
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 f80c 	bl	8004d98 <__malloc_unlock>
 8004d80:	e794      	b.n	8004cac <_malloc_r+0x20>
 8004d82:	6005      	str	r5, [r0, #0]
 8004d84:	e7d6      	b.n	8004d34 <_malloc_r+0xa8>
 8004d86:	bf00      	nop
 8004d88:	20000400 	.word	0x20000400

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	@ (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f7ff bf0e 	b.w	8004bae <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	200003f8 	.word	0x200003f8

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	@ (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f7ff bf09 	b.w	8004bb0 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	200003f8 	.word	0x200003f8

08004da4 <__sfputc_r>:
 8004da4:	6893      	ldr	r3, [r2, #8]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	b410      	push	{r4}
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	da08      	bge.n	8004dc2 <__sfputc_r+0x1e>
 8004db0:	6994      	ldr	r4, [r2, #24]
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	db01      	blt.n	8004dba <__sfputc_r+0x16>
 8004db6:	290a      	cmp	r1, #10
 8004db8:	d103      	bne.n	8004dc2 <__sfputc_r+0x1e>
 8004dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dbe:	f7ff bde8 	b.w	8004992 <__swbuf_r>
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	1c58      	adds	r0, r3, #1
 8004dc6:	6010      	str	r0, [r2, #0]
 8004dc8:	7019      	strb	r1, [r3, #0]
 8004dca:	4608      	mov	r0, r1
 8004dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <__sfputs_r>:
 8004dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	18d5      	adds	r5, r2, r3
 8004ddc:	42ac      	cmp	r4, r5
 8004dde:	d101      	bne.n	8004de4 <__sfputs_r+0x12>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e007      	b.n	8004df4 <__sfputs_r+0x22>
 8004de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de8:	463a      	mov	r2, r7
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ffda 	bl	8004da4 <__sfputc_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d1f3      	bne.n	8004ddc <__sfputs_r+0xa>
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df8 <_vfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	b09d      	sub	sp, #116	@ 0x74
 8004e00:	4614      	mov	r4, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	4606      	mov	r6, r0
 8004e06:	b118      	cbz	r0, 8004e10 <_vfiprintf_r+0x18>
 8004e08:	6a03      	ldr	r3, [r0, #32]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_vfiprintf_r+0x18>
 8004e0c:	f7ff fcd8 	bl	80047c0 <__sinit>
 8004e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e12:	07d9      	lsls	r1, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_vfiprintf_r+0x2a>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	059a      	lsls	r2, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_vfiprintf_r+0x2a>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e1e:	f7ff fec6 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	071b      	lsls	r3, r3, #28
 8004e26:	d501      	bpl.n	8004e2c <_vfiprintf_r+0x34>
 8004e28:	692b      	ldr	r3, [r5, #16]
 8004e2a:	b99b      	cbnz	r3, 8004e54 <_vfiprintf_r+0x5c>
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff fdee 	bl	8004a10 <__swsetup_r>
 8004e34:	b170      	cbz	r0, 8004e54 <_vfiprintf_r+0x5c>
 8004e36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e38:	07dc      	lsls	r4, r3, #31
 8004e3a:	d504      	bpl.n	8004e46 <_vfiprintf_r+0x4e>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b01d      	add	sp, #116	@ 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	0598      	lsls	r0, r3, #22
 8004e4a:	d4f7      	bmi.n	8004e3c <_vfiprintf_r+0x44>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e4e:	f7ff feaf 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004e52:	e7f3      	b.n	8004e3c <_vfiprintf_r+0x44>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e58:	2320      	movs	r3, #32
 8004e5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e62:	2330      	movs	r3, #48	@ 0x30
 8004e64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005014 <_vfiprintf_r+0x21c>
 8004e68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e6c:	f04f 0901 	mov.w	r9, #1
 8004e70:	4623      	mov	r3, r4
 8004e72:	469a      	mov	sl, r3
 8004e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e78:	b10a      	cbz	r2, 8004e7e <_vfiprintf_r+0x86>
 8004e7a:	2a25      	cmp	r2, #37	@ 0x25
 8004e7c:	d1f9      	bne.n	8004e72 <_vfiprintf_r+0x7a>
 8004e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e82:	d00b      	beq.n	8004e9c <_vfiprintf_r+0xa4>
 8004e84:	465b      	mov	r3, fp
 8004e86:	4622      	mov	r2, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff ffa1 	bl	8004dd2 <__sfputs_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	f000 80a7 	beq.w	8004fe4 <_vfiprintf_r+0x1ec>
 8004e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e98:	445a      	add	r2, fp
 8004e9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 809f 	beq.w	8004fe4 <_vfiprintf_r+0x1ec>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb0:	f10a 0a01 	add.w	sl, sl, #1
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	9307      	str	r3, [sp, #28]
 8004eb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ebc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ebe:	4654      	mov	r4, sl
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec6:	4853      	ldr	r0, [pc, #332]	@ (8005014 <_vfiprintf_r+0x21c>)
 8004ec8:	f7fb f9a2 	bl	8000210 <memchr>
 8004ecc:	9a04      	ldr	r2, [sp, #16]
 8004ece:	b9d8      	cbnz	r0, 8004f08 <_vfiprintf_r+0x110>
 8004ed0:	06d1      	lsls	r1, r2, #27
 8004ed2:	bf44      	itt	mi
 8004ed4:	2320      	movmi	r3, #32
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eda:	0713      	lsls	r3, r2, #28
 8004edc:	bf44      	itt	mi
 8004ede:	232b      	movmi	r3, #43	@ 0x2b
 8004ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eea:	d015      	beq.n	8004f18 <_vfiprintf_r+0x120>
 8004eec:	9a07      	ldr	r2, [sp, #28]
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f04f 0c0a 	mov.w	ip, #10
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efc:	3b30      	subs	r3, #48	@ 0x30
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d94b      	bls.n	8004f9a <_vfiprintf_r+0x1a2>
 8004f02:	b1b0      	cbz	r0, 8004f32 <_vfiprintf_r+0x13a>
 8004f04:	9207      	str	r2, [sp, #28]
 8004f06:	e014      	b.n	8004f32 <_vfiprintf_r+0x13a>
 8004f08:	eba0 0308 	sub.w	r3, r0, r8
 8004f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f10:	4313      	orrs	r3, r2
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	46a2      	mov	sl, r4
 8004f16:	e7d2      	b.n	8004ebe <_vfiprintf_r+0xc6>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d19      	adds	r1, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9103      	str	r1, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bfbb      	ittet	lt
 8004f24:	425b      	neglt	r3, r3
 8004f26:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2a:	9307      	strge	r3, [sp, #28]
 8004f2c:	9307      	strlt	r3, [sp, #28]
 8004f2e:	bfb8      	it	lt
 8004f30:	9204      	strlt	r2, [sp, #16]
 8004f32:	7823      	ldrb	r3, [r4, #0]
 8004f34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f36:	d10a      	bne.n	8004f4e <_vfiprintf_r+0x156>
 8004f38:	7863      	ldrb	r3, [r4, #1]
 8004f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f3c:	d132      	bne.n	8004fa4 <_vfiprintf_r+0x1ac>
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	1d1a      	adds	r2, r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9203      	str	r2, [sp, #12]
 8004f46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f4a:	3402      	adds	r4, #2
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005024 <_vfiprintf_r+0x22c>
 8004f52:	7821      	ldrb	r1, [r4, #0]
 8004f54:	2203      	movs	r2, #3
 8004f56:	4650      	mov	r0, sl
 8004f58:	f7fb f95a 	bl	8000210 <memchr>
 8004f5c:	b138      	cbz	r0, 8004f6e <_vfiprintf_r+0x176>
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	eba0 000a 	sub.w	r0, r0, sl
 8004f64:	2240      	movs	r2, #64	@ 0x40
 8004f66:	4082      	lsls	r2, r0
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f72:	4829      	ldr	r0, [pc, #164]	@ (8005018 <_vfiprintf_r+0x220>)
 8004f74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f78:	2206      	movs	r2, #6
 8004f7a:	f7fb f949 	bl	8000210 <memchr>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d03f      	beq.n	8005002 <_vfiprintf_r+0x20a>
 8004f82:	4b26      	ldr	r3, [pc, #152]	@ (800501c <_vfiprintf_r+0x224>)
 8004f84:	bb1b      	cbnz	r3, 8004fce <_vfiprintf_r+0x1d6>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	3307      	adds	r3, #7
 8004f8a:	f023 0307 	bic.w	r3, r3, #7
 8004f8e:	3308      	adds	r3, #8
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f94:	443b      	add	r3, r7
 8004f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f98:	e76a      	b.n	8004e70 <_vfiprintf_r+0x78>
 8004f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	e7a8      	b.n	8004ef6 <_vfiprintf_r+0xfe>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	3401      	adds	r4, #1
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	4619      	mov	r1, r3
 8004fac:	f04f 0c0a 	mov.w	ip, #10
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb6:	3a30      	subs	r2, #48	@ 0x30
 8004fb8:	2a09      	cmp	r2, #9
 8004fba:	d903      	bls.n	8004fc4 <_vfiprintf_r+0x1cc>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0c6      	beq.n	8004f4e <_vfiprintf_r+0x156>
 8004fc0:	9105      	str	r1, [sp, #20]
 8004fc2:	e7c4      	b.n	8004f4e <_vfiprintf_r+0x156>
 8004fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc8:	4604      	mov	r4, r0
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e7f0      	b.n	8004fb0 <_vfiprintf_r+0x1b8>
 8004fce:	ab03      	add	r3, sp, #12
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <_vfiprintf_r+0x228>)
 8004fd6:	a904      	add	r1, sp, #16
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f3af 8000 	nop.w
 8004fde:	4607      	mov	r7, r0
 8004fe0:	1c78      	adds	r0, r7, #1
 8004fe2:	d1d6      	bne.n	8004f92 <_vfiprintf_r+0x19a>
 8004fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fe6:	07d9      	lsls	r1, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_vfiprintf_r+0x1fe>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	059a      	lsls	r2, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_vfiprintf_r+0x1fe>
 8004ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ff2:	f7ff fddd 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	065b      	lsls	r3, r3, #25
 8004ffa:	f53f af1f 	bmi.w	8004e3c <_vfiprintf_r+0x44>
 8004ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005000:	e71e      	b.n	8004e40 <_vfiprintf_r+0x48>
 8005002:	ab03      	add	r3, sp, #12
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	462a      	mov	r2, r5
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <_vfiprintf_r+0x228>)
 800500a:	a904      	add	r1, sp, #16
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f879 	bl	8005104 <_printf_i>
 8005012:	e7e4      	b.n	8004fde <_vfiprintf_r+0x1e6>
 8005014:	0800572c 	.word	0x0800572c
 8005018:	08005736 	.word	0x08005736
 800501c:	00000000 	.word	0x00000000
 8005020:	08004dd3 	.word	0x08004dd3
 8005024:	08005732 	.word	0x08005732

08005028 <_printf_common>:
 8005028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	4616      	mov	r6, r2
 800502e:	4698      	mov	r8, r3
 8005030:	688a      	ldr	r2, [r1, #8]
 8005032:	690b      	ldr	r3, [r1, #16]
 8005034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005038:	4293      	cmp	r3, r2
 800503a:	bfb8      	it	lt
 800503c:	4613      	movlt	r3, r2
 800503e:	6033      	str	r3, [r6, #0]
 8005040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005044:	4607      	mov	r7, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b10a      	cbz	r2, 800504e <_printf_common+0x26>
 800504a:	3301      	adds	r3, #1
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	0699      	lsls	r1, r3, #26
 8005052:	bf42      	ittt	mi
 8005054:	6833      	ldrmi	r3, [r6, #0]
 8005056:	3302      	addmi	r3, #2
 8005058:	6033      	strmi	r3, [r6, #0]
 800505a:	6825      	ldr	r5, [r4, #0]
 800505c:	f015 0506 	ands.w	r5, r5, #6
 8005060:	d106      	bne.n	8005070 <_printf_common+0x48>
 8005062:	f104 0a19 	add.w	sl, r4, #25
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	6832      	ldr	r2, [r6, #0]
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	42ab      	cmp	r3, r5
 800506e:	dc26      	bgt.n	80050be <_printf_common+0x96>
 8005070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	3b00      	subs	r3, #0
 8005078:	bf18      	it	ne
 800507a:	2301      	movne	r3, #1
 800507c:	0692      	lsls	r2, r2, #26
 800507e:	d42b      	bmi.n	80050d8 <_printf_common+0xb0>
 8005080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005084:	4641      	mov	r1, r8
 8005086:	4638      	mov	r0, r7
 8005088:	47c8      	blx	r9
 800508a:	3001      	adds	r0, #1
 800508c:	d01e      	beq.n	80050cc <_printf_common+0xa4>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	2b04      	cmp	r3, #4
 8005098:	bf02      	ittt	eq
 800509a:	68e5      	ldreq	r5, [r4, #12]
 800509c:	6833      	ldreq	r3, [r6, #0]
 800509e:	1aed      	subeq	r5, r5, r3
 80050a0:	68a3      	ldr	r3, [r4, #8]
 80050a2:	bf0c      	ite	eq
 80050a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a8:	2500      	movne	r5, #0
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bfc4      	itt	gt
 80050ae:	1a9b      	subgt	r3, r3, r2
 80050b0:	18ed      	addgt	r5, r5, r3
 80050b2:	2600      	movs	r6, #0
 80050b4:	341a      	adds	r4, #26
 80050b6:	42b5      	cmp	r5, r6
 80050b8:	d11a      	bne.n	80050f0 <_printf_common+0xc8>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e008      	b.n	80050d0 <_printf_common+0xa8>
 80050be:	2301      	movs	r3, #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	4641      	mov	r1, r8
 80050c4:	4638      	mov	r0, r7
 80050c6:	47c8      	blx	r9
 80050c8:	3001      	adds	r0, #1
 80050ca:	d103      	bne.n	80050d4 <_printf_common+0xac>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	3501      	adds	r5, #1
 80050d6:	e7c6      	b.n	8005066 <_printf_common+0x3e>
 80050d8:	18e1      	adds	r1, r4, r3
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	2030      	movs	r0, #48	@ 0x30
 80050de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050e2:	4422      	add	r2, r4
 80050e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ec:	3302      	adds	r3, #2
 80050ee:	e7c7      	b.n	8005080 <_printf_common+0x58>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4622      	mov	r2, r4
 80050f4:	4641      	mov	r1, r8
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c8      	blx	r9
 80050fa:	3001      	adds	r0, #1
 80050fc:	d0e6      	beq.n	80050cc <_printf_common+0xa4>
 80050fe:	3601      	adds	r6, #1
 8005100:	e7d9      	b.n	80050b6 <_printf_common+0x8e>
	...

08005104 <_printf_i>:
 8005104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	7e0f      	ldrb	r7, [r1, #24]
 800510a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800510c:	2f78      	cmp	r7, #120	@ 0x78
 800510e:	4691      	mov	r9, r2
 8005110:	4680      	mov	r8, r0
 8005112:	460c      	mov	r4, r1
 8005114:	469a      	mov	sl, r3
 8005116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800511a:	d807      	bhi.n	800512c <_printf_i+0x28>
 800511c:	2f62      	cmp	r7, #98	@ 0x62
 800511e:	d80a      	bhi.n	8005136 <_printf_i+0x32>
 8005120:	2f00      	cmp	r7, #0
 8005122:	f000 80d2 	beq.w	80052ca <_printf_i+0x1c6>
 8005126:	2f58      	cmp	r7, #88	@ 0x58
 8005128:	f000 80b9 	beq.w	800529e <_printf_i+0x19a>
 800512c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005134:	e03a      	b.n	80051ac <_printf_i+0xa8>
 8005136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800513a:	2b15      	cmp	r3, #21
 800513c:	d8f6      	bhi.n	800512c <_printf_i+0x28>
 800513e:	a101      	add	r1, pc, #4	@ (adr r1, 8005144 <_printf_i+0x40>)
 8005140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005144:	0800519d 	.word	0x0800519d
 8005148:	080051b1 	.word	0x080051b1
 800514c:	0800512d 	.word	0x0800512d
 8005150:	0800512d 	.word	0x0800512d
 8005154:	0800512d 	.word	0x0800512d
 8005158:	0800512d 	.word	0x0800512d
 800515c:	080051b1 	.word	0x080051b1
 8005160:	0800512d 	.word	0x0800512d
 8005164:	0800512d 	.word	0x0800512d
 8005168:	0800512d 	.word	0x0800512d
 800516c:	0800512d 	.word	0x0800512d
 8005170:	080052b1 	.word	0x080052b1
 8005174:	080051db 	.word	0x080051db
 8005178:	0800526b 	.word	0x0800526b
 800517c:	0800512d 	.word	0x0800512d
 8005180:	0800512d 	.word	0x0800512d
 8005184:	080052d3 	.word	0x080052d3
 8005188:	0800512d 	.word	0x0800512d
 800518c:	080051db 	.word	0x080051db
 8005190:	0800512d 	.word	0x0800512d
 8005194:	0800512d 	.word	0x0800512d
 8005198:	08005273 	.word	0x08005273
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6032      	str	r2, [r6, #0]
 80051a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051ac:	2301      	movs	r3, #1
 80051ae:	e09d      	b.n	80052ec <_printf_i+0x1e8>
 80051b0:	6833      	ldr	r3, [r6, #0]
 80051b2:	6820      	ldr	r0, [r4, #0]
 80051b4:	1d19      	adds	r1, r3, #4
 80051b6:	6031      	str	r1, [r6, #0]
 80051b8:	0606      	lsls	r6, r0, #24
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0xbc>
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	e003      	b.n	80051c8 <_printf_i+0xc4>
 80051c0:	0645      	lsls	r5, r0, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0xb8>
 80051c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	da03      	bge.n	80051d4 <_printf_i+0xd0>
 80051cc:	232d      	movs	r3, #45	@ 0x2d
 80051ce:	426d      	negs	r5, r5
 80051d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d4:	4859      	ldr	r0, [pc, #356]	@ (800533c <_printf_i+0x238>)
 80051d6:	230a      	movs	r3, #10
 80051d8:	e011      	b.n	80051fe <_printf_i+0xfa>
 80051da:	6821      	ldr	r1, [r4, #0]
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	0608      	lsls	r0, r1, #24
 80051e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051e4:	d402      	bmi.n	80051ec <_printf_i+0xe8>
 80051e6:	0649      	lsls	r1, r1, #25
 80051e8:	bf48      	it	mi
 80051ea:	b2ad      	uxthmi	r5, r5
 80051ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ee:	4853      	ldr	r0, [pc, #332]	@ (800533c <_printf_i+0x238>)
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	bf14      	ite	ne
 80051f4:	230a      	movne	r3, #10
 80051f6:	2308      	moveq	r3, #8
 80051f8:	2100      	movs	r1, #0
 80051fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051fe:	6866      	ldr	r6, [r4, #4]
 8005200:	60a6      	str	r6, [r4, #8]
 8005202:	2e00      	cmp	r6, #0
 8005204:	bfa2      	ittt	ge
 8005206:	6821      	ldrge	r1, [r4, #0]
 8005208:	f021 0104 	bicge.w	r1, r1, #4
 800520c:	6021      	strge	r1, [r4, #0]
 800520e:	b90d      	cbnz	r5, 8005214 <_printf_i+0x110>
 8005210:	2e00      	cmp	r6, #0
 8005212:	d04b      	beq.n	80052ac <_printf_i+0x1a8>
 8005214:	4616      	mov	r6, r2
 8005216:	fbb5 f1f3 	udiv	r1, r5, r3
 800521a:	fb03 5711 	mls	r7, r3, r1, r5
 800521e:	5dc7      	ldrb	r7, [r0, r7]
 8005220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005224:	462f      	mov	r7, r5
 8005226:	42bb      	cmp	r3, r7
 8005228:	460d      	mov	r5, r1
 800522a:	d9f4      	bls.n	8005216 <_printf_i+0x112>
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10b      	bne.n	8005248 <_printf_i+0x144>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	07df      	lsls	r7, r3, #31
 8005234:	d508      	bpl.n	8005248 <_printf_i+0x144>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	6861      	ldr	r1, [r4, #4]
 800523a:	4299      	cmp	r1, r3
 800523c:	bfde      	ittt	le
 800523e:	2330      	movle	r3, #48	@ 0x30
 8005240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005248:	1b92      	subs	r2, r2, r6
 800524a:	6122      	str	r2, [r4, #16]
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	464b      	mov	r3, r9
 8005252:	aa03      	add	r2, sp, #12
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f7ff fee6 	bl	8005028 <_printf_common>
 800525c:	3001      	adds	r0, #1
 800525e:	d14a      	bne.n	80052f6 <_printf_i+0x1f2>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	b004      	add	sp, #16
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f043 0320 	orr.w	r3, r3, #32
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	4833      	ldr	r0, [pc, #204]	@ (8005340 <_printf_i+0x23c>)
 8005274:	2778      	movs	r7, #120	@ 0x78
 8005276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	6831      	ldr	r1, [r6, #0]
 800527e:	061f      	lsls	r7, r3, #24
 8005280:	f851 5b04 	ldr.w	r5, [r1], #4
 8005284:	d402      	bmi.n	800528c <_printf_i+0x188>
 8005286:	065f      	lsls	r7, r3, #25
 8005288:	bf48      	it	mi
 800528a:	b2ad      	uxthmi	r5, r5
 800528c:	6031      	str	r1, [r6, #0]
 800528e:	07d9      	lsls	r1, r3, #31
 8005290:	bf44      	itt	mi
 8005292:	f043 0320 	orrmi.w	r3, r3, #32
 8005296:	6023      	strmi	r3, [r4, #0]
 8005298:	b11d      	cbz	r5, 80052a2 <_printf_i+0x19e>
 800529a:	2310      	movs	r3, #16
 800529c:	e7ac      	b.n	80051f8 <_printf_i+0xf4>
 800529e:	4827      	ldr	r0, [pc, #156]	@ (800533c <_printf_i+0x238>)
 80052a0:	e7e9      	b.n	8005276 <_printf_i+0x172>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f023 0320 	bic.w	r3, r3, #32
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	e7f6      	b.n	800529a <_printf_i+0x196>
 80052ac:	4616      	mov	r6, r2
 80052ae:	e7bd      	b.n	800522c <_printf_i+0x128>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	6825      	ldr	r5, [r4, #0]
 80052b4:	6961      	ldr	r1, [r4, #20]
 80052b6:	1d18      	adds	r0, r3, #4
 80052b8:	6030      	str	r0, [r6, #0]
 80052ba:	062e      	lsls	r6, r5, #24
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	d501      	bpl.n	80052c4 <_printf_i+0x1c0>
 80052c0:	6019      	str	r1, [r3, #0]
 80052c2:	e002      	b.n	80052ca <_printf_i+0x1c6>
 80052c4:	0668      	lsls	r0, r5, #25
 80052c6:	d5fb      	bpl.n	80052c0 <_printf_i+0x1bc>
 80052c8:	8019      	strh	r1, [r3, #0]
 80052ca:	2300      	movs	r3, #0
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	4616      	mov	r6, r2
 80052d0:	e7bc      	b.n	800524c <_printf_i+0x148>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	6032      	str	r2, [r6, #0]
 80052d8:	681e      	ldr	r6, [r3, #0]
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	2100      	movs	r1, #0
 80052de:	4630      	mov	r0, r6
 80052e0:	f7fa ff96 	bl	8000210 <memchr>
 80052e4:	b108      	cbz	r0, 80052ea <_printf_i+0x1e6>
 80052e6:	1b80      	subs	r0, r0, r6
 80052e8:	6060      	str	r0, [r4, #4]
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	2300      	movs	r3, #0
 80052f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f4:	e7aa      	b.n	800524c <_printf_i+0x148>
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	4632      	mov	r2, r6
 80052fa:	4649      	mov	r1, r9
 80052fc:	4640      	mov	r0, r8
 80052fe:	47d0      	blx	sl
 8005300:	3001      	adds	r0, #1
 8005302:	d0ad      	beq.n	8005260 <_printf_i+0x15c>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	079b      	lsls	r3, r3, #30
 8005308:	d413      	bmi.n	8005332 <_printf_i+0x22e>
 800530a:	68e0      	ldr	r0, [r4, #12]
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	4298      	cmp	r0, r3
 8005310:	bfb8      	it	lt
 8005312:	4618      	movlt	r0, r3
 8005314:	e7a6      	b.n	8005264 <_printf_i+0x160>
 8005316:	2301      	movs	r3, #1
 8005318:	4632      	mov	r2, r6
 800531a:	4649      	mov	r1, r9
 800531c:	4640      	mov	r0, r8
 800531e:	47d0      	blx	sl
 8005320:	3001      	adds	r0, #1
 8005322:	d09d      	beq.n	8005260 <_printf_i+0x15c>
 8005324:	3501      	adds	r5, #1
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	9903      	ldr	r1, [sp, #12]
 800532a:	1a5b      	subs	r3, r3, r1
 800532c:	42ab      	cmp	r3, r5
 800532e:	dcf2      	bgt.n	8005316 <_printf_i+0x212>
 8005330:	e7eb      	b.n	800530a <_printf_i+0x206>
 8005332:	2500      	movs	r5, #0
 8005334:	f104 0619 	add.w	r6, r4, #25
 8005338:	e7f5      	b.n	8005326 <_printf_i+0x222>
 800533a:	bf00      	nop
 800533c:	0800573d 	.word	0x0800573d
 8005340:	0800574e 	.word	0x0800574e

08005344 <__sflush_r>:
 8005344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	0716      	lsls	r6, r2, #28
 800534e:	4605      	mov	r5, r0
 8005350:	460c      	mov	r4, r1
 8005352:	d454      	bmi.n	80053fe <__sflush_r+0xba>
 8005354:	684b      	ldr	r3, [r1, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	dc02      	bgt.n	8005360 <__sflush_r+0x1c>
 800535a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	dd48      	ble.n	80053f2 <__sflush_r+0xae>
 8005360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005362:	2e00      	cmp	r6, #0
 8005364:	d045      	beq.n	80053f2 <__sflush_r+0xae>
 8005366:	2300      	movs	r3, #0
 8005368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800536c:	682f      	ldr	r7, [r5, #0]
 800536e:	6a21      	ldr	r1, [r4, #32]
 8005370:	602b      	str	r3, [r5, #0]
 8005372:	d030      	beq.n	80053d6 <__sflush_r+0x92>
 8005374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	0759      	lsls	r1, r3, #29
 800537a:	d505      	bpl.n	8005388 <__sflush_r+0x44>
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005382:	b10b      	cbz	r3, 8005388 <__sflush_r+0x44>
 8005384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	2300      	movs	r3, #0
 800538a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800538c:	6a21      	ldr	r1, [r4, #32]
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	d106      	bne.n	80053a6 <__sflush_r+0x62>
 8005398:	6829      	ldr	r1, [r5, #0]
 800539a:	291d      	cmp	r1, #29
 800539c:	d82b      	bhi.n	80053f6 <__sflush_r+0xb2>
 800539e:	4a2a      	ldr	r2, [pc, #168]	@ (8005448 <__sflush_r+0x104>)
 80053a0:	410a      	asrs	r2, r1
 80053a2:	07d6      	lsls	r6, r2, #31
 80053a4:	d427      	bmi.n	80053f6 <__sflush_r+0xb2>
 80053a6:	2200      	movs	r2, #0
 80053a8:	6062      	str	r2, [r4, #4]
 80053aa:	04d9      	lsls	r1, r3, #19
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	d504      	bpl.n	80053bc <__sflush_r+0x78>
 80053b2:	1c42      	adds	r2, r0, #1
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0x76>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	b903      	cbnz	r3, 80053bc <__sflush_r+0x78>
 80053ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80053bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053be:	602f      	str	r7, [r5, #0]
 80053c0:	b1b9      	cbz	r1, 80053f2 <__sflush_r+0xae>
 80053c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053c6:	4299      	cmp	r1, r3
 80053c8:	d002      	beq.n	80053d0 <__sflush_r+0x8c>
 80053ca:	4628      	mov	r0, r5
 80053cc:	f7ff fbf2 	bl	8004bb4 <_free_r>
 80053d0:	2300      	movs	r3, #0
 80053d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80053d4:	e00d      	b.n	80053f2 <__sflush_r+0xae>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4628      	mov	r0, r5
 80053da:	47b0      	blx	r6
 80053dc:	4602      	mov	r2, r0
 80053de:	1c50      	adds	r0, r2, #1
 80053e0:	d1c9      	bne.n	8005376 <__sflush_r+0x32>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0c6      	beq.n	8005376 <__sflush_r+0x32>
 80053e8:	2b1d      	cmp	r3, #29
 80053ea:	d001      	beq.n	80053f0 <__sflush_r+0xac>
 80053ec:	2b16      	cmp	r3, #22
 80053ee:	d11e      	bne.n	800542e <__sflush_r+0xea>
 80053f0:	602f      	str	r7, [r5, #0]
 80053f2:	2000      	movs	r0, #0
 80053f4:	e022      	b.n	800543c <__sflush_r+0xf8>
 80053f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	e01b      	b.n	8005436 <__sflush_r+0xf2>
 80053fe:	690f      	ldr	r7, [r1, #16]
 8005400:	2f00      	cmp	r7, #0
 8005402:	d0f6      	beq.n	80053f2 <__sflush_r+0xae>
 8005404:	0793      	lsls	r3, r2, #30
 8005406:	680e      	ldr	r6, [r1, #0]
 8005408:	bf08      	it	eq
 800540a:	694b      	ldreq	r3, [r1, #20]
 800540c:	600f      	str	r7, [r1, #0]
 800540e:	bf18      	it	ne
 8005410:	2300      	movne	r3, #0
 8005412:	eba6 0807 	sub.w	r8, r6, r7
 8005416:	608b      	str	r3, [r1, #8]
 8005418:	f1b8 0f00 	cmp.w	r8, #0
 800541c:	dde9      	ble.n	80053f2 <__sflush_r+0xae>
 800541e:	6a21      	ldr	r1, [r4, #32]
 8005420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005422:	4643      	mov	r3, r8
 8005424:	463a      	mov	r2, r7
 8005426:	4628      	mov	r0, r5
 8005428:	47b0      	blx	r6
 800542a:	2800      	cmp	r0, #0
 800542c:	dc08      	bgt.n	8005440 <__sflush_r+0xfc>
 800542e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	4407      	add	r7, r0
 8005442:	eba8 0800 	sub.w	r8, r8, r0
 8005446:	e7e7      	b.n	8005418 <__sflush_r+0xd4>
 8005448:	dfbffffe 	.word	0xdfbffffe

0800544c <_fflush_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	4605      	mov	r5, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b913      	cbnz	r3, 800545c <_fflush_r+0x10>
 8005456:	2500      	movs	r5, #0
 8005458:	4628      	mov	r0, r5
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	b118      	cbz	r0, 8005466 <_fflush_r+0x1a>
 800545e:	6a03      	ldr	r3, [r0, #32]
 8005460:	b90b      	cbnz	r3, 8005466 <_fflush_r+0x1a>
 8005462:	f7ff f9ad 	bl	80047c0 <__sinit>
 8005466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f3      	beq.n	8005456 <_fflush_r+0xa>
 800546e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005470:	07d0      	lsls	r0, r2, #31
 8005472:	d404      	bmi.n	800547e <_fflush_r+0x32>
 8005474:	0599      	lsls	r1, r3, #22
 8005476:	d402      	bmi.n	800547e <_fflush_r+0x32>
 8005478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800547a:	f7ff fb98 	bl	8004bae <__retarget_lock_acquire_recursive>
 800547e:	4628      	mov	r0, r5
 8005480:	4621      	mov	r1, r4
 8005482:	f7ff ff5f 	bl	8005344 <__sflush_r>
 8005486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005488:	07da      	lsls	r2, r3, #31
 800548a:	4605      	mov	r5, r0
 800548c:	d4e4      	bmi.n	8005458 <_fflush_r+0xc>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d4e1      	bmi.n	8005458 <_fflush_r+0xc>
 8005494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005496:	f7ff fb8b 	bl	8004bb0 <__retarget_lock_release_recursive>
 800549a:	e7dd      	b.n	8005458 <_fflush_r+0xc>

0800549c <__swhatbuf_r>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	460c      	mov	r4, r1
 80054a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a4:	2900      	cmp	r1, #0
 80054a6:	b096      	sub	sp, #88	@ 0x58
 80054a8:	4615      	mov	r5, r2
 80054aa:	461e      	mov	r6, r3
 80054ac:	da0d      	bge.n	80054ca <__swhatbuf_r+0x2e>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054b4:	f04f 0100 	mov.w	r1, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2340      	movne	r3, #64	@ 0x40
 80054bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80054c0:	2000      	movs	r0, #0
 80054c2:	6031      	str	r1, [r6, #0]
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	b016      	add	sp, #88	@ 0x58
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	466a      	mov	r2, sp
 80054cc:	f000 f848 	bl	8005560 <_fstat_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	dbec      	blt.n	80054ae <__swhatbuf_r+0x12>
 80054d4:	9901      	ldr	r1, [sp, #4]
 80054d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054de:	4259      	negs	r1, r3
 80054e0:	4159      	adcs	r1, r3
 80054e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054e6:	e7eb      	b.n	80054c0 <__swhatbuf_r+0x24>

080054e8 <__smakebuf_r>:
 80054e8:	898b      	ldrh	r3, [r1, #12]
 80054ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ec:	079d      	lsls	r5, r3, #30
 80054ee:	4606      	mov	r6, r0
 80054f0:	460c      	mov	r4, r1
 80054f2:	d507      	bpl.n	8005504 <__smakebuf_r+0x1c>
 80054f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	2301      	movs	r3, #1
 80054fe:	6163      	str	r3, [r4, #20]
 8005500:	b003      	add	sp, #12
 8005502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005504:	ab01      	add	r3, sp, #4
 8005506:	466a      	mov	r2, sp
 8005508:	f7ff ffc8 	bl	800549c <__swhatbuf_r>
 800550c:	9f00      	ldr	r7, [sp, #0]
 800550e:	4605      	mov	r5, r0
 8005510:	4639      	mov	r1, r7
 8005512:	4630      	mov	r0, r6
 8005514:	f7ff fbba 	bl	8004c8c <_malloc_r>
 8005518:	b948      	cbnz	r0, 800552e <__smakebuf_r+0x46>
 800551a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800551e:	059a      	lsls	r2, r3, #22
 8005520:	d4ee      	bmi.n	8005500 <__smakebuf_r+0x18>
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	f043 0302 	orr.w	r3, r3, #2
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	e7e2      	b.n	80054f4 <__smakebuf_r+0xc>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	6020      	str	r0, [r4, #0]
 8005532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800553e:	b15b      	cbz	r3, 8005558 <__smakebuf_r+0x70>
 8005540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005544:	4630      	mov	r0, r6
 8005546:	f000 f81d 	bl	8005584 <_isatty_r>
 800554a:	b128      	cbz	r0, 8005558 <__smakebuf_r+0x70>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	431d      	orrs	r5, r3
 800555c:	81a5      	strh	r5, [r4, #12]
 800555e:	e7cf      	b.n	8005500 <__smakebuf_r+0x18>

08005560 <_fstat_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d07      	ldr	r5, [pc, #28]	@ (8005580 <_fstat_r+0x20>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	f7fb fc7c 	bl	8000e6a <_fstat>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d102      	bne.n	800557c <_fstat_r+0x1c>
 8005576:	682b      	ldr	r3, [r5, #0]
 8005578:	b103      	cbz	r3, 800557c <_fstat_r+0x1c>
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	bf00      	nop
 8005580:	200003f4 	.word	0x200003f4

08005584 <_isatty_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d06      	ldr	r5, [pc, #24]	@ (80055a0 <_isatty_r+0x1c>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fb fc7b 	bl	8000e8a <_isatty>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_isatty_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_isatty_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	200003f4 	.word	0x200003f4

080055a4 <_sbrk_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d06      	ldr	r5, [pc, #24]	@ (80055c0 <_sbrk_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	f7fb fc84 	bl	8000ebc <_sbrk>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_sbrk_r+0x1a>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_sbrk_r+0x1a>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	200003f4 	.word	0x200003f4

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
